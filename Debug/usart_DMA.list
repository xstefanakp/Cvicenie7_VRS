
usart_DMA.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000023cc  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000d8  0800255c  0800255c  0001255c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002634  08002634  00020068  2**0
                  CONTENTS
  4 .ARM          00000000  08002634  08002634  00020068  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002634  08002634  00020068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002634  08002634  00012634  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002638  08002638  00012638  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000068  20000000  0800263c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000240  20000068  080026a4  00020068  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200002a8  080026a4  000202a8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020068  2**0
                  CONTENTS, READONLY
 12 .debug_info   00005a45  00000000  00000000  00020098  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000014cb  00000000  00000000  00025add  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000630  00000000  00000000  00026fa8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000578  00000000  00000000  000275d8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000033eb  00000000  00000000  00027b50  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00004999  00000000  00000000  0002af3b  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000721bd  00000000  00000000  0002f8d4  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000a1a91  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001b7c  00000000  00000000  000a1b0c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000068 	.word	0x20000068
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08002544 	.word	0x08002544

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000006c 	.word	0x2000006c
 80001cc:	08002544 	.word	0x08002544

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <LL_GPIO_SetPinMode>:
  *         @arg @ref LL_GPIO_MODE_ALTERNATE
  *         @arg @ref LL_GPIO_MODE_ANALOG
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinMode(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Mode)
{
 8000270:	b480      	push	{r7}
 8000272:	b089      	sub	sp, #36	; 0x24
 8000274:	af00      	add	r7, sp, #0
 8000276:	60f8      	str	r0, [r7, #12]
 8000278:	60b9      	str	r1, [r7, #8]
 800027a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODER0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 800027c:	68fb      	ldr	r3, [r7, #12]
 800027e:	681a      	ldr	r2, [r3, #0]
 8000280:	68bb      	ldr	r3, [r7, #8]
 8000282:	617b      	str	r3, [r7, #20]
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000284:	697b      	ldr	r3, [r7, #20]
 8000286:	fa93 f3a3 	rbit	r3, r3
 800028a:	613b      	str	r3, [r7, #16]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 800028c:	693b      	ldr	r3, [r7, #16]
 800028e:	fab3 f383 	clz	r3, r3
 8000292:	005b      	lsls	r3, r3, #1
 8000294:	2103      	movs	r1, #3
 8000296:	fa01 f303 	lsl.w	r3, r1, r3
 800029a:	43db      	mvns	r3, r3
 800029c:	401a      	ands	r2, r3
 800029e:	68bb      	ldr	r3, [r7, #8]
 80002a0:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80002a2:	69fb      	ldr	r3, [r7, #28]
 80002a4:	fa93 f3a3 	rbit	r3, r3
 80002a8:	61bb      	str	r3, [r7, #24]
  return(result);
 80002aa:	69bb      	ldr	r3, [r7, #24]
 80002ac:	fab3 f383 	clz	r3, r3
 80002b0:	005b      	lsls	r3, r3, #1
 80002b2:	6879      	ldr	r1, [r7, #4]
 80002b4:	fa01 f303 	lsl.w	r3, r1, r3
 80002b8:	431a      	orrs	r2, r3
 80002ba:	68fb      	ldr	r3, [r7, #12]
 80002bc:	601a      	str	r2, [r3, #0]
}
 80002be:	bf00      	nop
 80002c0:	3724      	adds	r7, #36	; 0x24
 80002c2:	46bd      	mov	sp, r7
 80002c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002c8:	4770      	bx	lr

080002ca <LL_GPIO_SetPinOutputType>:
  *         @arg @ref LL_GPIO_OUTPUT_PUSHPULL
  *         @arg @ref LL_GPIO_OUTPUT_OPENDRAIN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinOutputType(GPIO_TypeDef *GPIOx, uint32_t PinMask, uint32_t OutputType)
{
 80002ca:	b480      	push	{r7}
 80002cc:	b085      	sub	sp, #20
 80002ce:	af00      	add	r7, sp, #0
 80002d0:	60f8      	str	r0, [r7, #12]
 80002d2:	60b9      	str	r1, [r7, #8]
 80002d4:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 80002d6:	68fb      	ldr	r3, [r7, #12]
 80002d8:	685a      	ldr	r2, [r3, #4]
 80002da:	68bb      	ldr	r3, [r7, #8]
 80002dc:	43db      	mvns	r3, r3
 80002de:	401a      	ands	r2, r3
 80002e0:	68bb      	ldr	r3, [r7, #8]
 80002e2:	6879      	ldr	r1, [r7, #4]
 80002e4:	fb01 f303 	mul.w	r3, r1, r3
 80002e8:	431a      	orrs	r2, r3
 80002ea:	68fb      	ldr	r3, [r7, #12]
 80002ec:	605a      	str	r2, [r3, #4]
}
 80002ee:	bf00      	nop
 80002f0:	3714      	adds	r7, #20
 80002f2:	46bd      	mov	sp, r7
 80002f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002f8:	4770      	bx	lr

080002fa <LL_GPIO_SetPinSpeed>:
  *         @arg @ref LL_GPIO_SPEED_FREQ_MEDIUM
  *         @arg @ref LL_GPIO_SPEED_FREQ_HIGH
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinSpeed(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t  Speed)
{
 80002fa:	b480      	push	{r7}
 80002fc:	b089      	sub	sp, #36	; 0x24
 80002fe:	af00      	add	r7, sp, #0
 8000300:	60f8      	str	r0, [r7, #12]
 8000302:	60b9      	str	r1, [r7, #8]
 8000304:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OSPEEDR, (GPIO_OSPEEDER_OSPEEDR0 << (POSITION_VAL(Pin) * 2U)),
 8000306:	68fb      	ldr	r3, [r7, #12]
 8000308:	689a      	ldr	r2, [r3, #8]
 800030a:	68bb      	ldr	r3, [r7, #8]
 800030c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800030e:	697b      	ldr	r3, [r7, #20]
 8000310:	fa93 f3a3 	rbit	r3, r3
 8000314:	613b      	str	r3, [r7, #16]
  return(result);
 8000316:	693b      	ldr	r3, [r7, #16]
 8000318:	fab3 f383 	clz	r3, r3
 800031c:	005b      	lsls	r3, r3, #1
 800031e:	2103      	movs	r1, #3
 8000320:	fa01 f303 	lsl.w	r3, r1, r3
 8000324:	43db      	mvns	r3, r3
 8000326:	401a      	ands	r2, r3
 8000328:	68bb      	ldr	r3, [r7, #8]
 800032a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800032c:	69fb      	ldr	r3, [r7, #28]
 800032e:	fa93 f3a3 	rbit	r3, r3
 8000332:	61bb      	str	r3, [r7, #24]
  return(result);
 8000334:	69bb      	ldr	r3, [r7, #24]
 8000336:	fab3 f383 	clz	r3, r3
 800033a:	005b      	lsls	r3, r3, #1
 800033c:	6879      	ldr	r1, [r7, #4]
 800033e:	fa01 f303 	lsl.w	r3, r1, r3
 8000342:	431a      	orrs	r2, r3
 8000344:	68fb      	ldr	r3, [r7, #12]
 8000346:	609a      	str	r2, [r3, #8]
             (Speed << (POSITION_VAL(Pin) * 2U)));
}
 8000348:	bf00      	nop
 800034a:	3724      	adds	r7, #36	; 0x24
 800034c:	46bd      	mov	sp, r7
 800034e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000352:	4770      	bx	lr

08000354 <LL_GPIO_SetPinPull>:
  *         @arg @ref LL_GPIO_PULL_UP
  *         @arg @ref LL_GPIO_PULL_DOWN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinPull(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Pull)
{
 8000354:	b480      	push	{r7}
 8000356:	b089      	sub	sp, #36	; 0x24
 8000358:	af00      	add	r7, sp, #0
 800035a:	60f8      	str	r0, [r7, #12]
 800035c:	60b9      	str	r1, [r7, #8]
 800035e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPDR0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 8000360:	68fb      	ldr	r3, [r7, #12]
 8000362:	68da      	ldr	r2, [r3, #12]
 8000364:	68bb      	ldr	r3, [r7, #8]
 8000366:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000368:	697b      	ldr	r3, [r7, #20]
 800036a:	fa93 f3a3 	rbit	r3, r3
 800036e:	613b      	str	r3, [r7, #16]
  return(result);
 8000370:	693b      	ldr	r3, [r7, #16]
 8000372:	fab3 f383 	clz	r3, r3
 8000376:	005b      	lsls	r3, r3, #1
 8000378:	2103      	movs	r1, #3
 800037a:	fa01 f303 	lsl.w	r3, r1, r3
 800037e:	43db      	mvns	r3, r3
 8000380:	401a      	ands	r2, r3
 8000382:	68bb      	ldr	r3, [r7, #8]
 8000384:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000386:	69fb      	ldr	r3, [r7, #28]
 8000388:	fa93 f3a3 	rbit	r3, r3
 800038c:	61bb      	str	r3, [r7, #24]
  return(result);
 800038e:	69bb      	ldr	r3, [r7, #24]
 8000390:	fab3 f383 	clz	r3, r3
 8000394:	005b      	lsls	r3, r3, #1
 8000396:	6879      	ldr	r1, [r7, #4]
 8000398:	fa01 f303 	lsl.w	r3, r1, r3
 800039c:	431a      	orrs	r2, r3
 800039e:	68fb      	ldr	r3, [r7, #12]
 80003a0:	60da      	str	r2, [r3, #12]
}
 80003a2:	bf00      	nop
 80003a4:	3724      	adds	r7, #36	; 0x24
 80003a6:	46bd      	mov	sp, r7
 80003a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003ac:	4770      	bx	lr

080003ae <LL_GPIO_SetAFPin_0_7>:
  *         @arg @ref LL_GPIO_AF_14
  *         @arg @ref LL_GPIO_AF_15
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetAFPin_0_7(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Alternate)
{
 80003ae:	b480      	push	{r7}
 80003b0:	b089      	sub	sp, #36	; 0x24
 80003b2:	af00      	add	r7, sp, #0
 80003b4:	60f8      	str	r0, [r7, #12]
 80003b6:	60b9      	str	r1, [r7, #8]
 80003b8:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[0], (GPIO_AFRL_AFRL0 << (POSITION_VAL(Pin) * 4U)),
 80003ba:	68fb      	ldr	r3, [r7, #12]
 80003bc:	6a1a      	ldr	r2, [r3, #32]
 80003be:	68bb      	ldr	r3, [r7, #8]
 80003c0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80003c2:	697b      	ldr	r3, [r7, #20]
 80003c4:	fa93 f3a3 	rbit	r3, r3
 80003c8:	613b      	str	r3, [r7, #16]
  return(result);
 80003ca:	693b      	ldr	r3, [r7, #16]
 80003cc:	fab3 f383 	clz	r3, r3
 80003d0:	009b      	lsls	r3, r3, #2
 80003d2:	210f      	movs	r1, #15
 80003d4:	fa01 f303 	lsl.w	r3, r1, r3
 80003d8:	43db      	mvns	r3, r3
 80003da:	401a      	ands	r2, r3
 80003dc:	68bb      	ldr	r3, [r7, #8]
 80003de:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80003e0:	69fb      	ldr	r3, [r7, #28]
 80003e2:	fa93 f3a3 	rbit	r3, r3
 80003e6:	61bb      	str	r3, [r7, #24]
  return(result);
 80003e8:	69bb      	ldr	r3, [r7, #24]
 80003ea:	fab3 f383 	clz	r3, r3
 80003ee:	009b      	lsls	r3, r3, #2
 80003f0:	6879      	ldr	r1, [r7, #4]
 80003f2:	fa01 f303 	lsl.w	r3, r1, r3
 80003f6:	431a      	orrs	r2, r3
 80003f8:	68fb      	ldr	r3, [r7, #12]
 80003fa:	621a      	str	r2, [r3, #32]
             (Alternate << (POSITION_VAL(Pin) * 4U)));
}
 80003fc:	bf00      	nop
 80003fe:	3724      	adds	r7, #36	; 0x24
 8000400:	46bd      	mov	sp, r7
 8000402:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000406:	4770      	bx	lr

08000408 <LL_GPIO_SetAFPin_8_15>:
  *         @arg @ref LL_GPIO_AF_14
  *         @arg @ref LL_GPIO_AF_15
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetAFPin_8_15(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Alternate)
{
 8000408:	b480      	push	{r7}
 800040a:	b089      	sub	sp, #36	; 0x24
 800040c:	af00      	add	r7, sp, #0
 800040e:	60f8      	str	r0, [r7, #12]
 8000410:	60b9      	str	r1, [r7, #8]
 8000412:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[1], (GPIO_AFRH_AFRH0 << (POSITION_VAL(Pin >> 8U) * 4U)),
 8000414:	68fb      	ldr	r3, [r7, #12]
 8000416:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000418:	68bb      	ldr	r3, [r7, #8]
 800041a:	0a1b      	lsrs	r3, r3, #8
 800041c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800041e:	697b      	ldr	r3, [r7, #20]
 8000420:	fa93 f3a3 	rbit	r3, r3
 8000424:	613b      	str	r3, [r7, #16]
  return(result);
 8000426:	693b      	ldr	r3, [r7, #16]
 8000428:	fab3 f383 	clz	r3, r3
 800042c:	009b      	lsls	r3, r3, #2
 800042e:	210f      	movs	r1, #15
 8000430:	fa01 f303 	lsl.w	r3, r1, r3
 8000434:	43db      	mvns	r3, r3
 8000436:	401a      	ands	r2, r3
 8000438:	68bb      	ldr	r3, [r7, #8]
 800043a:	0a1b      	lsrs	r3, r3, #8
 800043c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800043e:	69fb      	ldr	r3, [r7, #28]
 8000440:	fa93 f3a3 	rbit	r3, r3
 8000444:	61bb      	str	r3, [r7, #24]
  return(result);
 8000446:	69bb      	ldr	r3, [r7, #24]
 8000448:	fab3 f383 	clz	r3, r3
 800044c:	009b      	lsls	r3, r3, #2
 800044e:	6879      	ldr	r1, [r7, #4]
 8000450:	fa01 f303 	lsl.w	r3, r1, r3
 8000454:	431a      	orrs	r2, r3
 8000456:	68fb      	ldr	r3, [r7, #12]
 8000458:	625a      	str	r2, [r3, #36]	; 0x24
             (Alternate << (POSITION_VAL(Pin >> 8U) * 4U)));
}
 800045a:	bf00      	nop
 800045c:	3724      	adds	r7, #36	; 0x24
 800045e:	46bd      	mov	sp, r7
 8000460:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000464:	4770      	bx	lr

08000466 <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 8000466:	b580      	push	{r7, lr}
 8000468:	b088      	sub	sp, #32
 800046a:	af00      	add	r7, sp, #0
 800046c:	6078      	str	r0, [r7, #4]
 800046e:	6039      	str	r1, [r7, #0]
  uint32_t pinpos     = 0x00000000U;
 8000470:	2300      	movs	r3, #0
 8000472:	61fb      	str	r3, [r7, #28]
  uint32_t currentpin = 0x00000000U;
 8000474:	2300      	movs	r3, #0
 8000476:	61bb      	str	r3, [r7, #24]
  assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
  assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  pinpos = POSITION_VAL(GPIO_InitStruct->Pin);
 8000478:	683b      	ldr	r3, [r7, #0]
 800047a:	681b      	ldr	r3, [r3, #0]
 800047c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800047e:	697b      	ldr	r3, [r7, #20]
 8000480:	fa93 f3a3 	rbit	r3, r3
 8000484:	613b      	str	r3, [r7, #16]
  return(result);
 8000486:	693b      	ldr	r3, [r7, #16]
 8000488:	fab3 f383 	clz	r3, r3
 800048c:	61fb      	str	r3, [r7, #28]

  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 800048e:	e048      	b.n	8000522 <LL_GPIO_Init+0xbc>
  {
    /* Get current io position */
    currentpin = (GPIO_InitStruct->Pin) & (0x00000001U << pinpos);
 8000490:	683b      	ldr	r3, [r7, #0]
 8000492:	681a      	ldr	r2, [r3, #0]
 8000494:	2101      	movs	r1, #1
 8000496:	69fb      	ldr	r3, [r7, #28]
 8000498:	fa01 f303 	lsl.w	r3, r1, r3
 800049c:	4013      	ands	r3, r2
 800049e:	61bb      	str	r3, [r7, #24]

    if (currentpin)
 80004a0:	69bb      	ldr	r3, [r7, #24]
 80004a2:	2b00      	cmp	r3, #0
 80004a4:	d03a      	beq.n	800051c <LL_GPIO_Init+0xb6>
    {
      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 80004a6:	683b      	ldr	r3, [r7, #0]
 80004a8:	685b      	ldr	r3, [r3, #4]
 80004aa:	461a      	mov	r2, r3
 80004ac:	69b9      	ldr	r1, [r7, #24]
 80004ae:	6878      	ldr	r0, [r7, #4]
 80004b0:	f7ff fede 	bl	8000270 <LL_GPIO_SetPinMode>

      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 80004b4:	683b      	ldr	r3, [r7, #0]
 80004b6:	685b      	ldr	r3, [r3, #4]
 80004b8:	2b01      	cmp	r3, #1
 80004ba:	d003      	beq.n	80004c4 <LL_GPIO_Init+0x5e>
 80004bc:	683b      	ldr	r3, [r7, #0]
 80004be:	685b      	ldr	r3, [r3, #4]
 80004c0:	2b02      	cmp	r3, #2
 80004c2:	d106      	bne.n	80004d2 <LL_GPIO_Init+0x6c>
      {
        /* Check Speed mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));

        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 80004c4:	683b      	ldr	r3, [r7, #0]
 80004c6:	689b      	ldr	r3, [r3, #8]
 80004c8:	461a      	mov	r2, r3
 80004ca:	69b9      	ldr	r1, [r7, #24]
 80004cc:	6878      	ldr	r0, [r7, #4]
 80004ce:	f7ff ff14 	bl	80002fa <LL_GPIO_SetPinSpeed>
      }

      /* Pull-up Pull down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 80004d2:	683b      	ldr	r3, [r7, #0]
 80004d4:	691b      	ldr	r3, [r3, #16]
 80004d6:	461a      	mov	r2, r3
 80004d8:	69b9      	ldr	r1, [r7, #24]
 80004da:	6878      	ldr	r0, [r7, #4]
 80004dc:	f7ff ff3a 	bl	8000354 <LL_GPIO_SetPinPull>

      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 80004e0:	683b      	ldr	r3, [r7, #0]
 80004e2:	685b      	ldr	r3, [r3, #4]
 80004e4:	2b02      	cmp	r3, #2
 80004e6:	d119      	bne.n	800051c <LL_GPIO_Init+0xb6>
 80004e8:	69bb      	ldr	r3, [r7, #24]
 80004ea:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80004ec:	68fb      	ldr	r3, [r7, #12]
 80004ee:	fa93 f3a3 	rbit	r3, r3
 80004f2:	60bb      	str	r3, [r7, #8]
  return(result);
 80004f4:	68bb      	ldr	r3, [r7, #8]
      {
        /* Check Alternate parameter */
        assert_param(IS_LL_GPIO_ALTERNATE(GPIO_InitStruct->Alternate));

        /* Speed mode configuration */
        if (POSITION_VAL(currentpin) < 0x00000008U)
 80004f6:	fab3 f383 	clz	r3, r3
 80004fa:	2b07      	cmp	r3, #7
 80004fc:	d807      	bhi.n	800050e <LL_GPIO_Init+0xa8>
        {
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 80004fe:	683b      	ldr	r3, [r7, #0]
 8000500:	695b      	ldr	r3, [r3, #20]
 8000502:	461a      	mov	r2, r3
 8000504:	69b9      	ldr	r1, [r7, #24]
 8000506:	6878      	ldr	r0, [r7, #4]
 8000508:	f7ff ff51 	bl	80003ae <LL_GPIO_SetAFPin_0_7>
 800050c:	e006      	b.n	800051c <LL_GPIO_Init+0xb6>
        }
        else
        {
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 800050e:	683b      	ldr	r3, [r7, #0]
 8000510:	695b      	ldr	r3, [r3, #20]
 8000512:	461a      	mov	r2, r3
 8000514:	69b9      	ldr	r1, [r7, #24]
 8000516:	6878      	ldr	r0, [r7, #4]
 8000518:	f7ff ff76 	bl	8000408 <LL_GPIO_SetAFPin_8_15>
        }
      }
    }
    pinpos++;
 800051c:	69fb      	ldr	r3, [r7, #28]
 800051e:	3301      	adds	r3, #1
 8000520:	61fb      	str	r3, [r7, #28]
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 8000522:	683b      	ldr	r3, [r7, #0]
 8000524:	681a      	ldr	r2, [r3, #0]
 8000526:	69fb      	ldr	r3, [r7, #28]
 8000528:	fa22 f303 	lsr.w	r3, r2, r3
 800052c:	2b00      	cmp	r3, #0
 800052e:	d1af      	bne.n	8000490 <LL_GPIO_Init+0x2a>
  }

  if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 8000530:	683b      	ldr	r3, [r7, #0]
 8000532:	685b      	ldr	r3, [r3, #4]
 8000534:	2b01      	cmp	r3, #1
 8000536:	d003      	beq.n	8000540 <LL_GPIO_Init+0xda>
 8000538:	683b      	ldr	r3, [r7, #0]
 800053a:	685b      	ldr	r3, [r3, #4]
 800053c:	2b02      	cmp	r3, #2
 800053e:	d107      	bne.n	8000550 <LL_GPIO_Init+0xea>
  {
    /* Check Output mode parameters */
    assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));

    /* Output mode configuration*/
    LL_GPIO_SetPinOutputType(GPIOx, GPIO_InitStruct->Pin, GPIO_InitStruct->OutputType);
 8000540:	683b      	ldr	r3, [r7, #0]
 8000542:	6819      	ldr	r1, [r3, #0]
 8000544:	683b      	ldr	r3, [r7, #0]
 8000546:	68db      	ldr	r3, [r3, #12]
 8000548:	461a      	mov	r2, r3
 800054a:	6878      	ldr	r0, [r7, #4]
 800054c:	f7ff febd 	bl	80002ca <LL_GPIO_SetPinOutputType>

  }
  return (SUCCESS);
 8000550:	2300      	movs	r3, #0
}
 8000552:	4618      	mov	r0, r3
 8000554:	3720      	adds	r7, #32
 8000556:	46bd      	mov	sp, r7
 8000558:	bd80      	pop	{r7, pc}
	...

0800055c <LL_RCC_HSI_IsReady>:
  * @brief  Check if HSI clock is ready
  * @rmtoll CR           HSIRDY        LL_RCC_HSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSI_IsReady(void)
{
 800055c:	b480      	push	{r7}
 800055e:	af00      	add	r7, sp, #0
  return (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY));
 8000560:	4b06      	ldr	r3, [pc, #24]	; (800057c <LL_RCC_HSI_IsReady+0x20>)
 8000562:	681b      	ldr	r3, [r3, #0]
 8000564:	f003 0302 	and.w	r3, r3, #2
 8000568:	2b02      	cmp	r3, #2
 800056a:	bf0c      	ite	eq
 800056c:	2301      	moveq	r3, #1
 800056e:	2300      	movne	r3, #0
 8000570:	b2db      	uxtb	r3, r3
}
 8000572:	4618      	mov	r0, r3
 8000574:	46bd      	mov	sp, r7
 8000576:	f85d 7b04 	ldr.w	r7, [sp], #4
 800057a:	4770      	bx	lr
 800057c:	40021000 	.word	0x40021000

08000580 <LL_RCC_LSE_IsReady>:
  * @brief  Check if LSE oscillator Ready
  * @rmtoll BDCR         LSERDY        LL_RCC_LSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSE_IsReady(void)
{
 8000580:	b480      	push	{r7}
 8000582:	af00      	add	r7, sp, #0
  return (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY));
 8000584:	4b06      	ldr	r3, [pc, #24]	; (80005a0 <LL_RCC_LSE_IsReady+0x20>)
 8000586:	6a1b      	ldr	r3, [r3, #32]
 8000588:	f003 0302 	and.w	r3, r3, #2
 800058c:	2b02      	cmp	r3, #2
 800058e:	bf0c      	ite	eq
 8000590:	2301      	moveq	r3, #1
 8000592:	2300      	movne	r3, #0
 8000594:	b2db      	uxtb	r3, r3
}
 8000596:	4618      	mov	r0, r3
 8000598:	46bd      	mov	sp, r7
 800059a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800059e:	4770      	bx	lr
 80005a0:	40021000 	.word	0x40021000

080005a4 <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSI
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLL
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 80005a4:	b480      	push	{r7}
 80005a6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 80005a8:	4b04      	ldr	r3, [pc, #16]	; (80005bc <LL_RCC_GetSysClkSource+0x18>)
 80005aa:	685b      	ldr	r3, [r3, #4]
 80005ac:	f003 030c 	and.w	r3, r3, #12
}
 80005b0:	4618      	mov	r0, r3
 80005b2:	46bd      	mov	sp, r7
 80005b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005b8:	4770      	bx	lr
 80005ba:	bf00      	nop
 80005bc:	40021000 	.word	0x40021000

080005c0 <LL_RCC_GetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHBPrescaler(void)
{
 80005c0:	b480      	push	{r7}
 80005c2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 80005c4:	4b04      	ldr	r3, [pc, #16]	; (80005d8 <LL_RCC_GetAHBPrescaler+0x18>)
 80005c6:	685b      	ldr	r3, [r3, #4]
 80005c8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 80005cc:	4618      	mov	r0, r3
 80005ce:	46bd      	mov	sp, r7
 80005d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005d4:	4770      	bx	lr
 80005d6:	bf00      	nop
 80005d8:	40021000 	.word	0x40021000

080005dc <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 80005dc:	b480      	push	{r7}
 80005de:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 80005e0:	4b04      	ldr	r3, [pc, #16]	; (80005f4 <LL_RCC_GetAPB1Prescaler+0x18>)
 80005e2:	685b      	ldr	r3, [r3, #4]
 80005e4:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
}
 80005e8:	4618      	mov	r0, r3
 80005ea:	46bd      	mov	sp, r7
 80005ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005f0:	4770      	bx	lr
 80005f2:	bf00      	nop
 80005f4:	40021000 	.word	0x40021000

080005f8 <LL_RCC_GetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_4
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB2Prescaler(void)
{
 80005f8:	b480      	push	{r7}
 80005fa:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 80005fc:	4b04      	ldr	r3, [pc, #16]	; (8000610 <LL_RCC_GetAPB2Prescaler+0x18>)
 80005fe:	685b      	ldr	r3, [r3, #4]
 8000600:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
}
 8000604:	4618      	mov	r0, r3
 8000606:	46bd      	mov	sp, r7
 8000608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800060c:	4770      	bx	lr
 800060e:	bf00      	nop
 8000610:	40021000 	.word	0x40021000

08000614 <LL_RCC_GetUSARTClockSource>:
  *         @arg @ref LL_RCC_USART3_CLKSOURCE_HSI (*)
  *
  *         (*) value not defined in all devices.
  */
__STATIC_INLINE uint32_t LL_RCC_GetUSARTClockSource(uint32_t USARTx)
{
 8000614:	b480      	push	{r7}
 8000616:	b083      	sub	sp, #12
 8000618:	af00      	add	r7, sp, #0
 800061a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CFGR3, (RCC_CFGR3_USART1SW << USARTx)) | (USARTx << 24U));
 800061c:	4b07      	ldr	r3, [pc, #28]	; (800063c <LL_RCC_GetUSARTClockSource+0x28>)
 800061e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000620:	2103      	movs	r1, #3
 8000622:	687b      	ldr	r3, [r7, #4]
 8000624:	fa01 f303 	lsl.w	r3, r1, r3
 8000628:	401a      	ands	r2, r3
 800062a:	687b      	ldr	r3, [r7, #4]
 800062c:	061b      	lsls	r3, r3, #24
 800062e:	4313      	orrs	r3, r2
}
 8000630:	4618      	mov	r0, r3
 8000632:	370c      	adds	r7, #12
 8000634:	46bd      	mov	sp, r7
 8000636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800063a:	4770      	bx	lr
 800063c:	40021000 	.word	0x40021000

08000640 <LL_RCC_PLL_GetMainSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  *
  *         (*) value not defined in all devices
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 8000640:	b480      	push	{r7}
 8000642:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PLLSRC));
 8000644:	4b04      	ldr	r3, [pc, #16]	; (8000658 <LL_RCC_PLL_GetMainSource+0x18>)
 8000646:	685b      	ldr	r3, [r3, #4]
 8000648:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
}
 800064c:	4618      	mov	r0, r3
 800064e:	46bd      	mov	sp, r7
 8000650:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000654:	4770      	bx	lr
 8000656:	bf00      	nop
 8000658:	40021000 	.word	0x40021000

0800065c <LL_RCC_PLL_GetMultiplicator>:
  *         @arg @ref LL_RCC_PLL_MUL_14
  *         @arg @ref LL_RCC_PLL_MUL_15
  *         @arg @ref LL_RCC_PLL_MUL_16
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMultiplicator(void)
{
 800065c:	b480      	push	{r7}
 800065e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PLLMUL));
 8000660:	4b04      	ldr	r3, [pc, #16]	; (8000674 <LL_RCC_PLL_GetMultiplicator+0x18>)
 8000662:	685b      	ldr	r3, [r3, #4]
 8000664:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
}
 8000668:	4618      	mov	r0, r3
 800066a:	46bd      	mov	sp, r7
 800066c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000670:	4770      	bx	lr
 8000672:	bf00      	nop
 8000674:	40021000 	.word	0x40021000

08000678 <LL_RCC_PLL_GetPrediv>:
  *         @arg @ref LL_RCC_PREDIV_DIV_14
  *         @arg @ref LL_RCC_PREDIV_DIV_15
  *         @arg @ref LL_RCC_PREDIV_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetPrediv(void)
{
 8000678:	b480      	push	{r7}
 800067a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR2, RCC_CFGR2_PREDIV));
 800067c:	4b04      	ldr	r3, [pc, #16]	; (8000690 <LL_RCC_PLL_GetPrediv+0x18>)
 800067e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000680:	f003 030f 	and.w	r3, r3, #15
}
 8000684:	4618      	mov	r0, r3
 8000686:	46bd      	mov	sp, r7
 8000688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800068c:	4770      	bx	lr
 800068e:	bf00      	nop
 8000690:	40021000 	.word	0x40021000

08000694 <LL_RCC_GetSystemClocksFreq>:
  *         configuration based on this function will be incorrect.
  * @param  RCC_Clocks pointer to a @ref LL_RCC_ClocksTypeDef structure which will hold the clocks frequencies
  * @retval None
  */
void LL_RCC_GetSystemClocksFreq(LL_RCC_ClocksTypeDef *RCC_Clocks)
{
 8000694:	b580      	push	{r7, lr}
 8000696:	b082      	sub	sp, #8
 8000698:	af00      	add	r7, sp, #0
 800069a:	6078      	str	r0, [r7, #4]
  /* Get SYSCLK frequency */
  RCC_Clocks->SYSCLK_Frequency = RCC_GetSystemClockFreq();
 800069c:	f000 f860 	bl	8000760 <RCC_GetSystemClockFreq>
 80006a0:	4602      	mov	r2, r0
 80006a2:	687b      	ldr	r3, [r7, #4]
 80006a4:	601a      	str	r2, [r3, #0]

  /* HCLK clock frequency */
  RCC_Clocks->HCLK_Frequency   = RCC_GetHCLKClockFreq(RCC_Clocks->SYSCLK_Frequency);
 80006a6:	687b      	ldr	r3, [r7, #4]
 80006a8:	681b      	ldr	r3, [r3, #0]
 80006aa:	4618      	mov	r0, r3
 80006ac:	f000 f87a 	bl	80007a4 <RCC_GetHCLKClockFreq>
 80006b0:	4602      	mov	r2, r0
 80006b2:	687b      	ldr	r3, [r7, #4]
 80006b4:	605a      	str	r2, [r3, #4]

  /* PCLK1 clock frequency */
  RCC_Clocks->PCLK1_Frequency  = RCC_GetPCLK1ClockFreq(RCC_Clocks->HCLK_Frequency);
 80006b6:	687b      	ldr	r3, [r7, #4]
 80006b8:	685b      	ldr	r3, [r3, #4]
 80006ba:	4618      	mov	r0, r3
 80006bc:	f000 f888 	bl	80007d0 <RCC_GetPCLK1ClockFreq>
 80006c0:	4602      	mov	r2, r0
 80006c2:	687b      	ldr	r3, [r7, #4]
 80006c4:	609a      	str	r2, [r3, #8]

  /* PCLK2 clock frequency */
  RCC_Clocks->PCLK2_Frequency  = RCC_GetPCLK2ClockFreq(RCC_Clocks->HCLK_Frequency);
 80006c6:	687b      	ldr	r3, [r7, #4]
 80006c8:	685b      	ldr	r3, [r3, #4]
 80006ca:	4618      	mov	r0, r3
 80006cc:	f000 f894 	bl	80007f8 <RCC_GetPCLK2ClockFreq>
 80006d0:	4602      	mov	r2, r0
 80006d2:	687b      	ldr	r3, [r7, #4]
 80006d4:	60da      	str	r2, [r3, #12]
}
 80006d6:	bf00      	nop
 80006d8:	3708      	adds	r7, #8
 80006da:	46bd      	mov	sp, r7
 80006dc:	bd80      	pop	{r7, pc}
	...

080006e0 <LL_RCC_GetUSARTClockFreq>:
  *         (*) value not defined in all devices.
  * @retval USART clock frequency (in Hz)
  *         @arg @ref LL_RCC_PERIPH_FREQUENCY_NO indicates that oscillator (HSI or LSE) is not ready
  */
uint32_t LL_RCC_GetUSARTClockFreq(uint32_t USARTxSource)
{
 80006e0:	b580      	push	{r7, lr}
 80006e2:	b084      	sub	sp, #16
 80006e4:	af00      	add	r7, sp, #0
 80006e6:	6078      	str	r0, [r7, #4]
  uint32_t usart_frequency = LL_RCC_PERIPH_FREQUENCY_NO;
 80006e8:	2300      	movs	r3, #0
 80006ea:	60fb      	str	r3, [r7, #12]

  /* Check parameter */
  assert_param(IS_LL_RCC_USART_CLKSOURCE(USARTxSource));
#if defined(RCC_CFGR3_USART1SW)
  if (USARTxSource == LL_RCC_USART1_CLKSOURCE)
 80006ec:	687b      	ldr	r3, [r7, #4]
 80006ee:	2b00      	cmp	r3, #0
 80006f0:	d12a      	bne.n	8000748 <LL_RCC_GetUSARTClockFreq+0x68>
  {
    /* USART1CLK clock frequency */
    switch (LL_RCC_GetUSARTClockSource(USARTxSource))
 80006f2:	6878      	ldr	r0, [r7, #4]
 80006f4:	f7ff ff8e 	bl	8000614 <LL_RCC_GetUSARTClockSource>
 80006f8:	4603      	mov	r3, r0
 80006fa:	2b02      	cmp	r3, #2
 80006fc:	d00f      	beq.n	800071e <LL_RCC_GetUSARTClockFreq+0x3e>
 80006fe:	2b03      	cmp	r3, #3
 8000700:	d005      	beq.n	800070e <LL_RCC_GetUSARTClockFreq+0x2e>
 8000702:	2b01      	cmp	r3, #1
 8000704:	d114      	bne.n	8000730 <LL_RCC_GetUSARTClockFreq+0x50>
    {
      case LL_RCC_USART1_CLKSOURCE_SYSCLK: /* USART1 Clock is System Clock */
        usart_frequency = RCC_GetSystemClockFreq();
 8000706:	f000 f82b 	bl	8000760 <RCC_GetSystemClockFreq>
 800070a:	60f8      	str	r0, [r7, #12]
        break;
 800070c:	e021      	b.n	8000752 <LL_RCC_GetUSARTClockFreq+0x72>

      case LL_RCC_USART1_CLKSOURCE_HSI:    /* USART1 Clock is HSI Osc. */
        if (LL_RCC_HSI_IsReady())
 800070e:	f7ff ff25 	bl	800055c <LL_RCC_HSI_IsReady>
 8000712:	4603      	mov	r3, r0
 8000714:	2b00      	cmp	r3, #0
 8000716:	d019      	beq.n	800074c <LL_RCC_GetUSARTClockFreq+0x6c>
        {
          usart_frequency = HSI_VALUE;
 8000718:	4b10      	ldr	r3, [pc, #64]	; (800075c <LL_RCC_GetUSARTClockFreq+0x7c>)
 800071a:	60fb      	str	r3, [r7, #12]
        }
        break;
 800071c:	e016      	b.n	800074c <LL_RCC_GetUSARTClockFreq+0x6c>

      case LL_RCC_USART1_CLKSOURCE_LSE:    /* USART1 Clock is LSE Osc. */
        if (LL_RCC_LSE_IsReady())
 800071e:	f7ff ff2f 	bl	8000580 <LL_RCC_LSE_IsReady>
 8000722:	4603      	mov	r3, r0
 8000724:	2b00      	cmp	r3, #0
 8000726:	d013      	beq.n	8000750 <LL_RCC_GetUSARTClockFreq+0x70>
        {
          usart_frequency = LSE_VALUE;
 8000728:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800072c:	60fb      	str	r3, [r7, #12]
        }
        break;
 800072e:	e00f      	b.n	8000750 <LL_RCC_GetUSARTClockFreq+0x70>

#if defined(RCC_CFGR3_USART1SW_PCLK1)
      case LL_RCC_USART1_CLKSOURCE_PCLK1:  /* USART1 Clock is PCLK1 */
      default:
        usart_frequency = RCC_GetPCLK1ClockFreq(RCC_GetHCLKClockFreq(RCC_GetSystemClockFreq()));
 8000730:	f000 f816 	bl	8000760 <RCC_GetSystemClockFreq>
 8000734:	4603      	mov	r3, r0
 8000736:	4618      	mov	r0, r3
 8000738:	f000 f834 	bl	80007a4 <RCC_GetHCLKClockFreq>
 800073c:	4603      	mov	r3, r0
 800073e:	4618      	mov	r0, r3
 8000740:	f000 f846 	bl	80007d0 <RCC_GetPCLK1ClockFreq>
 8000744:	60f8      	str	r0, [r7, #12]
#else
      case LL_RCC_USART1_CLKSOURCE_PCLK2:  /* USART1 Clock is PCLK2 */
      default:
        usart_frequency = RCC_GetPCLK2ClockFreq(RCC_GetHCLKClockFreq(RCC_GetSystemClockFreq()));
#endif /* RCC_CFGR3_USART1SW_PCLK1 */
        break;
 8000746:	e004      	b.n	8000752 <LL_RCC_GetUSARTClockFreq+0x72>
    }
  }
 8000748:	bf00      	nop
 800074a:	e002      	b.n	8000752 <LL_RCC_GetUSARTClockFreq+0x72>
        break;
 800074c:	bf00      	nop
 800074e:	e000      	b.n	8000752 <LL_RCC_GetUSARTClockFreq+0x72>
        break;
 8000750:	bf00      	nop
        break;
    }
  }

#endif /* RCC_CFGR3_USART3SW */
  return usart_frequency;
 8000752:	68fb      	ldr	r3, [r7, #12]
}
 8000754:	4618      	mov	r0, r3
 8000756:	3710      	adds	r7, #16
 8000758:	46bd      	mov	sp, r7
 800075a:	bd80      	pop	{r7, pc}
 800075c:	007a1200 	.word	0x007a1200

08000760 <RCC_GetSystemClockFreq>:
/**
  * @brief  Return SYSTEM clock frequency
  * @retval SYSTEM clock frequency (in Hz)
  */
uint32_t RCC_GetSystemClockFreq(void)
{
 8000760:	b580      	push	{r7, lr}
 8000762:	b082      	sub	sp, #8
 8000764:	af00      	add	r7, sp, #0
  uint32_t frequency = 0U;
 8000766:	2300      	movs	r3, #0
 8000768:	607b      	str	r3, [r7, #4]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (LL_RCC_GetSysClkSource())
 800076a:	f7ff ff1b 	bl	80005a4 <LL_RCC_GetSysClkSource>
 800076e:	4603      	mov	r3, r0
 8000770:	2b04      	cmp	r3, #4
 8000772:	d006      	beq.n	8000782 <RCC_GetSystemClockFreq+0x22>
 8000774:	2b08      	cmp	r3, #8
 8000776:	d007      	beq.n	8000788 <RCC_GetSystemClockFreq+0x28>
 8000778:	2b00      	cmp	r3, #0
 800077a:	d109      	bne.n	8000790 <RCC_GetSystemClockFreq+0x30>
  {
    case LL_RCC_SYS_CLKSOURCE_STATUS_HSI:  /* HSI used as system clock  source */
      frequency = HSI_VALUE;
 800077c:	4b08      	ldr	r3, [pc, #32]	; (80007a0 <RCC_GetSystemClockFreq+0x40>)
 800077e:	607b      	str	r3, [r7, #4]
      break;
 8000780:	e009      	b.n	8000796 <RCC_GetSystemClockFreq+0x36>

    case LL_RCC_SYS_CLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
      frequency = HSE_VALUE;
 8000782:	4b07      	ldr	r3, [pc, #28]	; (80007a0 <RCC_GetSystemClockFreq+0x40>)
 8000784:	607b      	str	r3, [r7, #4]
      break;
 8000786:	e006      	b.n	8000796 <RCC_GetSystemClockFreq+0x36>

    case LL_RCC_SYS_CLKSOURCE_STATUS_PLL:  /* PLL used as system clock  source */
      frequency = RCC_PLL_GetFreqDomain_SYS();
 8000788:	f000 f84a 	bl	8000820 <RCC_PLL_GetFreqDomain_SYS>
 800078c:	6078      	str	r0, [r7, #4]
      break;
 800078e:	e002      	b.n	8000796 <RCC_GetSystemClockFreq+0x36>

    default:
      frequency = HSI_VALUE;
 8000790:	4b03      	ldr	r3, [pc, #12]	; (80007a0 <RCC_GetSystemClockFreq+0x40>)
 8000792:	607b      	str	r3, [r7, #4]
      break;
 8000794:	bf00      	nop
  }

  return frequency;
 8000796:	687b      	ldr	r3, [r7, #4]
}
 8000798:	4618      	mov	r0, r3
 800079a:	3708      	adds	r7, #8
 800079c:	46bd      	mov	sp, r7
 800079e:	bd80      	pop	{r7, pc}
 80007a0:	007a1200 	.word	0x007a1200

080007a4 <RCC_GetHCLKClockFreq>:
  * @brief  Return HCLK clock frequency
  * @param  SYSCLK_Frequency SYSCLK clock frequency
  * @retval HCLK clock frequency (in Hz)
  */
uint32_t RCC_GetHCLKClockFreq(uint32_t SYSCLK_Frequency)
{
 80007a4:	b580      	push	{r7, lr}
 80007a6:	b082      	sub	sp, #8
 80007a8:	af00      	add	r7, sp, #0
 80007aa:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  return __LL_RCC_CALC_HCLK_FREQ(SYSCLK_Frequency, LL_RCC_GetAHBPrescaler());
 80007ac:	f7ff ff08 	bl	80005c0 <LL_RCC_GetAHBPrescaler>
 80007b0:	4603      	mov	r3, r0
 80007b2:	091b      	lsrs	r3, r3, #4
 80007b4:	f003 030f 	and.w	r3, r3, #15
 80007b8:	4a04      	ldr	r2, [pc, #16]	; (80007cc <RCC_GetHCLKClockFreq+0x28>)
 80007ba:	5cd3      	ldrb	r3, [r2, r3]
 80007bc:	461a      	mov	r2, r3
 80007be:	687b      	ldr	r3, [r7, #4]
 80007c0:	40d3      	lsrs	r3, r2
}
 80007c2:	4618      	mov	r0, r3
 80007c4:	3708      	adds	r7, #8
 80007c6:	46bd      	mov	sp, r7
 80007c8:	bd80      	pop	{r7, pc}
 80007ca:	bf00      	nop
 80007cc:	080025e0 	.word	0x080025e0

080007d0 <RCC_GetPCLK1ClockFreq>:
  * @brief  Return PCLK1 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK1 clock frequency (in Hz)
  */
uint32_t RCC_GetPCLK1ClockFreq(uint32_t HCLK_Frequency)
{
 80007d0:	b580      	push	{r7, lr}
 80007d2:	b082      	sub	sp, #8
 80007d4:	af00      	add	r7, sp, #0
 80007d6:	6078      	str	r0, [r7, #4]
  /* PCLK1 clock frequency */
  return __LL_RCC_CALC_PCLK1_FREQ(HCLK_Frequency, LL_RCC_GetAPB1Prescaler());
 80007d8:	f7ff ff00 	bl	80005dc <LL_RCC_GetAPB1Prescaler>
 80007dc:	4603      	mov	r3, r0
 80007de:	0a1b      	lsrs	r3, r3, #8
 80007e0:	4a04      	ldr	r2, [pc, #16]	; (80007f4 <RCC_GetPCLK1ClockFreq+0x24>)
 80007e2:	5cd3      	ldrb	r3, [r2, r3]
 80007e4:	461a      	mov	r2, r3
 80007e6:	687b      	ldr	r3, [r7, #4]
 80007e8:	40d3      	lsrs	r3, r2
}
 80007ea:	4618      	mov	r0, r3
 80007ec:	3708      	adds	r7, #8
 80007ee:	46bd      	mov	sp, r7
 80007f0:	bd80      	pop	{r7, pc}
 80007f2:	bf00      	nop
 80007f4:	080025f0 	.word	0x080025f0

080007f8 <RCC_GetPCLK2ClockFreq>:
  * @brief  Return PCLK2 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK2 clock frequency (in Hz)
  */
uint32_t RCC_GetPCLK2ClockFreq(uint32_t HCLK_Frequency)
{
 80007f8:	b580      	push	{r7, lr}
 80007fa:	b082      	sub	sp, #8
 80007fc:	af00      	add	r7, sp, #0
 80007fe:	6078      	str	r0, [r7, #4]
  /* PCLK2 clock frequency */
  return __LL_RCC_CALC_PCLK2_FREQ(HCLK_Frequency, LL_RCC_GetAPB2Prescaler());
 8000800:	f7ff fefa 	bl	80005f8 <LL_RCC_GetAPB2Prescaler>
 8000804:	4603      	mov	r3, r0
 8000806:	0adb      	lsrs	r3, r3, #11
 8000808:	4a04      	ldr	r2, [pc, #16]	; (800081c <RCC_GetPCLK2ClockFreq+0x24>)
 800080a:	5cd3      	ldrb	r3, [r2, r3]
 800080c:	461a      	mov	r2, r3
 800080e:	687b      	ldr	r3, [r7, #4]
 8000810:	40d3      	lsrs	r3, r2
}
 8000812:	4618      	mov	r0, r3
 8000814:	3708      	adds	r7, #8
 8000816:	46bd      	mov	sp, r7
 8000818:	bd80      	pop	{r7, pc}
 800081a:	bf00      	nop
 800081c:	080025f0 	.word	0x080025f0

08000820 <RCC_PLL_GetFreqDomain_SYS>:
/**
  * @brief  Return PLL clock frequency used for system domain
  * @retval PLL clock frequency (in Hz)
  */
uint32_t RCC_PLL_GetFreqDomain_SYS(void)
{
 8000820:	b590      	push	{r4, r7, lr}
 8000822:	b085      	sub	sp, #20
 8000824:	af00      	add	r7, sp, #0
  uint32_t pllinputfreq = 0U, pllsource = 0U;
 8000826:	2300      	movs	r3, #0
 8000828:	60fb      	str	r3, [r7, #12]
 800082a:	2300      	movs	r3, #0
 800082c:	60bb      	str	r3, [r7, #8]

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLL divider) * PLL Multiplicator */

  /* Get PLL source */
  pllsource = LL_RCC_PLL_GetMainSource();
 800082e:	f7ff ff07 	bl	8000640 <LL_RCC_PLL_GetMainSource>
 8000832:	60b8      	str	r0, [r7, #8]

  switch (pllsource)
 8000834:	68bb      	ldr	r3, [r7, #8]
 8000836:	2b00      	cmp	r3, #0
 8000838:	d003      	beq.n	8000842 <RCC_PLL_GetFreqDomain_SYS+0x22>
 800083a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800083e:	d003      	beq.n	8000848 <RCC_PLL_GetFreqDomain_SYS+0x28>
 8000840:	e005      	b.n	800084e <RCC_PLL_GetFreqDomain_SYS+0x2e>
#if defined(RCC_PLLSRC_PREDIV1_SUPPORT)
    case LL_RCC_PLLSOURCE_HSI:       /* HSI used as PLL clock source */
      pllinputfreq = HSI_VALUE;
#else
    case LL_RCC_PLLSOURCE_HSI_DIV_2: /* HSI used as PLL clock source */
      pllinputfreq = HSI_VALUE / 2U;
 8000842:	4b13      	ldr	r3, [pc, #76]	; (8000890 <RCC_PLL_GetFreqDomain_SYS+0x70>)
 8000844:	60fb      	str	r3, [r7, #12]
#endif /* RCC_PLLSRC_PREDIV1_SUPPORT */
      break;
 8000846:	e005      	b.n	8000854 <RCC_PLL_GetFreqDomain_SYS+0x34>

    case LL_RCC_PLLSOURCE_HSE:       /* HSE used as PLL clock source */
      pllinputfreq = HSE_VALUE;
 8000848:	4b12      	ldr	r3, [pc, #72]	; (8000894 <RCC_PLL_GetFreqDomain_SYS+0x74>)
 800084a:	60fb      	str	r3, [r7, #12]
      break;
 800084c:	e002      	b.n	8000854 <RCC_PLL_GetFreqDomain_SYS+0x34>

    default:
#if defined(RCC_PLLSRC_PREDIV1_SUPPORT)
      pllinputfreq = HSI_VALUE;
#else
      pllinputfreq = HSI_VALUE / 2U;
 800084e:	4b10      	ldr	r3, [pc, #64]	; (8000890 <RCC_PLL_GetFreqDomain_SYS+0x70>)
 8000850:	60fb      	str	r3, [r7, #12]
#endif /* RCC_PLLSRC_PREDIV1_SUPPORT */
      break;
 8000852:	bf00      	nop
  }
#if defined(RCC_PLLSRC_PREDIV1_SUPPORT)
  return __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetMultiplicator(), LL_RCC_PLL_GetPrediv());
#else
  return __LL_RCC_CALC_PLLCLK_FREQ((pllinputfreq / (LL_RCC_PLL_GetPrediv() + 1U)), LL_RCC_PLL_GetMultiplicator());
 8000854:	f7ff ff10 	bl	8000678 <LL_RCC_PLL_GetPrediv>
 8000858:	4603      	mov	r3, r0
 800085a:	3301      	adds	r3, #1
 800085c:	68fa      	ldr	r2, [r7, #12]
 800085e:	fbb2 f4f3 	udiv	r4, r2, r3
 8000862:	f7ff fefb 	bl	800065c <LL_RCC_PLL_GetMultiplicator>
 8000866:	4603      	mov	r3, r0
 8000868:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 800086c:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8000870:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000872:	687a      	ldr	r2, [r7, #4]
 8000874:	fa92 f2a2 	rbit	r2, r2
 8000878:	603a      	str	r2, [r7, #0]
  return(result);
 800087a:	683a      	ldr	r2, [r7, #0]
 800087c:	fab2 f282 	clz	r2, r2
 8000880:	40d3      	lsrs	r3, r2
 8000882:	3302      	adds	r3, #2
 8000884:	fb03 f304 	mul.w	r3, r3, r4
#endif /* RCC_PLLSRC_PREDIV1_SUPPORT */
}
 8000888:	4618      	mov	r0, r3
 800088a:	3714      	adds	r7, #20
 800088c:	46bd      	mov	sp, r7
 800088e:	bd90      	pop	{r4, r7, pc}
 8000890:	003d0900 	.word	0x003d0900
 8000894:	007a1200 	.word	0x007a1200

08000898 <LL_USART_IsEnabled>:
  * @rmtoll CR1          UE            LL_USART_IsEnabled
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsEnabled(USART_TypeDef *USARTx)
{
 8000898:	b480      	push	{r7}
 800089a:	b083      	sub	sp, #12
 800089c:	af00      	add	r7, sp, #0
 800089e:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->CR1, USART_CR1_UE) == (USART_CR1_UE));
 80008a0:	687b      	ldr	r3, [r7, #4]
 80008a2:	681b      	ldr	r3, [r3, #0]
 80008a4:	f003 0301 	and.w	r3, r3, #1
 80008a8:	2b01      	cmp	r3, #1
 80008aa:	bf0c      	ite	eq
 80008ac:	2301      	moveq	r3, #1
 80008ae:	2300      	movne	r3, #0
 80008b0:	b2db      	uxtb	r3, r3
}
 80008b2:	4618      	mov	r0, r3
 80008b4:	370c      	adds	r7, #12
 80008b6:	46bd      	mov	sp, r7
 80008b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008bc:	4770      	bx	lr

080008be <LL_USART_SetStopBitsLength>:
  *         @arg @ref LL_USART_STOPBITS_1_5
  *         @arg @ref LL_USART_STOPBITS_2
  * @retval None
  */
__STATIC_INLINE void LL_USART_SetStopBitsLength(USART_TypeDef *USARTx, uint32_t StopBits)
{
 80008be:	b480      	push	{r7}
 80008c0:	b083      	sub	sp, #12
 80008c2:	af00      	add	r7, sp, #0
 80008c4:	6078      	str	r0, [r7, #4]
 80008c6:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR2, USART_CR2_STOP, StopBits);
 80008c8:	687b      	ldr	r3, [r7, #4]
 80008ca:	685b      	ldr	r3, [r3, #4]
 80008cc:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80008d0:	683b      	ldr	r3, [r7, #0]
 80008d2:	431a      	orrs	r2, r3
 80008d4:	687b      	ldr	r3, [r7, #4]
 80008d6:	605a      	str	r2, [r3, #4]
}
 80008d8:	bf00      	nop
 80008da:	370c      	adds	r7, #12
 80008dc:	46bd      	mov	sp, r7
 80008de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008e2:	4770      	bx	lr

080008e4 <LL_USART_SetHWFlowCtrl>:
  *         @arg @ref LL_USART_HWCONTROL_CTS
  *         @arg @ref LL_USART_HWCONTROL_RTS_CTS
  * @retval None
  */
__STATIC_INLINE void LL_USART_SetHWFlowCtrl(USART_TypeDef *USARTx, uint32_t HardwareFlowControl)
{
 80008e4:	b480      	push	{r7}
 80008e6:	b083      	sub	sp, #12
 80008e8:	af00      	add	r7, sp, #0
 80008ea:	6078      	str	r0, [r7, #4]
 80008ec:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR3, USART_CR3_RTSE | USART_CR3_CTSE, HardwareFlowControl);
 80008ee:	687b      	ldr	r3, [r7, #4]
 80008f0:	689b      	ldr	r3, [r3, #8]
 80008f2:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80008f6:	683b      	ldr	r3, [r7, #0]
 80008f8:	431a      	orrs	r2, r3
 80008fa:	687b      	ldr	r3, [r7, #4]
 80008fc:	609a      	str	r2, [r3, #8]
}
 80008fe:	bf00      	nop
 8000900:	370c      	adds	r7, #12
 8000902:	46bd      	mov	sp, r7
 8000904:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000908:	4770      	bx	lr

0800090a <LL_USART_SetBaudRate>:
  * @param  BaudRate Baud Rate
  * @retval None
  */
__STATIC_INLINE void LL_USART_SetBaudRate(USART_TypeDef *USARTx, uint32_t PeriphClk, uint32_t OverSampling,
                                          uint32_t BaudRate)
{
 800090a:	b4b0      	push	{r4, r5, r7}
 800090c:	b085      	sub	sp, #20
 800090e:	af00      	add	r7, sp, #0
 8000910:	60f8      	str	r0, [r7, #12]
 8000912:	60b9      	str	r1, [r7, #8]
 8000914:	607a      	str	r2, [r7, #4]
 8000916:	603b      	str	r3, [r7, #0]
  register uint32_t usartdiv = 0x0U;
 8000918:	2500      	movs	r5, #0
  register uint32_t brrtemp = 0x0U;
 800091a:	2400      	movs	r4, #0

  if (OverSampling == LL_USART_OVERSAMPLING_8)
 800091c:	687b      	ldr	r3, [r7, #4]
 800091e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8000922:	d114      	bne.n	800094e <LL_USART_SetBaudRate+0x44>
  {
    usartdiv = (uint16_t)(__LL_USART_DIV_SAMPLING8(PeriphClk, BaudRate));
 8000924:	68bb      	ldr	r3, [r7, #8]
 8000926:	005a      	lsls	r2, r3, #1
 8000928:	683b      	ldr	r3, [r7, #0]
 800092a:	085b      	lsrs	r3, r3, #1
 800092c:	441a      	add	r2, r3
 800092e:	683b      	ldr	r3, [r7, #0]
 8000930:	fbb2 f3f3 	udiv	r3, r2, r3
 8000934:	b29b      	uxth	r3, r3
 8000936:	461d      	mov	r5, r3
    brrtemp = usartdiv & 0xFFF0U;
 8000938:	f64f 74f0 	movw	r4, #65520	; 0xfff0
 800093c:	402c      	ands	r4, r5
    brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800093e:	086b      	lsrs	r3, r5, #1
 8000940:	b29b      	uxth	r3, r3
 8000942:	f003 0307 	and.w	r3, r3, #7
 8000946:	431c      	orrs	r4, r3
    USARTx->BRR = brrtemp;
 8000948:	68fb      	ldr	r3, [r7, #12]
 800094a:	60dc      	str	r4, [r3, #12]
  }
  else
  {
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING16(PeriphClk, BaudRate));
  }
}
 800094c:	e00a      	b.n	8000964 <LL_USART_SetBaudRate+0x5a>
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING16(PeriphClk, BaudRate));
 800094e:	683b      	ldr	r3, [r7, #0]
 8000950:	085a      	lsrs	r2, r3, #1
 8000952:	68bb      	ldr	r3, [r7, #8]
 8000954:	441a      	add	r2, r3
 8000956:	683b      	ldr	r3, [r7, #0]
 8000958:	fbb2 f3f3 	udiv	r3, r2, r3
 800095c:	b29b      	uxth	r3, r3
 800095e:	461a      	mov	r2, r3
 8000960:	68fb      	ldr	r3, [r7, #12]
 8000962:	60da      	str	r2, [r3, #12]
}
 8000964:	bf00      	nop
 8000966:	3714      	adds	r7, #20
 8000968:	46bd      	mov	sp, r7
 800096a:	bcb0      	pop	{r4, r5, r7}
 800096c:	4770      	bx	lr
	...

08000970 <LL_USART_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: USART registers are initialized according to USART_InitStruct content
  *          - ERROR: Problem occurred during USART Registers initialization
  */
ErrorStatus LL_USART_Init(USART_TypeDef *USARTx, LL_USART_InitTypeDef *USART_InitStruct)
{
 8000970:	b580      	push	{r7, lr}
 8000972:	b088      	sub	sp, #32
 8000974:	af00      	add	r7, sp, #0
 8000976:	6078      	str	r0, [r7, #4]
 8000978:	6039      	str	r1, [r7, #0]
  ErrorStatus status = ERROR;
 800097a:	2301      	movs	r3, #1
 800097c:	77fb      	strb	r3, [r7, #31]
  uint32_t periphclk = LL_RCC_PERIPH_FREQUENCY_NO;
 800097e:	2300      	movs	r3, #0
 8000980:	61bb      	str	r3, [r7, #24]
  assert_param(IS_LL_USART_HWCONTROL(USART_InitStruct->HardwareFlowControl));
  assert_param(IS_LL_USART_OVERSAMPLING(USART_InitStruct->OverSampling));

  /* USART needs to be in disabled state, in order to be able to configure some bits in
     CRx registers */
  if (LL_USART_IsEnabled(USARTx) == 0U)
 8000982:	6878      	ldr	r0, [r7, #4]
 8000984:	f7ff ff88 	bl	8000898 <LL_USART_IsEnabled>
 8000988:	4603      	mov	r3, r0
 800098a:	2b00      	cmp	r3, #0
 800098c:	d14e      	bne.n	8000a2c <LL_USART_Init+0xbc>
     * - DataWidth:          USART_CR1_M bits according to USART_InitStruct->DataWidth value
     * - Parity:             USART_CR1_PCE, USART_CR1_PS bits according to USART_InitStruct->Parity value
     * - TransferDirection:  USART_CR1_TE, USART_CR1_RE bits according to USART_InitStruct->TransferDirection value
     * - Oversampling:       USART_CR1_OVER8 bit according to USART_InitStruct->OverSampling value.
     */
    MODIFY_REG(USARTx->CR1,
 800098e:	687b      	ldr	r3, [r7, #4]
 8000990:	681a      	ldr	r2, [r3, #0]
 8000992:	4b29      	ldr	r3, [pc, #164]	; (8000a38 <LL_USART_Init+0xc8>)
 8000994:	4013      	ands	r3, r2
 8000996:	683a      	ldr	r2, [r7, #0]
 8000998:	6851      	ldr	r1, [r2, #4]
 800099a:	683a      	ldr	r2, [r7, #0]
 800099c:	68d2      	ldr	r2, [r2, #12]
 800099e:	4311      	orrs	r1, r2
 80009a0:	683a      	ldr	r2, [r7, #0]
 80009a2:	6912      	ldr	r2, [r2, #16]
 80009a4:	4311      	orrs	r1, r2
 80009a6:	683a      	ldr	r2, [r7, #0]
 80009a8:	6992      	ldr	r2, [r2, #24]
 80009aa:	430a      	orrs	r2, r1
 80009ac:	431a      	orrs	r2, r3
 80009ae:	687b      	ldr	r3, [r7, #4]
 80009b0:	601a      	str	r2, [r3, #0]
    /*---------------------------- USART CR2 Configuration ---------------------
     * Configure USARTx CR2 (Stop bits) with parameters:
     * - Stop Bits:          USART_CR2_STOP bits according to USART_InitStruct->StopBits value.
     * - CLKEN, CPOL, CPHA and LBCL bits are to be configured using LL_USART_ClockInit().
     */
    LL_USART_SetStopBitsLength(USARTx, USART_InitStruct->StopBits);
 80009b2:	683b      	ldr	r3, [r7, #0]
 80009b4:	689b      	ldr	r3, [r3, #8]
 80009b6:	4619      	mov	r1, r3
 80009b8:	6878      	ldr	r0, [r7, #4]
 80009ba:	f7ff ff80 	bl	80008be <LL_USART_SetStopBitsLength>

    /*---------------------------- USART CR3 Configuration ---------------------
     * Configure USARTx CR3 (Hardware Flow Control) with parameters:
     * - HardwareFlowControl: USART_CR3_RTSE, USART_CR3_CTSE bits according to USART_InitStruct->HardwareFlowControl value.
     */
    LL_USART_SetHWFlowCtrl(USARTx, USART_InitStruct->HardwareFlowControl);
 80009be:	683b      	ldr	r3, [r7, #0]
 80009c0:	695b      	ldr	r3, [r3, #20]
 80009c2:	4619      	mov	r1, r3
 80009c4:	6878      	ldr	r0, [r7, #4]
 80009c6:	f7ff ff8d 	bl	80008e4 <LL_USART_SetHWFlowCtrl>

    /*---------------------------- USART BRR Configuration ---------------------
     * Retrieve Clock frequency used for USART Peripheral
     */
    if (USARTx == USART1)
 80009ca:	687b      	ldr	r3, [r7, #4]
 80009cc:	4a1b      	ldr	r2, [pc, #108]	; (8000a3c <LL_USART_Init+0xcc>)
 80009ce:	4293      	cmp	r3, r2
 80009d0:	d104      	bne.n	80009dc <LL_USART_Init+0x6c>
    {
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART1_CLKSOURCE);
 80009d2:	2000      	movs	r0, #0
 80009d4:	f7ff fe84 	bl	80006e0 <LL_RCC_GetUSARTClockFreq>
 80009d8:	61b8      	str	r0, [r7, #24]
 80009da:	e016      	b.n	8000a0a <LL_USART_Init+0x9a>
    }
    else if (USARTx == USART2)
 80009dc:	687b      	ldr	r3, [r7, #4]
 80009de:	4a18      	ldr	r2, [pc, #96]	; (8000a40 <LL_USART_Init+0xd0>)
 80009e0:	4293      	cmp	r3, r2
 80009e2:	d107      	bne.n	80009f4 <LL_USART_Init+0x84>
    {
#if defined (RCC_CFGR3_USART2SW)
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART2_CLKSOURCE);
#else
      /* USART2 clock is PCLK */
      LL_RCC_GetSystemClocksFreq(&RCC_Clocks);
 80009e4:	f107 0308 	add.w	r3, r7, #8
 80009e8:	4618      	mov	r0, r3
 80009ea:	f7ff fe53 	bl	8000694 <LL_RCC_GetSystemClocksFreq>
      periphclk = RCC_Clocks.PCLK1_Frequency;
 80009ee:	693b      	ldr	r3, [r7, #16]
 80009f0:	61bb      	str	r3, [r7, #24]
 80009f2:	e00a      	b.n	8000a0a <LL_USART_Init+0x9a>
#endif
    }
    else if (USARTx == USART3)
 80009f4:	687b      	ldr	r3, [r7, #4]
 80009f6:	4a13      	ldr	r2, [pc, #76]	; (8000a44 <LL_USART_Init+0xd4>)
 80009f8:	4293      	cmp	r3, r2
 80009fa:	d106      	bne.n	8000a0a <LL_USART_Init+0x9a>
    {
#if defined (RCC_CFGR3_USART3SW)
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART3_CLKSOURCE);
#else
      /* USART3 clock is PCLK */
      LL_RCC_GetSystemClocksFreq(&RCC_Clocks);
 80009fc:	f107 0308 	add.w	r3, r7, #8
 8000a00:	4618      	mov	r0, r3
 8000a02:	f7ff fe47 	bl	8000694 <LL_RCC_GetSystemClocksFreq>
      periphclk = RCC_Clocks.PCLK1_Frequency;
 8000a06:	693b      	ldr	r3, [r7, #16]
 8000a08:	61bb      	str	r3, [r7, #24]

    /* Configure the USART Baud Rate :
       - valid baud rate value (different from 0) is required
       - Peripheral clock as returned by RCC service, should be valid (different from 0).
    */
    if ((periphclk != LL_RCC_PERIPH_FREQUENCY_NO)
 8000a0a:	69bb      	ldr	r3, [r7, #24]
 8000a0c:	2b00      	cmp	r3, #0
 8000a0e:	d00d      	beq.n	8000a2c <LL_USART_Init+0xbc>
        && (USART_InitStruct->BaudRate != 0U))
 8000a10:	683b      	ldr	r3, [r7, #0]
 8000a12:	681b      	ldr	r3, [r3, #0]
 8000a14:	2b00      	cmp	r3, #0
 8000a16:	d009      	beq.n	8000a2c <LL_USART_Init+0xbc>
    {
      status = SUCCESS;
 8000a18:	2300      	movs	r3, #0
 8000a1a:	77fb      	strb	r3, [r7, #31]
      LL_USART_SetBaudRate(USARTx,
 8000a1c:	683b      	ldr	r3, [r7, #0]
 8000a1e:	699a      	ldr	r2, [r3, #24]
 8000a20:	683b      	ldr	r3, [r7, #0]
 8000a22:	681b      	ldr	r3, [r3, #0]
 8000a24:	69b9      	ldr	r1, [r7, #24]
 8000a26:	6878      	ldr	r0, [r7, #4]
 8000a28:	f7ff ff6f 	bl	800090a <LL_USART_SetBaudRate>
      assert_param(IS_LL_USART_BRR_MAX(USARTx->BRR));
    }
  }
  /* Endif (=> USART not in Disabled state => return ERROR) */

  return (status);
 8000a2c:	7ffb      	ldrb	r3, [r7, #31]
}
 8000a2e:	4618      	mov	r0, r3
 8000a30:	3720      	adds	r7, #32
 8000a32:	46bd      	mov	sp, r7
 8000a34:	bd80      	pop	{r7, pc}
 8000a36:	bf00      	nop
 8000a38:	efff69f3 	.word	0xefff69f3
 8000a3c:	40013800 	.word	0x40013800
 8000a40:	40004400 	.word	0x40004400
 8000a44:	40004800 	.word	0x40004800

08000a48 <LL_InitTick>:
  *         configuration by calling this function, for a delay use rather osDelay RTOS service.
  * @param  Ticks Number of ticks
  * @retval None
  */
__STATIC_INLINE void LL_InitTick(uint32_t HCLKFrequency, uint32_t Ticks)
{
 8000a48:	b480      	push	{r7}
 8000a4a:	b083      	sub	sp, #12
 8000a4c:	af00      	add	r7, sp, #0
 8000a4e:	6078      	str	r0, [r7, #4]
 8000a50:	6039      	str	r1, [r7, #0]
  /* Configure the SysTick to have interrupt in 1ms time base */
  SysTick->LOAD  = (uint32_t)((HCLKFrequency / Ticks) - 1UL);  /* set reload register */
 8000a52:	687a      	ldr	r2, [r7, #4]
 8000a54:	683b      	ldr	r3, [r7, #0]
 8000a56:	fbb2 f3f3 	udiv	r3, r2, r3
 8000a5a:	4a07      	ldr	r2, [pc, #28]	; (8000a78 <LL_InitTick+0x30>)
 8000a5c:	3b01      	subs	r3, #1
 8000a5e:	6053      	str	r3, [r2, #4]
  SysTick->VAL   = 0UL;                                       /* Load the SysTick Counter Value */
 8000a60:	4b05      	ldr	r3, [pc, #20]	; (8000a78 <LL_InitTick+0x30>)
 8000a62:	2200      	movs	r2, #0
 8000a64:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000a66:	4b04      	ldr	r3, [pc, #16]	; (8000a78 <LL_InitTick+0x30>)
 8000a68:	2205      	movs	r2, #5
 8000a6a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_ENABLE_Msk;                   /* Enable the Systick Timer */
}
 8000a6c:	bf00      	nop
 8000a6e:	370c      	adds	r7, #12
 8000a70:	46bd      	mov	sp, r7
 8000a72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a76:	4770      	bx	lr
 8000a78:	e000e010 	.word	0xe000e010

08000a7c <LL_Init1msTick>:
  * @param  HCLKFrequency HCLK frequency in Hz
  * @note   HCLK frequency can be calculated thanks to RCC helper macro or function @ref LL_RCC_GetSystemClocksFreq
  * @retval None
  */
void LL_Init1msTick(uint32_t HCLKFrequency)
{
 8000a7c:	b580      	push	{r7, lr}
 8000a7e:	b082      	sub	sp, #8
 8000a80:	af00      	add	r7, sp, #0
 8000a82:	6078      	str	r0, [r7, #4]
  /* Use frequency provided in argument */
  LL_InitTick(HCLKFrequency, 1000U);
 8000a84:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000a88:	6878      	ldr	r0, [r7, #4]
 8000a8a:	f7ff ffdd 	bl	8000a48 <LL_InitTick>
}
 8000a8e:	bf00      	nop
 8000a90:	3708      	adds	r7, #8
 8000a92:	46bd      	mov	sp, r7
 8000a94:	bd80      	pop	{r7, pc}
	...

08000a98 <LL_mDelay>:
  *         will configure Systick to 1ms
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
void LL_mDelay(uint32_t Delay)
{
 8000a98:	b480      	push	{r7}
 8000a9a:	b085      	sub	sp, #20
 8000a9c:	af00      	add	r7, sp, #0
 8000a9e:	6078      	str	r0, [r7, #4]
  __IO uint32_t  tmp = SysTick->CTRL;  /* Clear the COUNTFLAG first */
 8000aa0:	4b0e      	ldr	r3, [pc, #56]	; (8000adc <LL_mDelay+0x44>)
 8000aa2:	681b      	ldr	r3, [r3, #0]
 8000aa4:	60fb      	str	r3, [r7, #12]
  /* Add this code to indicate that local variable is not used */
  ((void)tmp);
 8000aa6:	68fb      	ldr	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (Delay < LL_MAX_DELAY)
 8000aa8:	687b      	ldr	r3, [r7, #4]
 8000aaa:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000aae:	d00c      	beq.n	8000aca <LL_mDelay+0x32>
  {
    Delay++;
 8000ab0:	687b      	ldr	r3, [r7, #4]
 8000ab2:	3301      	adds	r3, #1
 8000ab4:	607b      	str	r3, [r7, #4]
  }

  while (Delay)
 8000ab6:	e008      	b.n	8000aca <LL_mDelay+0x32>
  {
    if ((SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk) != 0U)
 8000ab8:	4b08      	ldr	r3, [pc, #32]	; (8000adc <LL_mDelay+0x44>)
 8000aba:	681b      	ldr	r3, [r3, #0]
 8000abc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000ac0:	2b00      	cmp	r3, #0
 8000ac2:	d002      	beq.n	8000aca <LL_mDelay+0x32>
    {
      Delay--;
 8000ac4:	687b      	ldr	r3, [r7, #4]
 8000ac6:	3b01      	subs	r3, #1
 8000ac8:	607b      	str	r3, [r7, #4]
  while (Delay)
 8000aca:	687b      	ldr	r3, [r7, #4]
 8000acc:	2b00      	cmp	r3, #0
 8000ace:	d1f3      	bne.n	8000ab8 <LL_mDelay+0x20>
    }
  }
}
 8000ad0:	bf00      	nop
 8000ad2:	3714      	adds	r7, #20
 8000ad4:	46bd      	mov	sp, r7
 8000ad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ada:	4770      	bx	lr
 8000adc:	e000e010 	.word	0xe000e010

08000ae0 <LL_SetSystemCoreClock>:
  * @note   Variable can be calculated also through SystemCoreClockUpdate function.
  * @param  HCLKFrequency HCLK frequency in Hz (can be calculated thanks to RCC helper macro)
  * @retval None
  */
void LL_SetSystemCoreClock(uint32_t HCLKFrequency)
{
 8000ae0:	b480      	push	{r7}
 8000ae2:	b083      	sub	sp, #12
 8000ae4:	af00      	add	r7, sp, #0
 8000ae6:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  SystemCoreClock = HCLKFrequency;
 8000ae8:	4a04      	ldr	r2, [pc, #16]	; (8000afc <LL_SetSystemCoreClock+0x1c>)
 8000aea:	687b      	ldr	r3, [r7, #4]
 8000aec:	6013      	str	r3, [r2, #0]
}
 8000aee:	bf00      	nop
 8000af0:	370c      	adds	r7, #12
 8000af2:	46bd      	mov	sp, r7
 8000af4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000af8:	4770      	bx	lr
 8000afa:	bf00      	nop
 8000afc:	20000000 	.word	0x20000000

08000b00 <NVIC_EnableIRQ>:
 8000b00:	b480      	push	{r7}
 8000b02:	b083      	sub	sp, #12
 8000b04:	af00      	add	r7, sp, #0
 8000b06:	4603      	mov	r3, r0
 8000b08:	71fb      	strb	r3, [r7, #7]
 8000b0a:	79fb      	ldrb	r3, [r7, #7]
 8000b0c:	f003 021f 	and.w	r2, r3, #31
 8000b10:	4907      	ldr	r1, [pc, #28]	; (8000b30 <NVIC_EnableIRQ+0x30>)
 8000b12:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b16:	095b      	lsrs	r3, r3, #5
 8000b18:	2001      	movs	r0, #1
 8000b1a:	fa00 f202 	lsl.w	r2, r0, r2
 8000b1e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8000b22:	bf00      	nop
 8000b24:	370c      	adds	r7, #12
 8000b26:	46bd      	mov	sp, r7
 8000b28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b2c:	4770      	bx	lr
 8000b2e:	bf00      	nop
 8000b30:	e000e100 	.word	0xe000e100

08000b34 <NVIC_SetPriority>:
 8000b34:	b480      	push	{r7}
 8000b36:	b083      	sub	sp, #12
 8000b38:	af00      	add	r7, sp, #0
 8000b3a:	4603      	mov	r3, r0
 8000b3c:	6039      	str	r1, [r7, #0]
 8000b3e:	71fb      	strb	r3, [r7, #7]
 8000b40:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b44:	2b00      	cmp	r3, #0
 8000b46:	da0b      	bge.n	8000b60 <NVIC_SetPriority+0x2c>
 8000b48:	683b      	ldr	r3, [r7, #0]
 8000b4a:	b2da      	uxtb	r2, r3
 8000b4c:	490c      	ldr	r1, [pc, #48]	; (8000b80 <NVIC_SetPriority+0x4c>)
 8000b4e:	79fb      	ldrb	r3, [r7, #7]
 8000b50:	f003 030f 	and.w	r3, r3, #15
 8000b54:	3b04      	subs	r3, #4
 8000b56:	0112      	lsls	r2, r2, #4
 8000b58:	b2d2      	uxtb	r2, r2
 8000b5a:	440b      	add	r3, r1
 8000b5c:	761a      	strb	r2, [r3, #24]
 8000b5e:	e009      	b.n	8000b74 <NVIC_SetPriority+0x40>
 8000b60:	683b      	ldr	r3, [r7, #0]
 8000b62:	b2da      	uxtb	r2, r3
 8000b64:	4907      	ldr	r1, [pc, #28]	; (8000b84 <NVIC_SetPriority+0x50>)
 8000b66:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b6a:	0112      	lsls	r2, r2, #4
 8000b6c:	b2d2      	uxtb	r2, r2
 8000b6e:	440b      	add	r3, r1
 8000b70:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
 8000b74:	bf00      	nop
 8000b76:	370c      	adds	r7, #12
 8000b78:	46bd      	mov	sp, r7
 8000b7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b7e:	4770      	bx	lr
 8000b80:	e000ed00 	.word	0xe000ed00
 8000b84:	e000e100 	.word	0xe000e100

08000b88 <LL_AHB1_GRP1_EnableClock>:
 8000b88:	b480      	push	{r7}
 8000b8a:	b085      	sub	sp, #20
 8000b8c:	af00      	add	r7, sp, #0
 8000b8e:	6078      	str	r0, [r7, #4]
 8000b90:	4b08      	ldr	r3, [pc, #32]	; (8000bb4 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8000b92:	695a      	ldr	r2, [r3, #20]
 8000b94:	4907      	ldr	r1, [pc, #28]	; (8000bb4 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8000b96:	687b      	ldr	r3, [r7, #4]
 8000b98:	4313      	orrs	r3, r2
 8000b9a:	614b      	str	r3, [r1, #20]
 8000b9c:	4b05      	ldr	r3, [pc, #20]	; (8000bb4 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8000b9e:	695a      	ldr	r2, [r3, #20]
 8000ba0:	687b      	ldr	r3, [r7, #4]
 8000ba2:	4013      	ands	r3, r2
 8000ba4:	60fb      	str	r3, [r7, #12]
 8000ba6:	68fb      	ldr	r3, [r7, #12]
 8000ba8:	bf00      	nop
 8000baa:	3714      	adds	r7, #20
 8000bac:	46bd      	mov	sp, r7
 8000bae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bb2:	4770      	bx	lr
 8000bb4:	40021000 	.word	0x40021000

08000bb8 <MX_DMA_Init>:
 8000bb8:	b580      	push	{r7, lr}
 8000bba:	af00      	add	r7, sp, #0
 8000bbc:	2001      	movs	r0, #1
 8000bbe:	f7ff ffe3 	bl	8000b88 <LL_AHB1_GRP1_EnableClock>
 8000bc2:	2100      	movs	r1, #0
 8000bc4:	2010      	movs	r0, #16
 8000bc6:	f7ff ffb5 	bl	8000b34 <NVIC_SetPriority>
 8000bca:	2010      	movs	r0, #16
 8000bcc:	f7ff ff98 	bl	8000b00 <NVIC_EnableIRQ>
 8000bd0:	2100      	movs	r1, #0
 8000bd2:	2011      	movs	r0, #17
 8000bd4:	f7ff ffae 	bl	8000b34 <NVIC_SetPriority>
 8000bd8:	2011      	movs	r0, #17
 8000bda:	f7ff ff91 	bl	8000b00 <NVIC_EnableIRQ>
 8000bde:	bf00      	nop
 8000be0:	bd80      	pop	{r7, pc}
	...

08000be4 <LL_AHB1_GRP1_EnableClock>:
 8000be4:	b480      	push	{r7}
 8000be6:	b085      	sub	sp, #20
 8000be8:	af00      	add	r7, sp, #0
 8000bea:	6078      	str	r0, [r7, #4]
 8000bec:	4b08      	ldr	r3, [pc, #32]	; (8000c10 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8000bee:	695a      	ldr	r2, [r3, #20]
 8000bf0:	4907      	ldr	r1, [pc, #28]	; (8000c10 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8000bf2:	687b      	ldr	r3, [r7, #4]
 8000bf4:	4313      	orrs	r3, r2
 8000bf6:	614b      	str	r3, [r1, #20]
 8000bf8:	4b05      	ldr	r3, [pc, #20]	; (8000c10 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8000bfa:	695a      	ldr	r2, [r3, #20]
 8000bfc:	687b      	ldr	r3, [r7, #4]
 8000bfe:	4013      	ands	r3, r2
 8000c00:	60fb      	str	r3, [r7, #12]
 8000c02:	68fb      	ldr	r3, [r7, #12]
 8000c04:	bf00      	nop
 8000c06:	3714      	adds	r7, #20
 8000c08:	46bd      	mov	sp, r7
 8000c0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c0e:	4770      	bx	lr
 8000c10:	40021000 	.word	0x40021000

08000c14 <LL_GPIO_ResetOutputPin>:
 8000c14:	b480      	push	{r7}
 8000c16:	b083      	sub	sp, #12
 8000c18:	af00      	add	r7, sp, #0
 8000c1a:	6078      	str	r0, [r7, #4]
 8000c1c:	6039      	str	r1, [r7, #0]
 8000c1e:	687b      	ldr	r3, [r7, #4]
 8000c20:	683a      	ldr	r2, [r7, #0]
 8000c22:	629a      	str	r2, [r3, #40]	; 0x28
 8000c24:	bf00      	nop
 8000c26:	370c      	adds	r7, #12
 8000c28:	46bd      	mov	sp, r7
 8000c2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c2e:	4770      	bx	lr

08000c30 <MX_GPIO_Init>:
 8000c30:	b580      	push	{r7, lr}
 8000c32:	b086      	sub	sp, #24
 8000c34:	af00      	add	r7, sp, #0
 8000c36:	463b      	mov	r3, r7
 8000c38:	2200      	movs	r2, #0
 8000c3a:	601a      	str	r2, [r3, #0]
 8000c3c:	605a      	str	r2, [r3, #4]
 8000c3e:	609a      	str	r2, [r3, #8]
 8000c40:	60da      	str	r2, [r3, #12]
 8000c42:	611a      	str	r2, [r3, #16]
 8000c44:	615a      	str	r2, [r3, #20]
 8000c46:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 8000c4a:	f7ff ffcb 	bl	8000be4 <LL_AHB1_GRP1_EnableClock>
 8000c4e:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 8000c52:	f7ff ffc7 	bl	8000be4 <LL_AHB1_GRP1_EnableClock>
 8000c56:	2108      	movs	r1, #8
 8000c58:	480a      	ldr	r0, [pc, #40]	; (8000c84 <MX_GPIO_Init+0x54>)
 8000c5a:	f7ff ffdb 	bl	8000c14 <LL_GPIO_ResetOutputPin>
 8000c5e:	2308      	movs	r3, #8
 8000c60:	603b      	str	r3, [r7, #0]
 8000c62:	2301      	movs	r3, #1
 8000c64:	607b      	str	r3, [r7, #4]
 8000c66:	2300      	movs	r3, #0
 8000c68:	60bb      	str	r3, [r7, #8]
 8000c6a:	2300      	movs	r3, #0
 8000c6c:	60fb      	str	r3, [r7, #12]
 8000c6e:	2300      	movs	r3, #0
 8000c70:	613b      	str	r3, [r7, #16]
 8000c72:	463b      	mov	r3, r7
 8000c74:	4619      	mov	r1, r3
 8000c76:	4803      	ldr	r0, [pc, #12]	; (8000c84 <MX_GPIO_Init+0x54>)
 8000c78:	f7ff fbf5 	bl	8000466 <LL_GPIO_Init>
 8000c7c:	bf00      	nop
 8000c7e:	3718      	adds	r7, #24
 8000c80:	46bd      	mov	sp, r7
 8000c82:	bd80      	pop	{r7, pc}
 8000c84:	48000400 	.word	0x48000400

08000c88 <NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c88:	b480      	push	{r7}
 8000c8a:	b085      	sub	sp, #20
 8000c8c:	af00      	add	r7, sp, #0
 8000c8e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000c90:	687b      	ldr	r3, [r7, #4]
 8000c92:	f003 0307 	and.w	r3, r3, #7
 8000c96:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000c98:	4b0c      	ldr	r3, [pc, #48]	; (8000ccc <NVIC_SetPriorityGrouping+0x44>)
 8000c9a:	68db      	ldr	r3, [r3, #12]
 8000c9c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000c9e:	68ba      	ldr	r2, [r7, #8]
 8000ca0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000ca4:	4013      	ands	r3, r2
 8000ca6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 8000ca8:	68fb      	ldr	r3, [r7, #12]
 8000caa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000cac:	68bb      	ldr	r3, [r7, #8]
 8000cae:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000cb0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000cb4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000cb8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000cba:	4a04      	ldr	r2, [pc, #16]	; (8000ccc <NVIC_SetPriorityGrouping+0x44>)
 8000cbc:	68bb      	ldr	r3, [r7, #8]
 8000cbe:	60d3      	str	r3, [r2, #12]
}
 8000cc0:	bf00      	nop
 8000cc2:	3714      	adds	r7, #20
 8000cc4:	46bd      	mov	sp, r7
 8000cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cca:	4770      	bx	lr
 8000ccc:	e000ed00 	.word	0xe000ed00

08000cd0 <LL_RCC_HSI_Enable>:
{
 8000cd0:	b480      	push	{r7}
 8000cd2:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8000cd4:	4b05      	ldr	r3, [pc, #20]	; (8000cec <LL_RCC_HSI_Enable+0x1c>)
 8000cd6:	681b      	ldr	r3, [r3, #0]
 8000cd8:	4a04      	ldr	r2, [pc, #16]	; (8000cec <LL_RCC_HSI_Enable+0x1c>)
 8000cda:	f043 0301 	orr.w	r3, r3, #1
 8000cde:	6013      	str	r3, [r2, #0]
}
 8000ce0:	bf00      	nop
 8000ce2:	46bd      	mov	sp, r7
 8000ce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ce8:	4770      	bx	lr
 8000cea:	bf00      	nop
 8000cec:	40021000 	.word	0x40021000

08000cf0 <LL_RCC_HSI_IsReady>:
{
 8000cf0:	b480      	push	{r7}
 8000cf2:	af00      	add	r7, sp, #0
  return (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY));
 8000cf4:	4b06      	ldr	r3, [pc, #24]	; (8000d10 <LL_RCC_HSI_IsReady+0x20>)
 8000cf6:	681b      	ldr	r3, [r3, #0]
 8000cf8:	f003 0302 	and.w	r3, r3, #2
 8000cfc:	2b02      	cmp	r3, #2
 8000cfe:	bf0c      	ite	eq
 8000d00:	2301      	moveq	r3, #1
 8000d02:	2300      	movne	r3, #0
 8000d04:	b2db      	uxtb	r3, r3
}
 8000d06:	4618      	mov	r0, r3
 8000d08:	46bd      	mov	sp, r7
 8000d0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d0e:	4770      	bx	lr
 8000d10:	40021000 	.word	0x40021000

08000d14 <LL_RCC_HSI_SetCalibTrimming>:
{
 8000d14:	b480      	push	{r7}
 8000d16:	b083      	sub	sp, #12
 8000d18:	af00      	add	r7, sp, #0
 8000d1a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CR, RCC_CR_HSITRIM, Value << RCC_CR_HSITRIM_Pos);
 8000d1c:	4b07      	ldr	r3, [pc, #28]	; (8000d3c <LL_RCC_HSI_SetCalibTrimming+0x28>)
 8000d1e:	681b      	ldr	r3, [r3, #0]
 8000d20:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000d24:	687b      	ldr	r3, [r7, #4]
 8000d26:	00db      	lsls	r3, r3, #3
 8000d28:	4904      	ldr	r1, [pc, #16]	; (8000d3c <LL_RCC_HSI_SetCalibTrimming+0x28>)
 8000d2a:	4313      	orrs	r3, r2
 8000d2c:	600b      	str	r3, [r1, #0]
}
 8000d2e:	bf00      	nop
 8000d30:	370c      	adds	r7, #12
 8000d32:	46bd      	mov	sp, r7
 8000d34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d38:	4770      	bx	lr
 8000d3a:	bf00      	nop
 8000d3c:	40021000 	.word	0x40021000

08000d40 <LL_RCC_SetSysClkSource>:
{
 8000d40:	b480      	push	{r7}
 8000d42:	b083      	sub	sp, #12
 8000d44:	af00      	add	r7, sp, #0
 8000d46:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8000d48:	4b06      	ldr	r3, [pc, #24]	; (8000d64 <LL_RCC_SetSysClkSource+0x24>)
 8000d4a:	685b      	ldr	r3, [r3, #4]
 8000d4c:	f023 0203 	bic.w	r2, r3, #3
 8000d50:	4904      	ldr	r1, [pc, #16]	; (8000d64 <LL_RCC_SetSysClkSource+0x24>)
 8000d52:	687b      	ldr	r3, [r7, #4]
 8000d54:	4313      	orrs	r3, r2
 8000d56:	604b      	str	r3, [r1, #4]
}
 8000d58:	bf00      	nop
 8000d5a:	370c      	adds	r7, #12
 8000d5c:	46bd      	mov	sp, r7
 8000d5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d62:	4770      	bx	lr
 8000d64:	40021000 	.word	0x40021000

08000d68 <LL_RCC_GetSysClkSource>:
{
 8000d68:	b480      	push	{r7}
 8000d6a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8000d6c:	4b04      	ldr	r3, [pc, #16]	; (8000d80 <LL_RCC_GetSysClkSource+0x18>)
 8000d6e:	685b      	ldr	r3, [r3, #4]
 8000d70:	f003 030c 	and.w	r3, r3, #12
}
 8000d74:	4618      	mov	r0, r3
 8000d76:	46bd      	mov	sp, r7
 8000d78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d7c:	4770      	bx	lr
 8000d7e:	bf00      	nop
 8000d80:	40021000 	.word	0x40021000

08000d84 <LL_RCC_SetAHBPrescaler>:
{
 8000d84:	b480      	push	{r7}
 8000d86:	b083      	sub	sp, #12
 8000d88:	af00      	add	r7, sp, #0
 8000d8a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 8000d8c:	4b06      	ldr	r3, [pc, #24]	; (8000da8 <LL_RCC_SetAHBPrescaler+0x24>)
 8000d8e:	685b      	ldr	r3, [r3, #4]
 8000d90:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8000d94:	4904      	ldr	r1, [pc, #16]	; (8000da8 <LL_RCC_SetAHBPrescaler+0x24>)
 8000d96:	687b      	ldr	r3, [r7, #4]
 8000d98:	4313      	orrs	r3, r2
 8000d9a:	604b      	str	r3, [r1, #4]
}
 8000d9c:	bf00      	nop
 8000d9e:	370c      	adds	r7, #12
 8000da0:	46bd      	mov	sp, r7
 8000da2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000da6:	4770      	bx	lr
 8000da8:	40021000 	.word	0x40021000

08000dac <LL_RCC_SetAPB1Prescaler>:
{
 8000dac:	b480      	push	{r7}
 8000dae:	b083      	sub	sp, #12
 8000db0:	af00      	add	r7, sp, #0
 8000db2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 8000db4:	4b06      	ldr	r3, [pc, #24]	; (8000dd0 <LL_RCC_SetAPB1Prescaler+0x24>)
 8000db6:	685b      	ldr	r3, [r3, #4]
 8000db8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8000dbc:	4904      	ldr	r1, [pc, #16]	; (8000dd0 <LL_RCC_SetAPB1Prescaler+0x24>)
 8000dbe:	687b      	ldr	r3, [r7, #4]
 8000dc0:	4313      	orrs	r3, r2
 8000dc2:	604b      	str	r3, [r1, #4]
}
 8000dc4:	bf00      	nop
 8000dc6:	370c      	adds	r7, #12
 8000dc8:	46bd      	mov	sp, r7
 8000dca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dce:	4770      	bx	lr
 8000dd0:	40021000 	.word	0x40021000

08000dd4 <LL_RCC_SetAPB2Prescaler>:
{
 8000dd4:	b480      	push	{r7}
 8000dd6:	b083      	sub	sp, #12
 8000dd8:	af00      	add	r7, sp, #0
 8000dda:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 8000ddc:	4b06      	ldr	r3, [pc, #24]	; (8000df8 <LL_RCC_SetAPB2Prescaler+0x24>)
 8000dde:	685b      	ldr	r3, [r3, #4]
 8000de0:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8000de4:	4904      	ldr	r1, [pc, #16]	; (8000df8 <LL_RCC_SetAPB2Prescaler+0x24>)
 8000de6:	687b      	ldr	r3, [r7, #4]
 8000de8:	4313      	orrs	r3, r2
 8000dea:	604b      	str	r3, [r1, #4]
}
 8000dec:	bf00      	nop
 8000dee:	370c      	adds	r7, #12
 8000df0:	46bd      	mov	sp, r7
 8000df2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000df6:	4770      	bx	lr
 8000df8:	40021000 	.word	0x40021000

08000dfc <LL_APB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 8000dfc:	b480      	push	{r7}
 8000dfe:	b085      	sub	sp, #20
 8000e00:	af00      	add	r7, sp, #0
 8000e02:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR, Periphs);
 8000e04:	4b08      	ldr	r3, [pc, #32]	; (8000e28 <LL_APB1_GRP1_EnableClock+0x2c>)
 8000e06:	69da      	ldr	r2, [r3, #28]
 8000e08:	4907      	ldr	r1, [pc, #28]	; (8000e28 <LL_APB1_GRP1_EnableClock+0x2c>)
 8000e0a:	687b      	ldr	r3, [r7, #4]
 8000e0c:	4313      	orrs	r3, r2
 8000e0e:	61cb      	str	r3, [r1, #28]
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 8000e10:	4b05      	ldr	r3, [pc, #20]	; (8000e28 <LL_APB1_GRP1_EnableClock+0x2c>)
 8000e12:	69da      	ldr	r2, [r3, #28]
 8000e14:	687b      	ldr	r3, [r7, #4]
 8000e16:	4013      	ands	r3, r2
 8000e18:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000e1a:	68fb      	ldr	r3, [r7, #12]
}
 8000e1c:	bf00      	nop
 8000e1e:	3714      	adds	r7, #20
 8000e20:	46bd      	mov	sp, r7
 8000e22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e26:	4770      	bx	lr
 8000e28:	40021000 	.word	0x40021000

08000e2c <LL_APB2_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 8000e2c:	b480      	push	{r7}
 8000e2e:	b085      	sub	sp, #20
 8000e30:	af00      	add	r7, sp, #0
 8000e32:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 8000e34:	4b08      	ldr	r3, [pc, #32]	; (8000e58 <LL_APB2_GRP1_EnableClock+0x2c>)
 8000e36:	699a      	ldr	r2, [r3, #24]
 8000e38:	4907      	ldr	r1, [pc, #28]	; (8000e58 <LL_APB2_GRP1_EnableClock+0x2c>)
 8000e3a:	687b      	ldr	r3, [r7, #4]
 8000e3c:	4313      	orrs	r3, r2
 8000e3e:	618b      	str	r3, [r1, #24]
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8000e40:	4b05      	ldr	r3, [pc, #20]	; (8000e58 <LL_APB2_GRP1_EnableClock+0x2c>)
 8000e42:	699a      	ldr	r2, [r3, #24]
 8000e44:	687b      	ldr	r3, [r7, #4]
 8000e46:	4013      	ands	r3, r2
 8000e48:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000e4a:	68fb      	ldr	r3, [r7, #12]
}
 8000e4c:	bf00      	nop
 8000e4e:	3714      	adds	r7, #20
 8000e50:	46bd      	mov	sp, r7
 8000e52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e56:	4770      	bx	lr
 8000e58:	40021000 	.word	0x40021000

08000e5c <LL_FLASH_SetLatency>:
  *         @arg @ref LL_FLASH_LATENCY_1
  *         @arg @ref LL_FLASH_LATENCY_2
  * @retval None
  */
__STATIC_INLINE void LL_FLASH_SetLatency(uint32_t Latency)
{
 8000e5c:	b480      	push	{r7}
 8000e5e:	b083      	sub	sp, #12
 8000e60:	af00      	add	r7, sp, #0
 8000e62:	6078      	str	r0, [r7, #4]
  MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, Latency);
 8000e64:	4b06      	ldr	r3, [pc, #24]	; (8000e80 <LL_FLASH_SetLatency+0x24>)
 8000e66:	681b      	ldr	r3, [r3, #0]
 8000e68:	f023 0207 	bic.w	r2, r3, #7
 8000e6c:	4904      	ldr	r1, [pc, #16]	; (8000e80 <LL_FLASH_SetLatency+0x24>)
 8000e6e:	687b      	ldr	r3, [r7, #4]
 8000e70:	4313      	orrs	r3, r2
 8000e72:	600b      	str	r3, [r1, #0]
}
 8000e74:	bf00      	nop
 8000e76:	370c      	adds	r7, #12
 8000e78:	46bd      	mov	sp, r7
 8000e7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e7e:	4770      	bx	lr
 8000e80:	40022000 	.word	0x40022000

08000e84 <LL_FLASH_GetLatency>:
  *         @arg @ref LL_FLASH_LATENCY_0
  *         @arg @ref LL_FLASH_LATENCY_1
  *         @arg @ref LL_FLASH_LATENCY_2
  */
__STATIC_INLINE uint32_t LL_FLASH_GetLatency(void)
{
 8000e84:	b480      	push	{r7}
 8000e86:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(FLASH->ACR, FLASH_ACR_LATENCY));
 8000e88:	4b04      	ldr	r3, [pc, #16]	; (8000e9c <LL_FLASH_GetLatency+0x18>)
 8000e8a:	681b      	ldr	r3, [r3, #0]
 8000e8c:	f003 0307 	and.w	r3, r3, #7
}
 8000e90:	4618      	mov	r0, r3
 8000e92:	46bd      	mov	sp, r7
 8000e94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e98:	4770      	bx	lr
 8000e9a:	bf00      	nop
 8000e9c:	40022000 	.word	0x40022000

08000ea0 <LL_SYSTICK_SetClkSource>:
  *         @arg @ref LL_SYSTICK_CLKSOURCE_HCLK_DIV8
  *         @arg @ref LL_SYSTICK_CLKSOURCE_HCLK
  * @retval None
  */
__STATIC_INLINE void LL_SYSTICK_SetClkSource(uint32_t Source)
{
 8000ea0:	b480      	push	{r7}
 8000ea2:	b083      	sub	sp, #12
 8000ea4:	af00      	add	r7, sp, #0
 8000ea6:	6078      	str	r0, [r7, #4]
  if (Source == LL_SYSTICK_CLKSOURCE_HCLK)
 8000ea8:	687b      	ldr	r3, [r7, #4]
 8000eaa:	2b04      	cmp	r3, #4
 8000eac:	d106      	bne.n	8000ebc <LL_SYSTICK_SetClkSource+0x1c>
  {
    SET_BIT(SysTick->CTRL, LL_SYSTICK_CLKSOURCE_HCLK);
 8000eae:	4b09      	ldr	r3, [pc, #36]	; (8000ed4 <LL_SYSTICK_SetClkSource+0x34>)
 8000eb0:	681b      	ldr	r3, [r3, #0]
 8000eb2:	4a08      	ldr	r2, [pc, #32]	; (8000ed4 <LL_SYSTICK_SetClkSource+0x34>)
 8000eb4:	f043 0304 	orr.w	r3, r3, #4
 8000eb8:	6013      	str	r3, [r2, #0]
  }
  else
  {
    CLEAR_BIT(SysTick->CTRL, LL_SYSTICK_CLKSOURCE_HCLK);
  }
}
 8000eba:	e005      	b.n	8000ec8 <LL_SYSTICK_SetClkSource+0x28>
    CLEAR_BIT(SysTick->CTRL, LL_SYSTICK_CLKSOURCE_HCLK);
 8000ebc:	4b05      	ldr	r3, [pc, #20]	; (8000ed4 <LL_SYSTICK_SetClkSource+0x34>)
 8000ebe:	681b      	ldr	r3, [r3, #0]
 8000ec0:	4a04      	ldr	r2, [pc, #16]	; (8000ed4 <LL_SYSTICK_SetClkSource+0x34>)
 8000ec2:	f023 0304 	bic.w	r3, r3, #4
 8000ec6:	6013      	str	r3, [r2, #0]
}
 8000ec8:	bf00      	nop
 8000eca:	370c      	adds	r7, #12
 8000ecc:	46bd      	mov	sp, r7
 8000ece:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ed2:	4770      	bx	lr
 8000ed4:	e000e010 	.word	0xe000e010

08000ed8 <printInfoToSerial>:
/* Space for your global variables. */

	// type your global variables here:
int DMA_position = 0;

void printInfoToSerial(){
 8000ed8:	b580      	push	{r7, lr}
 8000eda:	b084      	sub	sp, #16
 8000edc:	af02      	add	r7, sp, #8

	size_t needed = snprintf(NULL, 0,"Buffer capacity: %d bytes, occupied memory: %d bytes, load: %d percentage \n \n",DMA_USART2_BUFFER_SIZE, DMA_position, 100*DMA_position/DMA_USART2_BUFFER_SIZE);
 8000ede:	4b1e      	ldr	r3, [pc, #120]	; (8000f58 <printInfoToSerial+0x80>)
 8000ee0:	681a      	ldr	r2, [r3, #0]
 8000ee2:	4b1d      	ldr	r3, [pc, #116]	; (8000f58 <printInfoToSerial+0x80>)
 8000ee4:	681b      	ldr	r3, [r3, #0]
 8000ee6:	2164      	movs	r1, #100	; 0x64
 8000ee8:	fb01 f303 	mul.w	r3, r1, r3
 8000eec:	2b00      	cmp	r3, #0
 8000eee:	da00      	bge.n	8000ef2 <printInfoToSerial+0x1a>
 8000ef0:	33ff      	adds	r3, #255	; 0xff
 8000ef2:	121b      	asrs	r3, r3, #8
 8000ef4:	9301      	str	r3, [sp, #4]
 8000ef6:	9200      	str	r2, [sp, #0]
 8000ef8:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000efc:	4a17      	ldr	r2, [pc, #92]	; (8000f5c <printInfoToSerial+0x84>)
 8000efe:	2100      	movs	r1, #0
 8000f00:	2000      	movs	r0, #0
 8000f02:	f000 ffbd 	bl	8001e80 <sniprintf>
 8000f06:	4603      	mov	r3, r0
 8000f08:	607b      	str	r3, [r7, #4]
	char* info_about_buffer = (char*)malloc(needed);
 8000f0a:	6878      	ldr	r0, [r7, #4]
 8000f0c:	f000 fee8 	bl	8001ce0 <malloc>
 8000f10:	4603      	mov	r3, r0
 8000f12:	603b      	str	r3, [r7, #0]
	snprintf(info_about_buffer, needed,"Buffer capacity: %d bytes, occupied memory: %d bytes, load: %d percentage \n \n", DMA_USART2_BUFFER_SIZE, DMA_position, 100*DMA_position/DMA_USART2_BUFFER_SIZE);
 8000f14:	4b10      	ldr	r3, [pc, #64]	; (8000f58 <printInfoToSerial+0x80>)
 8000f16:	681a      	ldr	r2, [r3, #0]
 8000f18:	4b0f      	ldr	r3, [pc, #60]	; (8000f58 <printInfoToSerial+0x80>)
 8000f1a:	681b      	ldr	r3, [r3, #0]
 8000f1c:	2164      	movs	r1, #100	; 0x64
 8000f1e:	fb01 f303 	mul.w	r3, r1, r3
 8000f22:	2b00      	cmp	r3, #0
 8000f24:	da00      	bge.n	8000f28 <printInfoToSerial+0x50>
 8000f26:	33ff      	adds	r3, #255	; 0xff
 8000f28:	121b      	asrs	r3, r3, #8
 8000f2a:	9301      	str	r3, [sp, #4]
 8000f2c:	9200      	str	r2, [sp, #0]
 8000f2e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000f32:	4a0a      	ldr	r2, [pc, #40]	; (8000f5c <printInfoToSerial+0x84>)
 8000f34:	6879      	ldr	r1, [r7, #4]
 8000f36:	6838      	ldr	r0, [r7, #0]
 8000f38:	f000 ffa2 	bl	8001e80 <sniprintf>
	USART2_PutBuffer(info_about_buffer, needed);
 8000f3c:	687b      	ldr	r3, [r7, #4]
 8000f3e:	b2db      	uxtb	r3, r3
 8000f40:	4619      	mov	r1, r3
 8000f42:	6838      	ldr	r0, [r7, #0]
 8000f44:	f000 fe1a 	bl	8001b7c <USART2_PutBuffer>

	free(info_about_buffer);
 8000f48:	6838      	ldr	r0, [r7, #0]
 8000f4a:	f000 fed1 	bl	8001cf0 <free>

}
 8000f4e:	bf00      	nop
 8000f50:	3708      	adds	r7, #8
 8000f52:	46bd      	mov	sp, r7
 8000f54:	bd80      	pop	{r7, pc}
 8000f56:	bf00      	nop
 8000f58:	20000084 	.word	0x20000084
 8000f5c:	0800255c 	.word	0x0800255c

08000f60 <main>:

int main(void)
{
 8000f60:	b580      	push	{r7, lr}
 8000f62:	af00      	add	r7, sp, #0
  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_SYSCFG);
 8000f64:	2001      	movs	r0, #1
 8000f66:	f7ff ff61 	bl	8000e2c <LL_APB2_GRP1_EnableClock>
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_PWR);
 8000f6a:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
 8000f6e:	f7ff ff45 	bl	8000dfc <LL_APB1_GRP1_EnableClock>
  NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000f72:	2003      	movs	r0, #3
 8000f74:	f7ff fe88 	bl	8000c88 <NVIC_SetPriorityGrouping>

  /* Configure the system clock */
  SystemClock_Config();
 8000f78:	f000 f812 	bl	8000fa0 <SystemClock_Config>
  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000f7c:	f7ff fe58 	bl	8000c30 <MX_GPIO_Init>
  MX_DMA_Init();
 8000f80:	f7ff fe1a 	bl	8000bb8 <MX_DMA_Init>
  MX_USART2_UART_Init();
 8000f84:	f000 fd40 	bl	8001a08 <MX_USART2_UART_Init>

  /* Space for your local variables, callback registration ...*/
 
 USART2_RegisterCallback(proccesDmaData);
 8000f88:	4804      	ldr	r0, [pc, #16]	; (8000f9c <main+0x3c>)
 8000f8a:	f000 fd2b 	bl	80019e4 <USART2_RegisterCallback>

  while (1)
  {
	 printInfoToSerial();
 8000f8e:	f7ff ffa3 	bl	8000ed8 <printInfoToSerial>

		LL_mDelay(200);
 8000f92:	20c8      	movs	r0, #200	; 0xc8
 8000f94:	f7ff fd80 	bl	8000a98 <LL_mDelay>
	 printInfoToSerial();
 8000f98:	e7f9      	b.n	8000f8e <main+0x2e>
 8000f9a:	bf00      	nop
 8000f9c:	0800100d 	.word	0x0800100d

08000fa0 <SystemClock_Config>:
  /* USER CODE END 3 */
}


void SystemClock_Config(void)
{
 8000fa0:	b580      	push	{r7, lr}
 8000fa2:	af00      	add	r7, sp, #0
  LL_FLASH_SetLatency(LL_FLASH_LATENCY_0);
 8000fa4:	2000      	movs	r0, #0
 8000fa6:	f7ff ff59 	bl	8000e5c <LL_FLASH_SetLatency>

  if(LL_FLASH_GetLatency() != LL_FLASH_LATENCY_0)
 8000faa:	f7ff ff6b 	bl	8000e84 <LL_FLASH_GetLatency>
 8000fae:	4603      	mov	r3, r0
 8000fb0:	2b00      	cmp	r3, #0
 8000fb2:	d001      	beq.n	8000fb8 <SystemClock_Config+0x18>
  {
  Error_Handler();  
 8000fb4:	f000 f8bc 	bl	8001130 <Error_Handler>
  }
  LL_RCC_HSI_Enable();
 8000fb8:	f7ff fe8a 	bl	8000cd0 <LL_RCC_HSI_Enable>

   /* Wait till HSI is ready */
  while(LL_RCC_HSI_IsReady() != 1)
 8000fbc:	bf00      	nop
 8000fbe:	f7ff fe97 	bl	8000cf0 <LL_RCC_HSI_IsReady>
 8000fc2:	4603      	mov	r3, r0
 8000fc4:	2b01      	cmp	r3, #1
 8000fc6:	d1fa      	bne.n	8000fbe <SystemClock_Config+0x1e>
  {
    
  }
  LL_RCC_HSI_SetCalibTrimming(16);
 8000fc8:	2010      	movs	r0, #16
 8000fca:	f7ff fea3 	bl	8000d14 <LL_RCC_HSI_SetCalibTrimming>
  LL_RCC_SetAHBPrescaler(LL_RCC_SYSCLK_DIV_1);
 8000fce:	2000      	movs	r0, #0
 8000fd0:	f7ff fed8 	bl	8000d84 <LL_RCC_SetAHBPrescaler>
  LL_RCC_SetAPB1Prescaler(LL_RCC_APB1_DIV_1);
 8000fd4:	2000      	movs	r0, #0
 8000fd6:	f7ff fee9 	bl	8000dac <LL_RCC_SetAPB1Prescaler>
  LL_RCC_SetAPB2Prescaler(LL_RCC_APB1_DIV_1);
 8000fda:	2000      	movs	r0, #0
 8000fdc:	f7ff fefa 	bl	8000dd4 <LL_RCC_SetAPB2Prescaler>
  LL_RCC_SetSysClkSource(LL_RCC_SYS_CLKSOURCE_HSI);
 8000fe0:	2000      	movs	r0, #0
 8000fe2:	f7ff fead 	bl	8000d40 <LL_RCC_SetSysClkSource>

   /* Wait till System clock is ready */
  while(LL_RCC_GetSysClkSource() != LL_RCC_SYS_CLKSOURCE_STATUS_HSI)
 8000fe6:	bf00      	nop
 8000fe8:	f7ff febe 	bl	8000d68 <LL_RCC_GetSysClkSource>
 8000fec:	4603      	mov	r3, r0
 8000fee:	2b00      	cmp	r3, #0
 8000ff0:	d1fa      	bne.n	8000fe8 <SystemClock_Config+0x48>
  {
  
  }
  LL_Init1msTick(8000000);
 8000ff2:	4805      	ldr	r0, [pc, #20]	; (8001008 <SystemClock_Config+0x68>)
 8000ff4:	f7ff fd42 	bl	8000a7c <LL_Init1msTick>
  LL_SYSTICK_SetClkSource(LL_SYSTICK_CLKSOURCE_HCLK);
 8000ff8:	2004      	movs	r0, #4
 8000ffa:	f7ff ff51 	bl	8000ea0 <LL_SYSTICK_SetClkSource>
  LL_SetSystemCoreClock(8000000);
 8000ffe:	4802      	ldr	r0, [pc, #8]	; (8001008 <SystemClock_Config+0x68>)
 8001000:	f7ff fd6e 	bl	8000ae0 <LL_SetSystemCoreClock>
}
 8001004:	bf00      	nop
 8001006:	bd80      	pop	{r7, pc}
 8001008:	007a1200 	.word	0x007a1200

0800100c <proccesDmaData>:

/*
 * Implementation of function processing data received via USART.
 */
void proccesDmaData(uint8_t sign)
{
 800100c:	b580      	push	{r7, lr}
 800100e:	b08a      	sub	sp, #40	; 0x28
 8001010:	af02      	add	r7, sp, #8
 8001012:	4603      	mov	r3, r0
 8001014:	71fb      	strb	r3, [r7, #7]
	static int letter_counter = 0;
	static bool working = 0;
	int lowers, uppers;

	//first sign?
	if(sign == '#' && working != 1) {
 8001016:	79fb      	ldrb	r3, [r7, #7]
 8001018:	2b23      	cmp	r3, #35	; 0x23
 800101a:	d10c      	bne.n	8001036 <proccesDmaData+0x2a>
 800101c:	4b40      	ldr	r3, [pc, #256]	; (8001120 <proccesDmaData+0x114>)
 800101e:	781b      	ldrb	r3, [r3, #0]
 8001020:	f083 0301 	eor.w	r3, r3, #1
 8001024:	b2db      	uxtb	r3, r3
 8001026:	2b00      	cmp	r3, #0
 8001028:	d005      	beq.n	8001036 <proccesDmaData+0x2a>
		working = 1;
 800102a:	4b3d      	ldr	r3, [pc, #244]	; (8001120 <proccesDmaData+0x114>)
 800102c:	2201      	movs	r2, #1
 800102e:	701a      	strb	r2, [r3, #0]
		letter_counter = 0;
 8001030:	4b3c      	ldr	r3, [pc, #240]	; (8001124 <proccesDmaData+0x118>)
 8001032:	2200      	movs	r2, #0
 8001034:	601a      	str	r2, [r3, #0]
	}

	//count and add letters
	if(working == 1) {
 8001036:	4b3a      	ldr	r3, [pc, #232]	; (8001120 <proccesDmaData+0x114>)
 8001038:	781b      	ldrb	r3, [r3, #0]
 800103a:	2b00      	cmp	r3, #0
 800103c:	d009      	beq.n	8001052 <proccesDmaData+0x46>
		letter_counter+= 1;
 800103e:	4b39      	ldr	r3, [pc, #228]	; (8001124 <proccesDmaData+0x118>)
 8001040:	681b      	ldr	r3, [r3, #0]
 8001042:	3301      	adds	r3, #1
 8001044:	4a37      	ldr	r2, [pc, #220]	; (8001124 <proccesDmaData+0x118>)
 8001046:	6013      	str	r3, [r2, #0]
		letters[letter_counter] = sign;
 8001048:	4b36      	ldr	r3, [pc, #216]	; (8001124 <proccesDmaData+0x118>)
 800104a:	681b      	ldr	r3, [r3, #0]
 800104c:	4936      	ldr	r1, [pc, #216]	; (8001128 <proccesDmaData+0x11c>)
 800104e:	79fa      	ldrb	r2, [r7, #7]
 8001050:	54ca      	strb	r2, [r1, r3]
	}

	//finishing sign?
	if(sign == '$' && letter_counter <= 35) {
 8001052:	79fb      	ldrb	r3, [r7, #7]
 8001054:	2b24      	cmp	r3, #36	; 0x24
 8001056:	d152      	bne.n	80010fe <proccesDmaData+0xf2>
 8001058:	4b32      	ldr	r3, [pc, #200]	; (8001124 <proccesDmaData+0x118>)
 800105a:	681b      	ldr	r3, [r3, #0]
 800105c:	2b23      	cmp	r3, #35	; 0x23
 800105e:	dc4e      	bgt.n	80010fe <proccesDmaData+0xf2>
		working = 0;
 8001060:	4b2f      	ldr	r3, [pc, #188]	; (8001120 <proccesDmaData+0x114>)
 8001062:	2200      	movs	r2, #0
 8001064:	701a      	strb	r2, [r3, #0]
		lowers = 0, uppers = 0;
 8001066:	2300      	movs	r3, #0
 8001068:	61fb      	str	r3, [r7, #28]
 800106a:	2300      	movs	r3, #0
 800106c:	61bb      	str	r3, [r7, #24]
		for(int i = 0; i < letter_counter; i += 1) {
 800106e:	2300      	movs	r3, #0
 8001070:	617b      	str	r3, [r7, #20]
 8001072:	e019      	b.n	80010a8 <proccesDmaData+0x9c>
			char c = letters[i];
 8001074:	4a2c      	ldr	r2, [pc, #176]	; (8001128 <proccesDmaData+0x11c>)
 8001076:	697b      	ldr	r3, [r7, #20]
 8001078:	4413      	add	r3, r2
 800107a:	781b      	ldrb	r3, [r3, #0]
 800107c:	72fb      	strb	r3, [r7, #11]

			if( c >= 'A' && c <= 'Z') {
 800107e:	7afb      	ldrb	r3, [r7, #11]
 8001080:	2b40      	cmp	r3, #64	; 0x40
 8001082:	d905      	bls.n	8001090 <proccesDmaData+0x84>
 8001084:	7afb      	ldrb	r3, [r7, #11]
 8001086:	2b5a      	cmp	r3, #90	; 0x5a
 8001088:	d802      	bhi.n	8001090 <proccesDmaData+0x84>
				uppers +=1;
 800108a:	69bb      	ldr	r3, [r7, #24]
 800108c:	3301      	adds	r3, #1
 800108e:	61bb      	str	r3, [r7, #24]
			}

			if(c >= 'a' && c <= 'z') {
 8001090:	7afb      	ldrb	r3, [r7, #11]
 8001092:	2b60      	cmp	r3, #96	; 0x60
 8001094:	d905      	bls.n	80010a2 <proccesDmaData+0x96>
 8001096:	7afb      	ldrb	r3, [r7, #11]
 8001098:	2b7a      	cmp	r3, #122	; 0x7a
 800109a:	d802      	bhi.n	80010a2 <proccesDmaData+0x96>
				lowers +=1;
 800109c:	69fb      	ldr	r3, [r7, #28]
 800109e:	3301      	adds	r3, #1
 80010a0:	61fb      	str	r3, [r7, #28]
		for(int i = 0; i < letter_counter; i += 1) {
 80010a2:	697b      	ldr	r3, [r7, #20]
 80010a4:	3301      	adds	r3, #1
 80010a6:	617b      	str	r3, [r7, #20]
 80010a8:	4b1e      	ldr	r3, [pc, #120]	; (8001124 <proccesDmaData+0x118>)
 80010aa:	681b      	ldr	r3, [r3, #0]
 80010ac:	697a      	ldr	r2, [r7, #20]
 80010ae:	429a      	cmp	r2, r3
 80010b0:	dbe0      	blt.n	8001074 <proccesDmaData+0x68>
			}

		}


		size_t needed = snprintf(NULL, 0,"Lower letters: %d, Upper Letters: %d \n \n",lowers,uppers);
 80010b2:	69bb      	ldr	r3, [r7, #24]
 80010b4:	9300      	str	r3, [sp, #0]
 80010b6:	69fb      	ldr	r3, [r7, #28]
 80010b8:	4a1c      	ldr	r2, [pc, #112]	; (800112c <proccesDmaData+0x120>)
 80010ba:	2100      	movs	r1, #0
 80010bc:	2000      	movs	r0, #0
 80010be:	f000 fedf 	bl	8001e80 <sniprintf>
 80010c2:	4603      	mov	r3, r0
 80010c4:	613b      	str	r3, [r7, #16]
		char* info_about_letters = (char*)malloc(needed);
 80010c6:	6938      	ldr	r0, [r7, #16]
 80010c8:	f000 fe0a 	bl	8001ce0 <malloc>
 80010cc:	4603      	mov	r3, r0
 80010ce:	60fb      	str	r3, [r7, #12]
		snprintf(info_about_letters, needed,"Lower letters: %d, Upper Letters: %d \n \n",lowers,uppers);
 80010d0:	69bb      	ldr	r3, [r7, #24]
 80010d2:	9300      	str	r3, [sp, #0]
 80010d4:	69fb      	ldr	r3, [r7, #28]
 80010d6:	4a15      	ldr	r2, [pc, #84]	; (800112c <proccesDmaData+0x120>)
 80010d8:	6939      	ldr	r1, [r7, #16]
 80010da:	68f8      	ldr	r0, [r7, #12]
 80010dc:	f000 fed0 	bl	8001e80 <sniprintf>
		USART2_PutBuffer(info_about_letters, needed);
 80010e0:	693b      	ldr	r3, [r7, #16]
 80010e2:	b2db      	uxtb	r3, r3
 80010e4:	4619      	mov	r1, r3
 80010e6:	68f8      	ldr	r0, [r7, #12]
 80010e8:	f000 fd48 	bl	8001b7c <USART2_PutBuffer>

		free(info_about_letters);
 80010ec:	68f8      	ldr	r0, [r7, #12]
 80010ee:	f000 fdff 	bl	8001cf0 <free>
		memset(letters, 0, sizeof(letters));
 80010f2:	f44f 7280 	mov.w	r2, #256	; 0x100
 80010f6:	2100      	movs	r1, #0
 80010f8:	480b      	ldr	r0, [pc, #44]	; (8001128 <proccesDmaData+0x11c>)
 80010fa:	f000 fe01 	bl	8001d00 <memset>
	}

	//empty array
	if(letter_counter >= 35) {
 80010fe:	4b09      	ldr	r3, [pc, #36]	; (8001124 <proccesDmaData+0x118>)
 8001100:	681b      	ldr	r3, [r3, #0]
 8001102:	2b22      	cmp	r3, #34	; 0x22
 8001104:	dd08      	ble.n	8001118 <proccesDmaData+0x10c>
		working = 0;
 8001106:	4b06      	ldr	r3, [pc, #24]	; (8001120 <proccesDmaData+0x114>)
 8001108:	2200      	movs	r2, #0
 800110a:	701a      	strb	r2, [r3, #0]
		memset(letters, 0, sizeof(letters));
 800110c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001110:	2100      	movs	r1, #0
 8001112:	4805      	ldr	r0, [pc, #20]	; (8001128 <proccesDmaData+0x11c>)
 8001114:	f000 fdf4 	bl	8001d00 <memset>
	}
}
 8001118:	bf00      	nop
 800111a:	3720      	adds	r7, #32
 800111c:	46bd      	mov	sp, r7
 800111e:	bd80      	pop	{r7, pc}
 8001120:	20000088 	.word	0x20000088
 8001124:	2000008c 	.word	0x2000008c
 8001128:	20000090 	.word	0x20000090
 800112c:	080025ac 	.word	0x080025ac

08001130 <Error_Handler>:


void Error_Handler(void)
{
 8001130:	b480      	push	{r7}
 8001132:	af00      	add	r7, sp, #0

}
 8001134:	bf00      	nop
 8001136:	46bd      	mov	sp, r7
 8001138:	f85d 7b04 	ldr.w	r7, [sp], #4
 800113c:	4770      	bx	lr
	...

08001140 <LL_DMA_DisableChannel>:
 8001140:	b480      	push	{r7}
 8001142:	b083      	sub	sp, #12
 8001144:	af00      	add	r7, sp, #0
 8001146:	6078      	str	r0, [r7, #4]
 8001148:	6039      	str	r1, [r7, #0]
 800114a:	683b      	ldr	r3, [r7, #0]
 800114c:	3b01      	subs	r3, #1
 800114e:	4a0b      	ldr	r2, [pc, #44]	; (800117c <LL_DMA_DisableChannel+0x3c>)
 8001150:	5cd3      	ldrb	r3, [r2, r3]
 8001152:	461a      	mov	r2, r3
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	4413      	add	r3, r2
 8001158:	681b      	ldr	r3, [r3, #0]
 800115a:	683a      	ldr	r2, [r7, #0]
 800115c:	3a01      	subs	r2, #1
 800115e:	4907      	ldr	r1, [pc, #28]	; (800117c <LL_DMA_DisableChannel+0x3c>)
 8001160:	5c8a      	ldrb	r2, [r1, r2]
 8001162:	4611      	mov	r1, r2
 8001164:	687a      	ldr	r2, [r7, #4]
 8001166:	440a      	add	r2, r1
 8001168:	f023 0301 	bic.w	r3, r3, #1
 800116c:	6013      	str	r3, [r2, #0]
 800116e:	bf00      	nop
 8001170:	370c      	adds	r7, #12
 8001172:	46bd      	mov	sp, r7
 8001174:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001178:	4770      	bx	lr
 800117a:	bf00      	nop
 800117c:	080025d8 	.word	0x080025d8

08001180 <LL_DMA_IsActiveFlag_TC6>:
 8001180:	b480      	push	{r7}
 8001182:	b083      	sub	sp, #12
 8001184:	af00      	add	r7, sp, #0
 8001186:	6078      	str	r0, [r7, #4]
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	681b      	ldr	r3, [r3, #0]
 800118c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001190:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8001194:	bf0c      	ite	eq
 8001196:	2301      	moveq	r3, #1
 8001198:	2300      	movne	r3, #0
 800119a:	b2db      	uxtb	r3, r3
 800119c:	4618      	mov	r0, r3
 800119e:	370c      	adds	r7, #12
 80011a0:	46bd      	mov	sp, r7
 80011a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011a6:	4770      	bx	lr

080011a8 <LL_DMA_IsActiveFlag_TC7>:
 80011a8:	b480      	push	{r7}
 80011aa:	b083      	sub	sp, #12
 80011ac:	af00      	add	r7, sp, #0
 80011ae:	6078      	str	r0, [r7, #4]
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	681b      	ldr	r3, [r3, #0]
 80011b4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80011b8:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80011bc:	bf0c      	ite	eq
 80011be:	2301      	moveq	r3, #1
 80011c0:	2300      	movne	r3, #0
 80011c2:	b2db      	uxtb	r3, r3
 80011c4:	4618      	mov	r0, r3
 80011c6:	370c      	adds	r7, #12
 80011c8:	46bd      	mov	sp, r7
 80011ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ce:	4770      	bx	lr

080011d0 <LL_DMA_IsActiveFlag_HT6>:
 80011d0:	b480      	push	{r7}
 80011d2:	b083      	sub	sp, #12
 80011d4:	af00      	add	r7, sp, #0
 80011d6:	6078      	str	r0, [r7, #4]
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	681b      	ldr	r3, [r3, #0]
 80011dc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80011e0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80011e4:	bf0c      	ite	eq
 80011e6:	2301      	moveq	r3, #1
 80011e8:	2300      	movne	r3, #0
 80011ea:	b2db      	uxtb	r3, r3
 80011ec:	4618      	mov	r0, r3
 80011ee:	370c      	adds	r7, #12
 80011f0:	46bd      	mov	sp, r7
 80011f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011f6:	4770      	bx	lr

080011f8 <LL_DMA_ClearFlag_TC6>:
 80011f8:	b480      	push	{r7}
 80011fa:	b083      	sub	sp, #12
 80011fc:	af00      	add	r7, sp, #0
 80011fe:	6078      	str	r0, [r7, #4]
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8001206:	605a      	str	r2, [r3, #4]
 8001208:	bf00      	nop
 800120a:	370c      	adds	r7, #12
 800120c:	46bd      	mov	sp, r7
 800120e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001212:	4770      	bx	lr

08001214 <LL_DMA_ClearFlag_TC7>:
 8001214:	b480      	push	{r7}
 8001216:	b083      	sub	sp, #12
 8001218:	af00      	add	r7, sp, #0
 800121a:	6078      	str	r0, [r7, #4]
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001222:	605a      	str	r2, [r3, #4]
 8001224:	bf00      	nop
 8001226:	370c      	adds	r7, #12
 8001228:	46bd      	mov	sp, r7
 800122a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800122e:	4770      	bx	lr

08001230 <LL_DMA_ClearFlag_HT6>:
 8001230:	b480      	push	{r7}
 8001232:	b083      	sub	sp, #12
 8001234:	af00      	add	r7, sp, #0
 8001236:	6078      	str	r0, [r7, #4]
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 800123e:	605a      	str	r2, [r3, #4]
 8001240:	bf00      	nop
 8001242:	370c      	adds	r7, #12
 8001244:	46bd      	mov	sp, r7
 8001246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800124a:	4770      	bx	lr

0800124c <LL_USART_IsActiveFlag_IDLE>:
 800124c:	b480      	push	{r7}
 800124e:	b083      	sub	sp, #12
 8001250:	af00      	add	r7, sp, #0
 8001252:	6078      	str	r0, [r7, #4]
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	69db      	ldr	r3, [r3, #28]
 8001258:	f003 0310 	and.w	r3, r3, #16
 800125c:	2b10      	cmp	r3, #16
 800125e:	bf0c      	ite	eq
 8001260:	2301      	moveq	r3, #1
 8001262:	2300      	movne	r3, #0
 8001264:	b2db      	uxtb	r3, r3
 8001266:	4618      	mov	r0, r3
 8001268:	370c      	adds	r7, #12
 800126a:	46bd      	mov	sp, r7
 800126c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001270:	4770      	bx	lr

08001272 <LL_USART_IsActiveFlag_TC>:
 8001272:	b480      	push	{r7}
 8001274:	b083      	sub	sp, #12
 8001276:	af00      	add	r7, sp, #0
 8001278:	6078      	str	r0, [r7, #4]
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	69db      	ldr	r3, [r3, #28]
 800127e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001282:	2b40      	cmp	r3, #64	; 0x40
 8001284:	bf0c      	ite	eq
 8001286:	2301      	moveq	r3, #1
 8001288:	2300      	movne	r3, #0
 800128a:	b2db      	uxtb	r3, r3
 800128c:	4618      	mov	r0, r3
 800128e:	370c      	adds	r7, #12
 8001290:	46bd      	mov	sp, r7
 8001292:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001296:	4770      	bx	lr

08001298 <LL_USART_ClearFlag_IDLE>:
 8001298:	b480      	push	{r7}
 800129a:	b083      	sub	sp, #12
 800129c:	af00      	add	r7, sp, #0
 800129e:	6078      	str	r0, [r7, #4]
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	2210      	movs	r2, #16
 80012a4:	621a      	str	r2, [r3, #32]
 80012a6:	bf00      	nop
 80012a8:	370c      	adds	r7, #12
 80012aa:	46bd      	mov	sp, r7
 80012ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012b0:	4770      	bx	lr

080012b2 <NMI_Handler>:
 80012b2:	b480      	push	{r7}
 80012b4:	af00      	add	r7, sp, #0
 80012b6:	bf00      	nop
 80012b8:	46bd      	mov	sp, r7
 80012ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012be:	4770      	bx	lr

080012c0 <HardFault_Handler>:
 80012c0:	b480      	push	{r7}
 80012c2:	af00      	add	r7, sp, #0
 80012c4:	e7fe      	b.n	80012c4 <HardFault_Handler+0x4>

080012c6 <MemManage_Handler>:
 80012c6:	b480      	push	{r7}
 80012c8:	af00      	add	r7, sp, #0
 80012ca:	e7fe      	b.n	80012ca <MemManage_Handler+0x4>

080012cc <BusFault_Handler>:
 80012cc:	b480      	push	{r7}
 80012ce:	af00      	add	r7, sp, #0
 80012d0:	e7fe      	b.n	80012d0 <BusFault_Handler+0x4>

080012d2 <UsageFault_Handler>:
 80012d2:	b480      	push	{r7}
 80012d4:	af00      	add	r7, sp, #0
 80012d6:	e7fe      	b.n	80012d6 <UsageFault_Handler+0x4>

080012d8 <SVC_Handler>:
 80012d8:	b480      	push	{r7}
 80012da:	af00      	add	r7, sp, #0
 80012dc:	bf00      	nop
 80012de:	46bd      	mov	sp, r7
 80012e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012e4:	4770      	bx	lr

080012e6 <DebugMon_Handler>:
 80012e6:	b480      	push	{r7}
 80012e8:	af00      	add	r7, sp, #0
 80012ea:	bf00      	nop
 80012ec:	46bd      	mov	sp, r7
 80012ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012f2:	4770      	bx	lr

080012f4 <PendSV_Handler>:
 80012f4:	b480      	push	{r7}
 80012f6:	af00      	add	r7, sp, #0
 80012f8:	bf00      	nop
 80012fa:	46bd      	mov	sp, r7
 80012fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001300:	4770      	bx	lr

08001302 <SysTick_Handler>:
 8001302:	b480      	push	{r7}
 8001304:	af00      	add	r7, sp, #0
 8001306:	bf00      	nop
 8001308:	46bd      	mov	sp, r7
 800130a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800130e:	4770      	bx	lr

08001310 <DMA1_Channel6_IRQHandler>:
 8001310:	b580      	push	{r7, lr}
 8001312:	af00      	add	r7, sp, #0
 8001314:	480c      	ldr	r0, [pc, #48]	; (8001348 <DMA1_Channel6_IRQHandler+0x38>)
 8001316:	f7ff ff33 	bl	8001180 <LL_DMA_IsActiveFlag_TC6>
 800131a:	4603      	mov	r3, r0
 800131c:	2b01      	cmp	r3, #1
 800131e:	d105      	bne.n	800132c <DMA1_Channel6_IRQHandler+0x1c>
 8001320:	f000 fc4c 	bl	8001bbc <USART2_CheckDmaReception>
 8001324:	4808      	ldr	r0, [pc, #32]	; (8001348 <DMA1_Channel6_IRQHandler+0x38>)
 8001326:	f7ff ff67 	bl	80011f8 <LL_DMA_ClearFlag_TC6>
 800132a:	e00a      	b.n	8001342 <DMA1_Channel6_IRQHandler+0x32>
 800132c:	4806      	ldr	r0, [pc, #24]	; (8001348 <DMA1_Channel6_IRQHandler+0x38>)
 800132e:	f7ff ff4f 	bl	80011d0 <LL_DMA_IsActiveFlag_HT6>
 8001332:	4603      	mov	r3, r0
 8001334:	2b01      	cmp	r3, #1
 8001336:	d104      	bne.n	8001342 <DMA1_Channel6_IRQHandler+0x32>
 8001338:	f000 fc40 	bl	8001bbc <USART2_CheckDmaReception>
 800133c:	4802      	ldr	r0, [pc, #8]	; (8001348 <DMA1_Channel6_IRQHandler+0x38>)
 800133e:	f7ff ff77 	bl	8001230 <LL_DMA_ClearFlag_HT6>
 8001342:	bf00      	nop
 8001344:	bd80      	pop	{r7, pc}
 8001346:	bf00      	nop
 8001348:	40020000 	.word	0x40020000

0800134c <DMA1_Channel7_IRQHandler>:
 800134c:	b580      	push	{r7, lr}
 800134e:	af00      	add	r7, sp, #0
 8001350:	480a      	ldr	r0, [pc, #40]	; (800137c <DMA1_Channel7_IRQHandler+0x30>)
 8001352:	f7ff ff29 	bl	80011a8 <LL_DMA_IsActiveFlag_TC7>
 8001356:	4603      	mov	r3, r0
 8001358:	2b01      	cmp	r3, #1
 800135a:	d10d      	bne.n	8001378 <DMA1_Channel7_IRQHandler+0x2c>
 800135c:	4807      	ldr	r0, [pc, #28]	; (800137c <DMA1_Channel7_IRQHandler+0x30>)
 800135e:	f7ff ff59 	bl	8001214 <LL_DMA_ClearFlag_TC7>
 8001362:	bf00      	nop
 8001364:	4806      	ldr	r0, [pc, #24]	; (8001380 <DMA1_Channel7_IRQHandler+0x34>)
 8001366:	f7ff ff84 	bl	8001272 <LL_USART_IsActiveFlag_TC>
 800136a:	4603      	mov	r3, r0
 800136c:	2b00      	cmp	r3, #0
 800136e:	d0f9      	beq.n	8001364 <DMA1_Channel7_IRQHandler+0x18>
 8001370:	2107      	movs	r1, #7
 8001372:	4802      	ldr	r0, [pc, #8]	; (800137c <DMA1_Channel7_IRQHandler+0x30>)
 8001374:	f7ff fee4 	bl	8001140 <LL_DMA_DisableChannel>
 8001378:	bf00      	nop
 800137a:	bd80      	pop	{r7, pc}
 800137c:	40020000 	.word	0x40020000
 8001380:	40004400 	.word	0x40004400

08001384 <USART2_IRQHandler>:
 8001384:	b580      	push	{r7, lr}
 8001386:	af00      	add	r7, sp, #0
 8001388:	4806      	ldr	r0, [pc, #24]	; (80013a4 <USART2_IRQHandler+0x20>)
 800138a:	f7ff ff5f 	bl	800124c <LL_USART_IsActiveFlag_IDLE>
 800138e:	4603      	mov	r3, r0
 8001390:	2b00      	cmp	r3, #0
 8001392:	d004      	beq.n	800139e <USART2_IRQHandler+0x1a>
 8001394:	f000 fc12 	bl	8001bbc <USART2_CheckDmaReception>
 8001398:	4802      	ldr	r0, [pc, #8]	; (80013a4 <USART2_IRQHandler+0x20>)
 800139a:	f7ff ff7d 	bl	8001298 <LL_USART_ClearFlag_IDLE>
 800139e:	bf00      	nop
 80013a0:	bd80      	pop	{r7, pc}
 80013a2:	bf00      	nop
 80013a4:	40004400 	.word	0x40004400

080013a8 <_sbrk>:
 80013a8:	b580      	push	{r7, lr}
 80013aa:	b084      	sub	sp, #16
 80013ac:	af00      	add	r7, sp, #0
 80013ae:	6078      	str	r0, [r7, #4]
 80013b0:	4b11      	ldr	r3, [pc, #68]	; (80013f8 <_sbrk+0x50>)
 80013b2:	681b      	ldr	r3, [r3, #0]
 80013b4:	2b00      	cmp	r3, #0
 80013b6:	d102      	bne.n	80013be <_sbrk+0x16>
 80013b8:	4b0f      	ldr	r3, [pc, #60]	; (80013f8 <_sbrk+0x50>)
 80013ba:	4a10      	ldr	r2, [pc, #64]	; (80013fc <_sbrk+0x54>)
 80013bc:	601a      	str	r2, [r3, #0]
 80013be:	4b0e      	ldr	r3, [pc, #56]	; (80013f8 <_sbrk+0x50>)
 80013c0:	681b      	ldr	r3, [r3, #0]
 80013c2:	60fb      	str	r3, [r7, #12]
 80013c4:	4b0c      	ldr	r3, [pc, #48]	; (80013f8 <_sbrk+0x50>)
 80013c6:	681a      	ldr	r2, [r3, #0]
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	4413      	add	r3, r2
 80013cc:	466a      	mov	r2, sp
 80013ce:	4293      	cmp	r3, r2
 80013d0:	d907      	bls.n	80013e2 <_sbrk+0x3a>
 80013d2:	f000 fc5b 	bl	8001c8c <__errno>
 80013d6:	4602      	mov	r2, r0
 80013d8:	230c      	movs	r3, #12
 80013da:	6013      	str	r3, [r2, #0]
 80013dc:	f04f 33ff 	mov.w	r3, #4294967295
 80013e0:	e006      	b.n	80013f0 <_sbrk+0x48>
 80013e2:	4b05      	ldr	r3, [pc, #20]	; (80013f8 <_sbrk+0x50>)
 80013e4:	681a      	ldr	r2, [r3, #0]
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	4413      	add	r3, r2
 80013ea:	4a03      	ldr	r2, [pc, #12]	; (80013f8 <_sbrk+0x50>)
 80013ec:	6013      	str	r3, [r2, #0]
 80013ee:	68fb      	ldr	r3, [r7, #12]
 80013f0:	4618      	mov	r0, r3
 80013f2:	3710      	adds	r7, #16
 80013f4:	46bd      	mov	sp, r7
 80013f6:	bd80      	pop	{r7, pc}
 80013f8:	20000190 	.word	0x20000190
 80013fc:	200002a8 	.word	0x200002a8

08001400 <SystemInit>:
 8001400:	b480      	push	{r7}
 8001402:	af00      	add	r7, sp, #0
 8001404:	4b1f      	ldr	r3, [pc, #124]	; (8001484 <SystemInit+0x84>)
 8001406:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800140a:	4a1e      	ldr	r2, [pc, #120]	; (8001484 <SystemInit+0x84>)
 800140c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001410:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
 8001414:	4b1c      	ldr	r3, [pc, #112]	; (8001488 <SystemInit+0x88>)
 8001416:	681b      	ldr	r3, [r3, #0]
 8001418:	4a1b      	ldr	r2, [pc, #108]	; (8001488 <SystemInit+0x88>)
 800141a:	f043 0301 	orr.w	r3, r3, #1
 800141e:	6013      	str	r3, [r2, #0]
 8001420:	4b19      	ldr	r3, [pc, #100]	; (8001488 <SystemInit+0x88>)
 8001422:	685a      	ldr	r2, [r3, #4]
 8001424:	4918      	ldr	r1, [pc, #96]	; (8001488 <SystemInit+0x88>)
 8001426:	4b19      	ldr	r3, [pc, #100]	; (800148c <SystemInit+0x8c>)
 8001428:	4013      	ands	r3, r2
 800142a:	604b      	str	r3, [r1, #4]
 800142c:	4b16      	ldr	r3, [pc, #88]	; (8001488 <SystemInit+0x88>)
 800142e:	681b      	ldr	r3, [r3, #0]
 8001430:	4a15      	ldr	r2, [pc, #84]	; (8001488 <SystemInit+0x88>)
 8001432:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8001436:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800143a:	6013      	str	r3, [r2, #0]
 800143c:	4b12      	ldr	r3, [pc, #72]	; (8001488 <SystemInit+0x88>)
 800143e:	681b      	ldr	r3, [r3, #0]
 8001440:	4a11      	ldr	r2, [pc, #68]	; (8001488 <SystemInit+0x88>)
 8001442:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001446:	6013      	str	r3, [r2, #0]
 8001448:	4b0f      	ldr	r3, [pc, #60]	; (8001488 <SystemInit+0x88>)
 800144a:	685b      	ldr	r3, [r3, #4]
 800144c:	4a0e      	ldr	r2, [pc, #56]	; (8001488 <SystemInit+0x88>)
 800144e:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 8001452:	6053      	str	r3, [r2, #4]
 8001454:	4b0c      	ldr	r3, [pc, #48]	; (8001488 <SystemInit+0x88>)
 8001456:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001458:	4a0b      	ldr	r2, [pc, #44]	; (8001488 <SystemInit+0x88>)
 800145a:	f023 030f 	bic.w	r3, r3, #15
 800145e:	62d3      	str	r3, [r2, #44]	; 0x2c
 8001460:	4b09      	ldr	r3, [pc, #36]	; (8001488 <SystemInit+0x88>)
 8001462:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001464:	4908      	ldr	r1, [pc, #32]	; (8001488 <SystemInit+0x88>)
 8001466:	4b0a      	ldr	r3, [pc, #40]	; (8001490 <SystemInit+0x90>)
 8001468:	4013      	ands	r3, r2
 800146a:	630b      	str	r3, [r1, #48]	; 0x30
 800146c:	4b06      	ldr	r3, [pc, #24]	; (8001488 <SystemInit+0x88>)
 800146e:	2200      	movs	r2, #0
 8001470:	609a      	str	r2, [r3, #8]
 8001472:	4b04      	ldr	r3, [pc, #16]	; (8001484 <SystemInit+0x84>)
 8001474:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001478:	609a      	str	r2, [r3, #8]
 800147a:	bf00      	nop
 800147c:	46bd      	mov	sp, r7
 800147e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001482:	4770      	bx	lr
 8001484:	e000ed00 	.word	0xe000ed00
 8001488:	40021000 	.word	0x40021000
 800148c:	f87fc00c 	.word	0xf87fc00c
 8001490:	ff00fccc 	.word	0xff00fccc

08001494 <NVIC_EnableIRQ>:
  \brief   Enable External Interrupt
  \details Enables a device-specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001494:	b480      	push	{r7}
 8001496:	b083      	sub	sp, #12
 8001498:	af00      	add	r7, sp, #0
 800149a:	4603      	mov	r3, r0
 800149c:	71fb      	strb	r3, [r7, #7]
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 800149e:	79fb      	ldrb	r3, [r7, #7]
 80014a0:	f003 021f 	and.w	r2, r3, #31
 80014a4:	4907      	ldr	r1, [pc, #28]	; (80014c4 <NVIC_EnableIRQ+0x30>)
 80014a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014aa:	095b      	lsrs	r3, r3, #5
 80014ac:	2001      	movs	r0, #1
 80014ae:	fa00 f202 	lsl.w	r2, r0, r2
 80014b2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80014b6:	bf00      	nop
 80014b8:	370c      	adds	r7, #12
 80014ba:	46bd      	mov	sp, r7
 80014bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014c0:	4770      	bx	lr
 80014c2:	bf00      	nop
 80014c4:	e000e100 	.word	0xe000e100

080014c8 <NVIC_SetPriority>:
  \note    The priority cannot be set for every core interrupt.
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80014c8:	b480      	push	{r7}
 80014ca:	b083      	sub	sp, #12
 80014cc:	af00      	add	r7, sp, #0
 80014ce:	4603      	mov	r3, r0
 80014d0:	6039      	str	r1, [r7, #0]
 80014d2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) < 0)
 80014d4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014d8:	2b00      	cmp	r3, #0
 80014da:	da0b      	bge.n	80014f4 <NVIC_SetPriority+0x2c>
  {
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80014dc:	683b      	ldr	r3, [r7, #0]
 80014de:	b2da      	uxtb	r2, r3
 80014e0:	490c      	ldr	r1, [pc, #48]	; (8001514 <NVIC_SetPriority+0x4c>)
 80014e2:	79fb      	ldrb	r3, [r7, #7]
 80014e4:	f003 030f 	and.w	r3, r3, #15
 80014e8:	3b04      	subs	r3, #4
 80014ea:	0112      	lsls	r2, r2, #4
 80014ec:	b2d2      	uxtb	r2, r2
 80014ee:	440b      	add	r3, r1
 80014f0:	761a      	strb	r2, [r3, #24]
  }
  else
  {
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80014f2:	e009      	b.n	8001508 <NVIC_SetPriority+0x40>
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80014f4:	683b      	ldr	r3, [r7, #0]
 80014f6:	b2da      	uxtb	r2, r3
 80014f8:	4907      	ldr	r1, [pc, #28]	; (8001518 <NVIC_SetPriority+0x50>)
 80014fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014fe:	0112      	lsls	r2, r2, #4
 8001500:	b2d2      	uxtb	r2, r2
 8001502:	440b      	add	r3, r1
 8001504:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8001508:	bf00      	nop
 800150a:	370c      	adds	r7, #12
 800150c:	46bd      	mov	sp, r7
 800150e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001512:	4770      	bx	lr
 8001514:	e000ed00 	.word	0xe000ed00
 8001518:	e000e100 	.word	0xe000e100

0800151c <LL_DMA_EnableChannel>:
  *         @arg @ref LL_DMA_CHANNEL_6
  *         @arg @ref LL_DMA_CHANNEL_7
  * @retval None
  */
__STATIC_INLINE void LL_DMA_EnableChannel(DMA_TypeDef *DMAx, uint32_t Channel)
{
 800151c:	b480      	push	{r7}
 800151e:	b083      	sub	sp, #12
 8001520:	af00      	add	r7, sp, #0
 8001522:	6078      	str	r0, [r7, #4]
 8001524:	6039      	str	r1, [r7, #0]
  SET_BIT(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_EN);
 8001526:	683b      	ldr	r3, [r7, #0]
 8001528:	3b01      	subs	r3, #1
 800152a:	4a0b      	ldr	r2, [pc, #44]	; (8001558 <LL_DMA_EnableChannel+0x3c>)
 800152c:	5cd3      	ldrb	r3, [r2, r3]
 800152e:	461a      	mov	r2, r3
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	4413      	add	r3, r2
 8001534:	681b      	ldr	r3, [r3, #0]
 8001536:	683a      	ldr	r2, [r7, #0]
 8001538:	3a01      	subs	r2, #1
 800153a:	4907      	ldr	r1, [pc, #28]	; (8001558 <LL_DMA_EnableChannel+0x3c>)
 800153c:	5c8a      	ldrb	r2, [r1, r2]
 800153e:	4611      	mov	r1, r2
 8001540:	687a      	ldr	r2, [r7, #4]
 8001542:	440a      	add	r2, r1
 8001544:	f043 0301 	orr.w	r3, r3, #1
 8001548:	6013      	str	r3, [r2, #0]
}
 800154a:	bf00      	nop
 800154c:	370c      	adds	r7, #12
 800154e:	46bd      	mov	sp, r7
 8001550:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001554:	4770      	bx	lr
 8001556:	bf00      	nop
 8001558:	080025f8 	.word	0x080025f8

0800155c <LL_DMA_SetDataTransferDirection>:
  *         @arg @ref LL_DMA_DIRECTION_MEMORY_TO_PERIPH
  *         @arg @ref LL_DMA_DIRECTION_MEMORY_TO_MEMORY
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetDataTransferDirection(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t Direction)
{
 800155c:	b480      	push	{r7}
 800155e:	b085      	sub	sp, #20
 8001560:	af00      	add	r7, sp, #0
 8001562:	60f8      	str	r0, [r7, #12]
 8001564:	60b9      	str	r1, [r7, #8]
 8001566:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR,
 8001568:	68bb      	ldr	r3, [r7, #8]
 800156a:	3b01      	subs	r3, #1
 800156c:	4a0d      	ldr	r2, [pc, #52]	; (80015a4 <LL_DMA_SetDataTransferDirection+0x48>)
 800156e:	5cd3      	ldrb	r3, [r2, r3]
 8001570:	461a      	mov	r2, r3
 8001572:	68fb      	ldr	r3, [r7, #12]
 8001574:	4413      	add	r3, r2
 8001576:	681b      	ldr	r3, [r3, #0]
 8001578:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800157c:	f023 0310 	bic.w	r3, r3, #16
 8001580:	68ba      	ldr	r2, [r7, #8]
 8001582:	3a01      	subs	r2, #1
 8001584:	4907      	ldr	r1, [pc, #28]	; (80015a4 <LL_DMA_SetDataTransferDirection+0x48>)
 8001586:	5c8a      	ldrb	r2, [r1, r2]
 8001588:	4611      	mov	r1, r2
 800158a:	68fa      	ldr	r2, [r7, #12]
 800158c:	440a      	add	r2, r1
 800158e:	4611      	mov	r1, r2
 8001590:	687a      	ldr	r2, [r7, #4]
 8001592:	4313      	orrs	r3, r2
 8001594:	600b      	str	r3, [r1, #0]
             DMA_CCR_DIR | DMA_CCR_MEM2MEM, Direction);
}
 8001596:	bf00      	nop
 8001598:	3714      	adds	r7, #20
 800159a:	46bd      	mov	sp, r7
 800159c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015a0:	4770      	bx	lr
 80015a2:	bf00      	nop
 80015a4:	080025f8 	.word	0x080025f8

080015a8 <LL_DMA_SetMode>:
  *         @arg @ref LL_DMA_MODE_NORMAL
  *         @arg @ref LL_DMA_MODE_CIRCULAR
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetMode(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t Mode)
{
 80015a8:	b480      	push	{r7}
 80015aa:	b085      	sub	sp, #20
 80015ac:	af00      	add	r7, sp, #0
 80015ae:	60f8      	str	r0, [r7, #12]
 80015b0:	60b9      	str	r1, [r7, #8]
 80015b2:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_CIRC,
 80015b4:	68bb      	ldr	r3, [r7, #8]
 80015b6:	3b01      	subs	r3, #1
 80015b8:	4a0c      	ldr	r2, [pc, #48]	; (80015ec <LL_DMA_SetMode+0x44>)
 80015ba:	5cd3      	ldrb	r3, [r2, r3]
 80015bc:	461a      	mov	r2, r3
 80015be:	68fb      	ldr	r3, [r7, #12]
 80015c0:	4413      	add	r3, r2
 80015c2:	681b      	ldr	r3, [r3, #0]
 80015c4:	f023 0220 	bic.w	r2, r3, #32
 80015c8:	68bb      	ldr	r3, [r7, #8]
 80015ca:	3b01      	subs	r3, #1
 80015cc:	4907      	ldr	r1, [pc, #28]	; (80015ec <LL_DMA_SetMode+0x44>)
 80015ce:	5ccb      	ldrb	r3, [r1, r3]
 80015d0:	4619      	mov	r1, r3
 80015d2:	68fb      	ldr	r3, [r7, #12]
 80015d4:	440b      	add	r3, r1
 80015d6:	4619      	mov	r1, r3
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	4313      	orrs	r3, r2
 80015dc:	600b      	str	r3, [r1, #0]
             Mode);
}
 80015de:	bf00      	nop
 80015e0:	3714      	adds	r7, #20
 80015e2:	46bd      	mov	sp, r7
 80015e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015e8:	4770      	bx	lr
 80015ea:	bf00      	nop
 80015ec:	080025f8 	.word	0x080025f8

080015f0 <LL_DMA_SetPeriphIncMode>:
  *         @arg @ref LL_DMA_PERIPH_INCREMENT
  *         @arg @ref LL_DMA_PERIPH_NOINCREMENT
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetPeriphIncMode(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t PeriphOrM2MSrcIncMode)
{
 80015f0:	b480      	push	{r7}
 80015f2:	b085      	sub	sp, #20
 80015f4:	af00      	add	r7, sp, #0
 80015f6:	60f8      	str	r0, [r7, #12]
 80015f8:	60b9      	str	r1, [r7, #8]
 80015fa:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_PINC,
 80015fc:	68bb      	ldr	r3, [r7, #8]
 80015fe:	3b01      	subs	r3, #1
 8001600:	4a0c      	ldr	r2, [pc, #48]	; (8001634 <LL_DMA_SetPeriphIncMode+0x44>)
 8001602:	5cd3      	ldrb	r3, [r2, r3]
 8001604:	461a      	mov	r2, r3
 8001606:	68fb      	ldr	r3, [r7, #12]
 8001608:	4413      	add	r3, r2
 800160a:	681b      	ldr	r3, [r3, #0]
 800160c:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8001610:	68bb      	ldr	r3, [r7, #8]
 8001612:	3b01      	subs	r3, #1
 8001614:	4907      	ldr	r1, [pc, #28]	; (8001634 <LL_DMA_SetPeriphIncMode+0x44>)
 8001616:	5ccb      	ldrb	r3, [r1, r3]
 8001618:	4619      	mov	r1, r3
 800161a:	68fb      	ldr	r3, [r7, #12]
 800161c:	440b      	add	r3, r1
 800161e:	4619      	mov	r1, r3
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	4313      	orrs	r3, r2
 8001624:	600b      	str	r3, [r1, #0]
             PeriphOrM2MSrcIncMode);
}
 8001626:	bf00      	nop
 8001628:	3714      	adds	r7, #20
 800162a:	46bd      	mov	sp, r7
 800162c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001630:	4770      	bx	lr
 8001632:	bf00      	nop
 8001634:	080025f8 	.word	0x080025f8

08001638 <LL_DMA_SetMemoryIncMode>:
  *         @arg @ref LL_DMA_MEMORY_INCREMENT
  *         @arg @ref LL_DMA_MEMORY_NOINCREMENT
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetMemoryIncMode(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t MemoryOrM2MDstIncMode)
{
 8001638:	b480      	push	{r7}
 800163a:	b085      	sub	sp, #20
 800163c:	af00      	add	r7, sp, #0
 800163e:	60f8      	str	r0, [r7, #12]
 8001640:	60b9      	str	r1, [r7, #8]
 8001642:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_MINC,
 8001644:	68bb      	ldr	r3, [r7, #8]
 8001646:	3b01      	subs	r3, #1
 8001648:	4a0c      	ldr	r2, [pc, #48]	; (800167c <LL_DMA_SetMemoryIncMode+0x44>)
 800164a:	5cd3      	ldrb	r3, [r2, r3]
 800164c:	461a      	mov	r2, r3
 800164e:	68fb      	ldr	r3, [r7, #12]
 8001650:	4413      	add	r3, r2
 8001652:	681b      	ldr	r3, [r3, #0]
 8001654:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8001658:	68bb      	ldr	r3, [r7, #8]
 800165a:	3b01      	subs	r3, #1
 800165c:	4907      	ldr	r1, [pc, #28]	; (800167c <LL_DMA_SetMemoryIncMode+0x44>)
 800165e:	5ccb      	ldrb	r3, [r1, r3]
 8001660:	4619      	mov	r1, r3
 8001662:	68fb      	ldr	r3, [r7, #12]
 8001664:	440b      	add	r3, r1
 8001666:	4619      	mov	r1, r3
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	4313      	orrs	r3, r2
 800166c:	600b      	str	r3, [r1, #0]
             MemoryOrM2MDstIncMode);
}
 800166e:	bf00      	nop
 8001670:	3714      	adds	r7, #20
 8001672:	46bd      	mov	sp, r7
 8001674:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001678:	4770      	bx	lr
 800167a:	bf00      	nop
 800167c:	080025f8 	.word	0x080025f8

08001680 <LL_DMA_SetPeriphSize>:
  *         @arg @ref LL_DMA_PDATAALIGN_HALFWORD
  *         @arg @ref LL_DMA_PDATAALIGN_WORD
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetPeriphSize(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t PeriphOrM2MSrcDataSize)
{
 8001680:	b480      	push	{r7}
 8001682:	b085      	sub	sp, #20
 8001684:	af00      	add	r7, sp, #0
 8001686:	60f8      	str	r0, [r7, #12]
 8001688:	60b9      	str	r1, [r7, #8]
 800168a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_PSIZE,
 800168c:	68bb      	ldr	r3, [r7, #8]
 800168e:	3b01      	subs	r3, #1
 8001690:	4a0c      	ldr	r2, [pc, #48]	; (80016c4 <LL_DMA_SetPeriphSize+0x44>)
 8001692:	5cd3      	ldrb	r3, [r2, r3]
 8001694:	461a      	mov	r2, r3
 8001696:	68fb      	ldr	r3, [r7, #12]
 8001698:	4413      	add	r3, r2
 800169a:	681b      	ldr	r3, [r3, #0]
 800169c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80016a0:	68bb      	ldr	r3, [r7, #8]
 80016a2:	3b01      	subs	r3, #1
 80016a4:	4907      	ldr	r1, [pc, #28]	; (80016c4 <LL_DMA_SetPeriphSize+0x44>)
 80016a6:	5ccb      	ldrb	r3, [r1, r3]
 80016a8:	4619      	mov	r1, r3
 80016aa:	68fb      	ldr	r3, [r7, #12]
 80016ac:	440b      	add	r3, r1
 80016ae:	4619      	mov	r1, r3
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	4313      	orrs	r3, r2
 80016b4:	600b      	str	r3, [r1, #0]
             PeriphOrM2MSrcDataSize);
}
 80016b6:	bf00      	nop
 80016b8:	3714      	adds	r7, #20
 80016ba:	46bd      	mov	sp, r7
 80016bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016c0:	4770      	bx	lr
 80016c2:	bf00      	nop
 80016c4:	080025f8 	.word	0x080025f8

080016c8 <LL_DMA_SetMemorySize>:
  *         @arg @ref LL_DMA_MDATAALIGN_HALFWORD
  *         @arg @ref LL_DMA_MDATAALIGN_WORD
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetMemorySize(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t MemoryOrM2MDstDataSize)
{
 80016c8:	b480      	push	{r7}
 80016ca:	b085      	sub	sp, #20
 80016cc:	af00      	add	r7, sp, #0
 80016ce:	60f8      	str	r0, [r7, #12]
 80016d0:	60b9      	str	r1, [r7, #8]
 80016d2:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_MSIZE,
 80016d4:	68bb      	ldr	r3, [r7, #8]
 80016d6:	3b01      	subs	r3, #1
 80016d8:	4a0c      	ldr	r2, [pc, #48]	; (800170c <LL_DMA_SetMemorySize+0x44>)
 80016da:	5cd3      	ldrb	r3, [r2, r3]
 80016dc:	461a      	mov	r2, r3
 80016de:	68fb      	ldr	r3, [r7, #12]
 80016e0:	4413      	add	r3, r2
 80016e2:	681b      	ldr	r3, [r3, #0]
 80016e4:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80016e8:	68bb      	ldr	r3, [r7, #8]
 80016ea:	3b01      	subs	r3, #1
 80016ec:	4907      	ldr	r1, [pc, #28]	; (800170c <LL_DMA_SetMemorySize+0x44>)
 80016ee:	5ccb      	ldrb	r3, [r1, r3]
 80016f0:	4619      	mov	r1, r3
 80016f2:	68fb      	ldr	r3, [r7, #12]
 80016f4:	440b      	add	r3, r1
 80016f6:	4619      	mov	r1, r3
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	4313      	orrs	r3, r2
 80016fc:	600b      	str	r3, [r1, #0]
             MemoryOrM2MDstDataSize);
}
 80016fe:	bf00      	nop
 8001700:	3714      	adds	r7, #20
 8001702:	46bd      	mov	sp, r7
 8001704:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001708:	4770      	bx	lr
 800170a:	bf00      	nop
 800170c:	080025f8 	.word	0x080025f8

08001710 <LL_DMA_SetChannelPriorityLevel>:
  *         @arg @ref LL_DMA_PRIORITY_HIGH
  *         @arg @ref LL_DMA_PRIORITY_VERYHIGH
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetChannelPriorityLevel(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t Priority)
{
 8001710:	b480      	push	{r7}
 8001712:	b085      	sub	sp, #20
 8001714:	af00      	add	r7, sp, #0
 8001716:	60f8      	str	r0, [r7, #12]
 8001718:	60b9      	str	r1, [r7, #8]
 800171a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_PL,
 800171c:	68bb      	ldr	r3, [r7, #8]
 800171e:	3b01      	subs	r3, #1
 8001720:	4a0c      	ldr	r2, [pc, #48]	; (8001754 <LL_DMA_SetChannelPriorityLevel+0x44>)
 8001722:	5cd3      	ldrb	r3, [r2, r3]
 8001724:	461a      	mov	r2, r3
 8001726:	68fb      	ldr	r3, [r7, #12]
 8001728:	4413      	add	r3, r2
 800172a:	681b      	ldr	r3, [r3, #0]
 800172c:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8001730:	68bb      	ldr	r3, [r7, #8]
 8001732:	3b01      	subs	r3, #1
 8001734:	4907      	ldr	r1, [pc, #28]	; (8001754 <LL_DMA_SetChannelPriorityLevel+0x44>)
 8001736:	5ccb      	ldrb	r3, [r1, r3]
 8001738:	4619      	mov	r1, r3
 800173a:	68fb      	ldr	r3, [r7, #12]
 800173c:	440b      	add	r3, r1
 800173e:	4619      	mov	r1, r3
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	4313      	orrs	r3, r2
 8001744:	600b      	str	r3, [r1, #0]
             Priority);
}
 8001746:	bf00      	nop
 8001748:	3714      	adds	r7, #20
 800174a:	46bd      	mov	sp, r7
 800174c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001750:	4770      	bx	lr
 8001752:	bf00      	nop
 8001754:	080025f8 	.word	0x080025f8

08001758 <LL_DMA_SetDataLength>:
  *         @arg @ref LL_DMA_CHANNEL_7
  * @param  NbData Between Min_Data = 0 and Max_Data = 0x0000FFFF
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetDataLength(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t NbData)
{
 8001758:	b480      	push	{r7}
 800175a:	b085      	sub	sp, #20
 800175c:	af00      	add	r7, sp, #0
 800175e:	60f8      	str	r0, [r7, #12]
 8001760:	60b9      	str	r1, [r7, #8]
 8001762:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CNDTR,
 8001764:	68bb      	ldr	r3, [r7, #8]
 8001766:	3b01      	subs	r3, #1
 8001768:	4a0c      	ldr	r2, [pc, #48]	; (800179c <LL_DMA_SetDataLength+0x44>)
 800176a:	5cd3      	ldrb	r3, [r2, r3]
 800176c:	461a      	mov	r2, r3
 800176e:	68fb      	ldr	r3, [r7, #12]
 8001770:	4413      	add	r3, r2
 8001772:	685b      	ldr	r3, [r3, #4]
 8001774:	0c1b      	lsrs	r3, r3, #16
 8001776:	041b      	lsls	r3, r3, #16
 8001778:	68ba      	ldr	r2, [r7, #8]
 800177a:	3a01      	subs	r2, #1
 800177c:	4907      	ldr	r1, [pc, #28]	; (800179c <LL_DMA_SetDataLength+0x44>)
 800177e:	5c8a      	ldrb	r2, [r1, r2]
 8001780:	4611      	mov	r1, r2
 8001782:	68fa      	ldr	r2, [r7, #12]
 8001784:	440a      	add	r2, r1
 8001786:	4611      	mov	r1, r2
 8001788:	687a      	ldr	r2, [r7, #4]
 800178a:	4313      	orrs	r3, r2
 800178c:	604b      	str	r3, [r1, #4]
             DMA_CNDTR_NDT, NbData);
}
 800178e:	bf00      	nop
 8001790:	3714      	adds	r7, #20
 8001792:	46bd      	mov	sp, r7
 8001794:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001798:	4770      	bx	lr
 800179a:	bf00      	nop
 800179c:	080025f8 	.word	0x080025f8

080017a0 <LL_DMA_GetDataLength>:
  *         @arg @ref LL_DMA_CHANNEL_6
  *         @arg @ref LL_DMA_CHANNEL_7
  * @retval Between Min_Data = 0 and Max_Data = 0xFFFFFFFF
  */
__STATIC_INLINE uint32_t LL_DMA_GetDataLength(DMA_TypeDef *DMAx, uint32_t Channel)
{
 80017a0:	b480      	push	{r7}
 80017a2:	b083      	sub	sp, #12
 80017a4:	af00      	add	r7, sp, #0
 80017a6:	6078      	str	r0, [r7, #4]
 80017a8:	6039      	str	r1, [r7, #0]
  return (READ_BIT(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CNDTR,
 80017aa:	683b      	ldr	r3, [r7, #0]
 80017ac:	3b01      	subs	r3, #1
 80017ae:	4a06      	ldr	r2, [pc, #24]	; (80017c8 <LL_DMA_GetDataLength+0x28>)
 80017b0:	5cd3      	ldrb	r3, [r2, r3]
 80017b2:	461a      	mov	r2, r3
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	4413      	add	r3, r2
 80017b8:	685b      	ldr	r3, [r3, #4]
 80017ba:	b29b      	uxth	r3, r3
                   DMA_CNDTR_NDT));
}
 80017bc:	4618      	mov	r0, r3
 80017be:	370c      	adds	r7, #12
 80017c0:	46bd      	mov	sp, r7
 80017c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017c6:	4770      	bx	lr
 80017c8:	080025f8 	.word	0x080025f8

080017cc <LL_DMA_SetMemoryAddress>:
  *         @arg @ref LL_DMA_CHANNEL_7
  * @param  MemoryAddress Between Min_Data = 0 and Max_Data = 0xFFFFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetMemoryAddress(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t MemoryAddress)
{
 80017cc:	b480      	push	{r7}
 80017ce:	b085      	sub	sp, #20
 80017d0:	af00      	add	r7, sp, #0
 80017d2:	60f8      	str	r0, [r7, #12]
 80017d4:	60b9      	str	r1, [r7, #8]
 80017d6:	607a      	str	r2, [r7, #4]
  WRITE_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CMAR, MemoryAddress);
 80017d8:	68bb      	ldr	r3, [r7, #8]
 80017da:	3b01      	subs	r3, #1
 80017dc:	4a06      	ldr	r2, [pc, #24]	; (80017f8 <LL_DMA_SetMemoryAddress+0x2c>)
 80017de:	5cd3      	ldrb	r3, [r2, r3]
 80017e0:	461a      	mov	r2, r3
 80017e2:	68fb      	ldr	r3, [r7, #12]
 80017e4:	4413      	add	r3, r2
 80017e6:	461a      	mov	r2, r3
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	60d3      	str	r3, [r2, #12]
}
 80017ec:	bf00      	nop
 80017ee:	3714      	adds	r7, #20
 80017f0:	46bd      	mov	sp, r7
 80017f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017f6:	4770      	bx	lr
 80017f8:	080025f8 	.word	0x080025f8

080017fc <LL_DMA_SetPeriphAddress>:
  *         @arg @ref LL_DMA_CHANNEL_7
  * @param  PeriphAddress Between Min_Data = 0 and Max_Data = 0xFFFFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetPeriphAddress(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t PeriphAddress)
{
 80017fc:	b480      	push	{r7}
 80017fe:	b085      	sub	sp, #20
 8001800:	af00      	add	r7, sp, #0
 8001802:	60f8      	str	r0, [r7, #12]
 8001804:	60b9      	str	r1, [r7, #8]
 8001806:	607a      	str	r2, [r7, #4]
  WRITE_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CPAR, PeriphAddress);
 8001808:	68bb      	ldr	r3, [r7, #8]
 800180a:	3b01      	subs	r3, #1
 800180c:	4a06      	ldr	r2, [pc, #24]	; (8001828 <LL_DMA_SetPeriphAddress+0x2c>)
 800180e:	5cd3      	ldrb	r3, [r2, r3]
 8001810:	461a      	mov	r2, r3
 8001812:	68fb      	ldr	r3, [r7, #12]
 8001814:	4413      	add	r3, r2
 8001816:	461a      	mov	r2, r3
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	6093      	str	r3, [r2, #8]
}
 800181c:	bf00      	nop
 800181e:	3714      	adds	r7, #20
 8001820:	46bd      	mov	sp, r7
 8001822:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001826:	4770      	bx	lr
 8001828:	080025f8 	.word	0x080025f8

0800182c <LL_DMA_EnableIT_TC>:
  *         @arg @ref LL_DMA_CHANNEL_6
  *         @arg @ref LL_DMA_CHANNEL_7
  * @retval None
  */
__STATIC_INLINE void LL_DMA_EnableIT_TC(DMA_TypeDef *DMAx, uint32_t Channel)
{
 800182c:	b480      	push	{r7}
 800182e:	b083      	sub	sp, #12
 8001830:	af00      	add	r7, sp, #0
 8001832:	6078      	str	r0, [r7, #4]
 8001834:	6039      	str	r1, [r7, #0]
  SET_BIT(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_TCIE);
 8001836:	683b      	ldr	r3, [r7, #0]
 8001838:	3b01      	subs	r3, #1
 800183a:	4a0b      	ldr	r2, [pc, #44]	; (8001868 <LL_DMA_EnableIT_TC+0x3c>)
 800183c:	5cd3      	ldrb	r3, [r2, r3]
 800183e:	461a      	mov	r2, r3
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	4413      	add	r3, r2
 8001844:	681b      	ldr	r3, [r3, #0]
 8001846:	683a      	ldr	r2, [r7, #0]
 8001848:	3a01      	subs	r2, #1
 800184a:	4907      	ldr	r1, [pc, #28]	; (8001868 <LL_DMA_EnableIT_TC+0x3c>)
 800184c:	5c8a      	ldrb	r2, [r1, r2]
 800184e:	4611      	mov	r1, r2
 8001850:	687a      	ldr	r2, [r7, #4]
 8001852:	440a      	add	r2, r1
 8001854:	f043 0302 	orr.w	r3, r3, #2
 8001858:	6013      	str	r3, [r2, #0]
}
 800185a:	bf00      	nop
 800185c:	370c      	adds	r7, #12
 800185e:	46bd      	mov	sp, r7
 8001860:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001864:	4770      	bx	lr
 8001866:	bf00      	nop
 8001868:	080025f8 	.word	0x080025f8

0800186c <LL_DMA_EnableIT_TE>:
  *         @arg @ref LL_DMA_CHANNEL_6
  *         @arg @ref LL_DMA_CHANNEL_7
  * @retval None
  */
__STATIC_INLINE void LL_DMA_EnableIT_TE(DMA_TypeDef *DMAx, uint32_t Channel)
{
 800186c:	b480      	push	{r7}
 800186e:	b083      	sub	sp, #12
 8001870:	af00      	add	r7, sp, #0
 8001872:	6078      	str	r0, [r7, #4]
 8001874:	6039      	str	r1, [r7, #0]
  SET_BIT(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_TEIE);
 8001876:	683b      	ldr	r3, [r7, #0]
 8001878:	3b01      	subs	r3, #1
 800187a:	4a0b      	ldr	r2, [pc, #44]	; (80018a8 <LL_DMA_EnableIT_TE+0x3c>)
 800187c:	5cd3      	ldrb	r3, [r2, r3]
 800187e:	461a      	mov	r2, r3
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	4413      	add	r3, r2
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	683a      	ldr	r2, [r7, #0]
 8001888:	3a01      	subs	r2, #1
 800188a:	4907      	ldr	r1, [pc, #28]	; (80018a8 <LL_DMA_EnableIT_TE+0x3c>)
 800188c:	5c8a      	ldrb	r2, [r1, r2]
 800188e:	4611      	mov	r1, r2
 8001890:	687a      	ldr	r2, [r7, #4]
 8001892:	440a      	add	r2, r1
 8001894:	f043 0308 	orr.w	r3, r3, #8
 8001898:	6013      	str	r3, [r2, #0]
}
 800189a:	bf00      	nop
 800189c:	370c      	adds	r7, #12
 800189e:	46bd      	mov	sp, r7
 80018a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018a4:	4770      	bx	lr
 80018a6:	bf00      	nop
 80018a8:	080025f8 	.word	0x080025f8

080018ac <LL_AHB1_GRP1_EnableClock>:
{
 80018ac:	b480      	push	{r7}
 80018ae:	b085      	sub	sp, #20
 80018b0:	af00      	add	r7, sp, #0
 80018b2:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHBENR, Periphs);
 80018b4:	4b08      	ldr	r3, [pc, #32]	; (80018d8 <LL_AHB1_GRP1_EnableClock+0x2c>)
 80018b6:	695a      	ldr	r2, [r3, #20]
 80018b8:	4907      	ldr	r1, [pc, #28]	; (80018d8 <LL_AHB1_GRP1_EnableClock+0x2c>)
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	4313      	orrs	r3, r2
 80018be:	614b      	str	r3, [r1, #20]
  tmpreg = READ_BIT(RCC->AHBENR, Periphs);
 80018c0:	4b05      	ldr	r3, [pc, #20]	; (80018d8 <LL_AHB1_GRP1_EnableClock+0x2c>)
 80018c2:	695a      	ldr	r2, [r3, #20]
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	4013      	ands	r3, r2
 80018c8:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80018ca:	68fb      	ldr	r3, [r7, #12]
}
 80018cc:	bf00      	nop
 80018ce:	3714      	adds	r7, #20
 80018d0:	46bd      	mov	sp, r7
 80018d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018d6:	4770      	bx	lr
 80018d8:	40021000 	.word	0x40021000

080018dc <LL_APB1_GRP1_EnableClock>:
{
 80018dc:	b480      	push	{r7}
 80018de:	b085      	sub	sp, #20
 80018e0:	af00      	add	r7, sp, #0
 80018e2:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR, Periphs);
 80018e4:	4b08      	ldr	r3, [pc, #32]	; (8001908 <LL_APB1_GRP1_EnableClock+0x2c>)
 80018e6:	69da      	ldr	r2, [r3, #28]
 80018e8:	4907      	ldr	r1, [pc, #28]	; (8001908 <LL_APB1_GRP1_EnableClock+0x2c>)
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	4313      	orrs	r3, r2
 80018ee:	61cb      	str	r3, [r1, #28]
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 80018f0:	4b05      	ldr	r3, [pc, #20]	; (8001908 <LL_APB1_GRP1_EnableClock+0x2c>)
 80018f2:	69da      	ldr	r2, [r3, #28]
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	4013      	ands	r3, r2
 80018f8:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80018fa:	68fb      	ldr	r3, [r7, #12]
}
 80018fc:	bf00      	nop
 80018fe:	3714      	adds	r7, #20
 8001900:	46bd      	mov	sp, r7
 8001902:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001906:	4770      	bx	lr
 8001908:	40021000 	.word	0x40021000

0800190c <LL_USART_Enable>:
{
 800190c:	b480      	push	{r7}
 800190e:	b083      	sub	sp, #12
 8001910:	af00      	add	r7, sp, #0
 8001912:	6078      	str	r0, [r7, #4]
  SET_BIT(USARTx->CR1, USART_CR1_UE);
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	f043 0201 	orr.w	r2, r3, #1
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	601a      	str	r2, [r3, #0]
}
 8001920:	bf00      	nop
 8001922:	370c      	adds	r7, #12
 8001924:	46bd      	mov	sp, r7
 8001926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800192a:	4770      	bx	lr

0800192c <LL_USART_ConfigAsyncMode>:
  *         CR3          HDSEL         LL_USART_ConfigAsyncMode
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_ConfigAsyncMode(USART_TypeDef *USARTx)
{
 800192c:	b480      	push	{r7}
 800192e:	b083      	sub	sp, #12
 8001930:	af00      	add	r7, sp, #0
 8001932:	6078      	str	r0, [r7, #4]
  /* In Asynchronous mode, the following bits must be kept cleared:
  - LINEN, CLKEN bits in the USART_CR2 register,
  - SCEN, IREN and HDSEL bits in the USART_CR3 register.*/
  CLEAR_BIT(USARTx->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	685b      	ldr	r3, [r3, #4]
 8001938:	f423 4290 	bic.w	r2, r3, #18432	; 0x4800
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(USARTx->CR3, (USART_CR3_SCEN | USART_CR3_IREN | USART_CR3_HDSEL));
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	689b      	ldr	r3, [r3, #8]
 8001944:	f023 022a 	bic.w	r2, r3, #42	; 0x2a
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	609a      	str	r2, [r3, #8]
}
 800194c:	bf00      	nop
 800194e:	370c      	adds	r7, #12
 8001950:	46bd      	mov	sp, r7
 8001952:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001956:	4770      	bx	lr

08001958 <LL_USART_EnableIT_IDLE>:
  * @rmtoll CR1          IDLEIE        LL_USART_EnableIT_IDLE
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_EnableIT_IDLE(USART_TypeDef *USARTx)
{
 8001958:	b480      	push	{r7}
 800195a:	b083      	sub	sp, #12
 800195c:	af00      	add	r7, sp, #0
 800195e:	6078      	str	r0, [r7, #4]
  SET_BIT(USARTx->CR1, USART_CR1_IDLEIE);
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	f043 0210 	orr.w	r2, r3, #16
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	601a      	str	r2, [r3, #0]
}
 800196c:	bf00      	nop
 800196e:	370c      	adds	r7, #12
 8001970:	46bd      	mov	sp, r7
 8001972:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001976:	4770      	bx	lr

08001978 <LL_USART_DisableIT_CTS>:
  * @rmtoll CR3          CTSIE         LL_USART_DisableIT_CTS
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_DisableIT_CTS(USART_TypeDef *USARTx)
{
 8001978:	b480      	push	{r7}
 800197a:	b083      	sub	sp, #12
 800197c:	af00      	add	r7, sp, #0
 800197e:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(USARTx->CR3, USART_CR3_CTSIE);
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	689b      	ldr	r3, [r3, #8]
 8001984:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	609a      	str	r2, [r3, #8]
}
 800198c:	bf00      	nop
 800198e:	370c      	adds	r7, #12
 8001990:	46bd      	mov	sp, r7
 8001992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001996:	4770      	bx	lr

08001998 <LL_USART_EnableDMAReq_TX>:
  * @rmtoll CR3          DMAT          LL_USART_EnableDMAReq_TX
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_EnableDMAReq_TX(USART_TypeDef *USARTx)
{
 8001998:	b480      	push	{r7}
 800199a:	b083      	sub	sp, #12
 800199c:	af00      	add	r7, sp, #0
 800199e:	6078      	str	r0, [r7, #4]
  SET_BIT(USARTx->CR3, USART_CR3_DMAT);
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	689b      	ldr	r3, [r3, #8]
 80019a4:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	609a      	str	r2, [r3, #8]
}
 80019ac:	bf00      	nop
 80019ae:	370c      	adds	r7, #12
 80019b0:	46bd      	mov	sp, r7
 80019b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019b6:	4770      	bx	lr

080019b8 <LL_USART_DMA_GetRegAddr>:
  *         @arg @ref LL_USART_DMA_REG_DATA_TRANSMIT
  *         @arg @ref LL_USART_DMA_REG_DATA_RECEIVE
  * @retval Address of data register
  */
__STATIC_INLINE uint32_t LL_USART_DMA_GetRegAddr(USART_TypeDef *USARTx, uint32_t Direction)
{
 80019b8:	b490      	push	{r4, r7}
 80019ba:	b082      	sub	sp, #8
 80019bc:	af00      	add	r7, sp, #0
 80019be:	6078      	str	r0, [r7, #4]
 80019c0:	6039      	str	r1, [r7, #0]
  register uint32_t data_reg_addr = 0U;
 80019c2:	2400      	movs	r4, #0

  if (Direction == LL_USART_DMA_REG_DATA_TRANSMIT)
 80019c4:	683b      	ldr	r3, [r7, #0]
 80019c6:	2b00      	cmp	r3, #0
 80019c8:	d103      	bne.n	80019d2 <LL_USART_DMA_GetRegAddr+0x1a>
  {
    /* return address of TDR register */
    data_reg_addr = (uint32_t) &(USARTx->TDR);
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	3328      	adds	r3, #40	; 0x28
 80019ce:	461c      	mov	r4, r3
 80019d0:	e002      	b.n	80019d8 <LL_USART_DMA_GetRegAddr+0x20>
  }
  else
  {
    /* return address of RDR register */
    data_reg_addr = (uint32_t) &(USARTx->RDR);
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	3324      	adds	r3, #36	; 0x24
 80019d6:	461c      	mov	r4, r3
  }

  return data_reg_addr;
 80019d8:	4623      	mov	r3, r4
}
 80019da:	4618      	mov	r0, r3
 80019dc:	3708      	adds	r7, #8
 80019de:	46bd      	mov	sp, r7
 80019e0:	bc90      	pop	{r4, r7}
 80019e2:	4770      	bx	lr

080019e4 <USART2_RegisterCallback>:
/* Declaration and initialization of callback function */
static void (* USART2_ProcessData)(uint8_t data) = 0;

/* Register callback */
void USART2_RegisterCallback(void *callback)
{
 80019e4:	b480      	push	{r7}
 80019e6:	b083      	sub	sp, #12
 80019e8:	af00      	add	r7, sp, #0
 80019ea:	6078      	str	r0, [r7, #4]
	if(callback != 0)
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	2b00      	cmp	r3, #0
 80019f0:	d002      	beq.n	80019f8 <USART2_RegisterCallback+0x14>
	{
		USART2_ProcessData = callback;
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	4a03      	ldr	r2, [pc, #12]	; (8001a04 <USART2_RegisterCallback+0x20>)
 80019f6:	6013      	str	r3, [r2, #0]
	}
}
 80019f8:	bf00      	nop
 80019fa:	370c      	adds	r7, #12
 80019fc:	46bd      	mov	sp, r7
 80019fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a02:	4770      	bx	lr
 8001a04:	20000194 	.word	0x20000194

08001a08 <MX_USART2_UART_Init>:
	// type global variables here


/* USART2 init function */
void MX_USART2_UART_Init(void)
{
 8001a08:	b580      	push	{r7, lr}
 8001a0a:	b08e      	sub	sp, #56	; 0x38
 8001a0c:	af00      	add	r7, sp, #0
  LL_USART_InitTypeDef USART_InitStruct = {0};
 8001a0e:	f107 031c 	add.w	r3, r7, #28
 8001a12:	2200      	movs	r2, #0
 8001a14:	601a      	str	r2, [r3, #0]
 8001a16:	605a      	str	r2, [r3, #4]
 8001a18:	609a      	str	r2, [r3, #8]
 8001a1a:	60da      	str	r2, [r3, #12]
 8001a1c:	611a      	str	r2, [r3, #16]
 8001a1e:	615a      	str	r2, [r3, #20]
 8001a20:	619a      	str	r2, [r3, #24]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a22:	1d3b      	adds	r3, r7, #4
 8001a24:	2200      	movs	r2, #0
 8001a26:	601a      	str	r2, [r3, #0]
 8001a28:	605a      	str	r2, [r3, #4]
 8001a2a:	609a      	str	r2, [r3, #8]
 8001a2c:	60da      	str	r2, [r3, #12]
 8001a2e:	611a      	str	r2, [r3, #16]
 8001a30:	615a      	str	r2, [r3, #20]
  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_USART2);
 8001a32:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 8001a36:	f7ff ff51 	bl	80018dc <LL_APB1_GRP1_EnableClock>
  
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 8001a3a:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 8001a3e:	f7ff ff35 	bl	80018ac <LL_AHB1_GRP1_EnableClock>
  /**USART2 GPIO Configuration  
  PA2   ------> USART2_TX
  PA15   ------> USART2_RX 
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_2|LL_GPIO_PIN_15;
 8001a42:	f248 0304 	movw	r3, #32772	; 0x8004
 8001a46:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8001a48:	2302      	movs	r3, #2
 8001a4a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_HIGH;
 8001a4c:	2303      	movs	r3, #3
 8001a4e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8001a50:	2300      	movs	r3, #0
 8001a52:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001a54:	2300      	movs	r3, #0
 8001a56:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_7;
 8001a58:	2307      	movs	r3, #7
 8001a5a:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a5c:	1d3b      	adds	r3, r7, #4
 8001a5e:	4619      	mov	r1, r3
 8001a60:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001a64:	f7fe fcff 	bl	8000466 <LL_GPIO_Init>
  
  /* USART2_RX Init */

  	  // type DMA USART Rx configuration here
	  
  LL_DMA_SetDataTransferDirection(DMA1, LL_DMA_CHANNEL_6, LL_DMA_DIRECTION_PERIPH_TO_MEMORY);
 8001a68:	2200      	movs	r2, #0
 8001a6a:	2106      	movs	r1, #6
 8001a6c:	4841      	ldr	r0, [pc, #260]	; (8001b74 <MX_USART2_UART_Init+0x16c>)
 8001a6e:	f7ff fd75 	bl	800155c <LL_DMA_SetDataTransferDirection>
  LL_DMA_SetChannelPriorityLevel(DMA1, LL_DMA_CHANNEL_6, LL_DMA_PRIORITY_MEDIUM);
 8001a72:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001a76:	2106      	movs	r1, #6
 8001a78:	483e      	ldr	r0, [pc, #248]	; (8001b74 <MX_USART2_UART_Init+0x16c>)
 8001a7a:	f7ff fe49 	bl	8001710 <LL_DMA_SetChannelPriorityLevel>
  LL_DMA_SetMode(DMA1, LL_DMA_CHANNEL_6, LL_DMA_MODE_NORMAL);
 8001a7e:	2200      	movs	r2, #0
 8001a80:	2106      	movs	r1, #6
 8001a82:	483c      	ldr	r0, [pc, #240]	; (8001b74 <MX_USART2_UART_Init+0x16c>)
 8001a84:	f7ff fd90 	bl	80015a8 <LL_DMA_SetMode>
  LL_DMA_SetPeriphIncMode(DMA1, LL_DMA_CHANNEL_6, LL_DMA_PERIPH_NOINCREMENT);
 8001a88:	2200      	movs	r2, #0
 8001a8a:	2106      	movs	r1, #6
 8001a8c:	4839      	ldr	r0, [pc, #228]	; (8001b74 <MX_USART2_UART_Init+0x16c>)
 8001a8e:	f7ff fdaf 	bl	80015f0 <LL_DMA_SetPeriphIncMode>
  LL_DMA_SetMemoryIncMode(DMA1, LL_DMA_CHANNEL_6, LL_DMA_MEMORY_INCREMENT);
 8001a92:	2280      	movs	r2, #128	; 0x80
 8001a94:	2106      	movs	r1, #6
 8001a96:	4837      	ldr	r0, [pc, #220]	; (8001b74 <MX_USART2_UART_Init+0x16c>)
 8001a98:	f7ff fdce 	bl	8001638 <LL_DMA_SetMemoryIncMode>
  LL_DMA_SetPeriphSize(DMA1, LL_DMA_CHANNEL_6, LL_DMA_PDATAALIGN_BYTE);
 8001a9c:	2200      	movs	r2, #0
 8001a9e:	2106      	movs	r1, #6
 8001aa0:	4834      	ldr	r0, [pc, #208]	; (8001b74 <MX_USART2_UART_Init+0x16c>)
 8001aa2:	f7ff fded 	bl	8001680 <LL_DMA_SetPeriphSize>
  LL_DMA_SetMemorySize(DMA1, LL_DMA_CHANNEL_6, LL_DMA_MDATAALIGN_BYTE);
 8001aa6:	2200      	movs	r2, #0
 8001aa8:	2106      	movs	r1, #6
 8001aaa:	4832      	ldr	r0, [pc, #200]	; (8001b74 <MX_USART2_UART_Init+0x16c>)
 8001aac:	f7ff fe0c 	bl	80016c8 <LL_DMA_SetMemorySize>

  /* USART2_TX Init */

	  // type DMA USART Tx configuration here
	  
	    LL_DMA_SetDataTransferDirection(DMA1, LL_DMA_CHANNEL_7, LL_DMA_DIRECTION_MEMORY_TO_PERIPH);
 8001ab0:	2210      	movs	r2, #16
 8001ab2:	2107      	movs	r1, #7
 8001ab4:	482f      	ldr	r0, [pc, #188]	; (8001b74 <MX_USART2_UART_Init+0x16c>)
 8001ab6:	f7ff fd51 	bl	800155c <LL_DMA_SetDataTransferDirection>
  LL_DMA_SetChannelPriorityLevel(DMA1, LL_DMA_CHANNEL_7, LL_DMA_PRIORITY_MEDIUM);
 8001aba:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001abe:	2107      	movs	r1, #7
 8001ac0:	482c      	ldr	r0, [pc, #176]	; (8001b74 <MX_USART2_UART_Init+0x16c>)
 8001ac2:	f7ff fe25 	bl	8001710 <LL_DMA_SetChannelPriorityLevel>
  LL_DMA_SetMode(DMA1, LL_DMA_CHANNEL_7, LL_DMA_MODE_NORMAL);
 8001ac6:	2200      	movs	r2, #0
 8001ac8:	2107      	movs	r1, #7
 8001aca:	482a      	ldr	r0, [pc, #168]	; (8001b74 <MX_USART2_UART_Init+0x16c>)
 8001acc:	f7ff fd6c 	bl	80015a8 <LL_DMA_SetMode>
  LL_DMA_SetPeriphIncMode(DMA1, LL_DMA_CHANNEL_7, LL_DMA_PERIPH_NOINCREMENT);
 8001ad0:	2200      	movs	r2, #0
 8001ad2:	2107      	movs	r1, #7
 8001ad4:	4827      	ldr	r0, [pc, #156]	; (8001b74 <MX_USART2_UART_Init+0x16c>)
 8001ad6:	f7ff fd8b 	bl	80015f0 <LL_DMA_SetPeriphIncMode>
  LL_DMA_SetMemoryIncMode(DMA1, LL_DMA_CHANNEL_7, LL_DMA_MEMORY_INCREMENT);
 8001ada:	2280      	movs	r2, #128	; 0x80
 8001adc:	2107      	movs	r1, #7
 8001ade:	4825      	ldr	r0, [pc, #148]	; (8001b74 <MX_USART2_UART_Init+0x16c>)
 8001ae0:	f7ff fdaa 	bl	8001638 <LL_DMA_SetMemoryIncMode>
  LL_DMA_SetPeriphSize(DMA1, LL_DMA_CHANNEL_7, LL_DMA_PDATAALIGN_BYTE);
 8001ae4:	2200      	movs	r2, #0
 8001ae6:	2107      	movs	r1, #7
 8001ae8:	4822      	ldr	r0, [pc, #136]	; (8001b74 <MX_USART2_UART_Init+0x16c>)
 8001aea:	f7ff fdc9 	bl	8001680 <LL_DMA_SetPeriphSize>
  LL_DMA_SetMemorySize(DMA1, LL_DMA_CHANNEL_7, LL_DMA_MDATAALIGN_BYTE);
 8001aee:	2200      	movs	r2, #0
 8001af0:	2107      	movs	r1, #7
 8001af2:	4820      	ldr	r0, [pc, #128]	; (8001b74 <MX_USART2_UART_Init+0x16c>)
 8001af4:	f7ff fde8 	bl	80016c8 <LL_DMA_SetMemorySize>

  LL_DMA_SetPeriphAddress(DMA1, LL_DMA_CHANNEL_7, LL_USART_DMA_GetRegAddr(USART2, LL_USART_DMA_REG_DATA_TRANSMIT));
 8001af8:	2100      	movs	r1, #0
 8001afa:	481f      	ldr	r0, [pc, #124]	; (8001b78 <MX_USART2_UART_Init+0x170>)
 8001afc:	f7ff ff5c 	bl	80019b8 <LL_USART_DMA_GetRegAddr>
 8001b00:	4603      	mov	r3, r0
 8001b02:	461a      	mov	r2, r3
 8001b04:	2107      	movs	r1, #7
 8001b06:	481b      	ldr	r0, [pc, #108]	; (8001b74 <MX_USART2_UART_Init+0x16c>)
 8001b08:	f7ff fe78 	bl	80017fc <LL_DMA_SetPeriphAddress>
  LL_USART_EnableDMAReq_TX(USART2);
 8001b0c:	481a      	ldr	r0, [pc, #104]	; (8001b78 <MX_USART2_UART_Init+0x170>)
 8001b0e:	f7ff ff43 	bl	8001998 <LL_USART_EnableDMAReq_TX>

  LL_DMA_EnableIT_TE(DMA1, LL_DMA_CHANNEL_7);
 8001b12:	2107      	movs	r1, #7
 8001b14:	4817      	ldr	r0, [pc, #92]	; (8001b74 <MX_USART2_UART_Init+0x16c>)
 8001b16:	f7ff fea9 	bl	800186c <LL_DMA_EnableIT_TE>


  /* USART2 interrupt Init */
  NVIC_SetPriority(USART2_IRQn, 0);
 8001b1a:	2100      	movs	r1, #0
 8001b1c:	2026      	movs	r0, #38	; 0x26
 8001b1e:	f7ff fcd3 	bl	80014c8 <NVIC_SetPriority>
  NVIC_EnableIRQ(USART2_IRQn);
 8001b22:	2026      	movs	r0, #38	; 0x26
 8001b24:	f7ff fcb6 	bl	8001494 <NVIC_EnableIRQ>

  USART_InitStruct.BaudRate = 115200;
 8001b28:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 8001b2c:	61fb      	str	r3, [r7, #28]
  USART_InitStruct.DataWidth = LL_USART_DATAWIDTH_8B;
 8001b2e:	2300      	movs	r3, #0
 8001b30:	623b      	str	r3, [r7, #32]
  USART_InitStruct.StopBits = LL_USART_STOPBITS_1;
 8001b32:	2300      	movs	r3, #0
 8001b34:	627b      	str	r3, [r7, #36]	; 0x24
  USART_InitStruct.Parity = LL_USART_PARITY_NONE;
 8001b36:	2300      	movs	r3, #0
 8001b38:	62bb      	str	r3, [r7, #40]	; 0x28
  USART_InitStruct.TransferDirection = LL_USART_DIRECTION_TX_RX;
 8001b3a:	230c      	movs	r3, #12
 8001b3c:	62fb      	str	r3, [r7, #44]	; 0x2c
  USART_InitStruct.HardwareFlowControl = LL_USART_HWCONTROL_NONE;
 8001b3e:	2300      	movs	r3, #0
 8001b40:	633b      	str	r3, [r7, #48]	; 0x30
  USART_InitStruct.OverSampling = LL_USART_OVERSAMPLING_16;
 8001b42:	2300      	movs	r3, #0
 8001b44:	637b      	str	r3, [r7, #52]	; 0x34
  LL_USART_Init(USART2, &USART_InitStruct);
 8001b46:	f107 031c 	add.w	r3, r7, #28
 8001b4a:	4619      	mov	r1, r3
 8001b4c:	480a      	ldr	r0, [pc, #40]	; (8001b78 <MX_USART2_UART_Init+0x170>)
 8001b4e:	f7fe ff0f 	bl	8000970 <LL_USART_Init>
  LL_USART_ConfigAsyncMode(USART2);
 8001b52:	4809      	ldr	r0, [pc, #36]	; (8001b78 <MX_USART2_UART_Init+0x170>)
 8001b54:	f7ff feea 	bl	800192c <LL_USART_ConfigAsyncMode>
  LL_USART_DisableIT_CTS(USART2);
 8001b58:	4807      	ldr	r0, [pc, #28]	; (8001b78 <MX_USART2_UART_Init+0x170>)
 8001b5a:	f7ff ff0d 	bl	8001978 <LL_USART_DisableIT_CTS>

  /* Enable USART2 peripheral and interrupts*/

  	  //type your code here:

  LL_USART_EnableIT_IDLE(USART2);
 8001b5e:	4806      	ldr	r0, [pc, #24]	; (8001b78 <MX_USART2_UART_Init+0x170>)
 8001b60:	f7ff fefa 	bl	8001958 <LL_USART_EnableIT_IDLE>
  LL_USART_Enable(USART2);
 8001b64:	4804      	ldr	r0, [pc, #16]	; (8001b78 <MX_USART2_UART_Init+0x170>)
 8001b66:	f7ff fed1 	bl	800190c <LL_USART_Enable>
}
 8001b6a:	bf00      	nop
 8001b6c:	3738      	adds	r7, #56	; 0x38
 8001b6e:	46bd      	mov	sp, r7
 8001b70:	bd80      	pop	{r7, pc}
 8001b72:	bf00      	nop
 8001b74:	40020000 	.word	0x40020000
 8001b78:	40004400 	.word	0x40004400

08001b7c <USART2_PutBuffer>:


// Send data stored in buffer with DMA
void USART2_PutBuffer(uint8_t *buffer, uint8_t length)
{
 8001b7c:	b580      	push	{r7, lr}
 8001b7e:	b082      	sub	sp, #8
 8001b80:	af00      	add	r7, sp, #0
 8001b82:	6078      	str	r0, [r7, #4]
 8001b84:	460b      	mov	r3, r1
 8001b86:	70fb      	strb	r3, [r7, #3]
	LL_DMA_SetMemoryAddress(DMA1, LL_DMA_CHANNEL_7, (uint32_t)buffer);
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	461a      	mov	r2, r3
 8001b8c:	2107      	movs	r1, #7
 8001b8e:	480a      	ldr	r0, [pc, #40]	; (8001bb8 <USART2_PutBuffer+0x3c>)
 8001b90:	f7ff fe1c 	bl	80017cc <LL_DMA_SetMemoryAddress>

	LL_DMA_SetDataLength(DMA1, LL_DMA_CHANNEL_7, length);
 8001b94:	78fb      	ldrb	r3, [r7, #3]
 8001b96:	461a      	mov	r2, r3
 8001b98:	2107      	movs	r1, #7
 8001b9a:	4807      	ldr	r0, [pc, #28]	; (8001bb8 <USART2_PutBuffer+0x3c>)
 8001b9c:	f7ff fddc 	bl	8001758 <LL_DMA_SetDataLength>

	LL_DMA_EnableIT_TC(DMA1, LL_DMA_CHANNEL_7);
 8001ba0:	2107      	movs	r1, #7
 8001ba2:	4805      	ldr	r0, [pc, #20]	; (8001bb8 <USART2_PutBuffer+0x3c>)
 8001ba4:	f7ff fe42 	bl	800182c <LL_DMA_EnableIT_TC>

	LL_DMA_EnableChannel(DMA1, LL_DMA_CHANNEL_7);
 8001ba8:	2107      	movs	r1, #7
 8001baa:	4803      	ldr	r0, [pc, #12]	; (8001bb8 <USART2_PutBuffer+0x3c>)
 8001bac:	f7ff fcb6 	bl	800151c <LL_DMA_EnableChannel>
}
 8001bb0:	bf00      	nop
 8001bb2:	3708      	adds	r7, #8
 8001bb4:	46bd      	mov	sp, r7
 8001bb6:	bd80      	pop	{r7, pc}
 8001bb8:	40020000 	.word	0x40020000

08001bbc <USART2_CheckDmaReception>:
 *	Forwards data to callback function.
 *	Keeps track of pointer pointing to Rx memory buffer and resets the pointer if overflow is possible in next Rx.
 *	Refer to reference manual - "normal memory mode" and "increment memory mode".
 */
void USART2_CheckDmaReception(void)
{
 8001bbc:	b580      	push	{r7, lr}
 8001bbe:	b084      	sub	sp, #16
 8001bc0:	af00      	add	r7, sp, #0
	//type your implementation here
	
	if(USART2_ProcessData == 0) return;
 8001bc2:	4b18      	ldr	r3, [pc, #96]	; (8001c24 <USART2_CheckDmaReception+0x68>)
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	2b00      	cmp	r3, #0
 8001bc8:	d028      	beq.n	8001c1c <USART2_CheckDmaReception+0x60>

		extern int DMA_position;
		static int old_pos = 0;
		int len = LL_DMA_GetDataLength(DMA1, LL_DMA_CHANNEL_6);
 8001bca:	2106      	movs	r1, #6
 8001bcc:	4816      	ldr	r0, [pc, #88]	; (8001c28 <USART2_CheckDmaReception+0x6c>)
 8001bce:	f7ff fde7 	bl	80017a0 <LL_DMA_GetDataLength>
 8001bd2:	4603      	mov	r3, r0
 8001bd4:	60bb      	str	r3, [r7, #8]
		int end_pos = DMA_USART2_BUFFER_SIZE - len;
 8001bd6:	68bb      	ldr	r3, [r7, #8]
 8001bd8:	f5c3 7380 	rsb	r3, r3, #256	; 0x100
 8001bdc:	607b      	str	r3, [r7, #4]



		if(end_pos > old_pos) {
 8001bde:	4b13      	ldr	r3, [pc, #76]	; (8001c2c <USART2_CheckDmaReception+0x70>)
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	687a      	ldr	r2, [r7, #4]
 8001be4:	429a      	cmp	r2, r3
 8001be6:	dd15      	ble.n	8001c14 <USART2_CheckDmaReception+0x58>

			for(int i = old_pos; i<end_pos; i+=1) {
 8001be8:	4b10      	ldr	r3, [pc, #64]	; (8001c2c <USART2_CheckDmaReception+0x70>)
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	60fb      	str	r3, [r7, #12]
 8001bee:	e00a      	b.n	8001c06 <USART2_CheckDmaReception+0x4a>
				USART2_ProcessData(bufferUSART2dma[i]);
 8001bf0:	4b0c      	ldr	r3, [pc, #48]	; (8001c24 <USART2_CheckDmaReception+0x68>)
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	490e      	ldr	r1, [pc, #56]	; (8001c30 <USART2_CheckDmaReception+0x74>)
 8001bf6:	68fa      	ldr	r2, [r7, #12]
 8001bf8:	440a      	add	r2, r1
 8001bfa:	7812      	ldrb	r2, [r2, #0]
 8001bfc:	4610      	mov	r0, r2
 8001bfe:	4798      	blx	r3
			for(int i = old_pos; i<end_pos; i+=1) {
 8001c00:	68fb      	ldr	r3, [r7, #12]
 8001c02:	3301      	adds	r3, #1
 8001c04:	60fb      	str	r3, [r7, #12]
 8001c06:	68fa      	ldr	r2, [r7, #12]
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	429a      	cmp	r2, r3
 8001c0c:	dbf0      	blt.n	8001bf0 <USART2_CheckDmaReception+0x34>
			}
			old_pos = end_pos;
 8001c0e:	4a07      	ldr	r2, [pc, #28]	; (8001c2c <USART2_CheckDmaReception+0x70>)
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	6013      	str	r3, [r2, #0]

		}

		DMA_position = end_pos;
 8001c14:	4a07      	ldr	r2, [pc, #28]	; (8001c34 <USART2_CheckDmaReception+0x78>)
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	6013      	str	r3, [r2, #0]
 8001c1a:	e000      	b.n	8001c1e <USART2_CheckDmaReception+0x62>
	if(USART2_ProcessData == 0) return;
 8001c1c:	bf00      	nop
}
 8001c1e:	3710      	adds	r7, #16
 8001c20:	46bd      	mov	sp, r7
 8001c22:	bd80      	pop	{r7, pc}
 8001c24:	20000194 	.word	0x20000194
 8001c28:	40020000 	.word	0x40020000
 8001c2c:	20000198 	.word	0x20000198
 8001c30:	200001a4 	.word	0x200001a4
 8001c34:	20000084 	.word	0x20000084

08001c38 <Reset_Handler>:
 8001c38:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001c70 <LoopForever+0x2>
 8001c3c:	2100      	movs	r1, #0
 8001c3e:	e003      	b.n	8001c48 <LoopCopyDataInit>

08001c40 <CopyDataInit>:
 8001c40:	4b0c      	ldr	r3, [pc, #48]	; (8001c74 <LoopForever+0x6>)
 8001c42:	585b      	ldr	r3, [r3, r1]
 8001c44:	5043      	str	r3, [r0, r1]
 8001c46:	3104      	adds	r1, #4

08001c48 <LoopCopyDataInit>:
 8001c48:	480b      	ldr	r0, [pc, #44]	; (8001c78 <LoopForever+0xa>)
 8001c4a:	4b0c      	ldr	r3, [pc, #48]	; (8001c7c <LoopForever+0xe>)
 8001c4c:	1842      	adds	r2, r0, r1
 8001c4e:	429a      	cmp	r2, r3
 8001c50:	d3f6      	bcc.n	8001c40 <CopyDataInit>
 8001c52:	4a0b      	ldr	r2, [pc, #44]	; (8001c80 <LoopForever+0x12>)
 8001c54:	e002      	b.n	8001c5c <LoopFillZerobss>

08001c56 <FillZerobss>:
 8001c56:	2300      	movs	r3, #0
 8001c58:	f842 3b04 	str.w	r3, [r2], #4

08001c5c <LoopFillZerobss>:
 8001c5c:	4b09      	ldr	r3, [pc, #36]	; (8001c84 <LoopForever+0x16>)
 8001c5e:	429a      	cmp	r2, r3
 8001c60:	d3f9      	bcc.n	8001c56 <FillZerobss>
 8001c62:	f7ff fbcd 	bl	8001400 <SystemInit>
 8001c66:	f000 f817 	bl	8001c98 <__libc_init_array>
 8001c6a:	f7ff f979 	bl	8000f60 <main>

08001c6e <LoopForever>:
 8001c6e:	e7fe      	b.n	8001c6e <LoopForever>
 8001c70:	20003000 	.word	0x20003000
 8001c74:	0800263c 	.word	0x0800263c
 8001c78:	20000000 	.word	0x20000000
 8001c7c:	20000068 	.word	0x20000068
 8001c80:	20000068 	.word	0x20000068
 8001c84:	200002a8 	.word	0x200002a8

08001c88 <ADC1_2_IRQHandler>:
 8001c88:	e7fe      	b.n	8001c88 <ADC1_2_IRQHandler>
	...

08001c8c <__errno>:
 8001c8c:	4b01      	ldr	r3, [pc, #4]	; (8001c94 <__errno+0x8>)
 8001c8e:	6818      	ldr	r0, [r3, #0]
 8001c90:	4770      	bx	lr
 8001c92:	bf00      	nop
 8001c94:	20000004 	.word	0x20000004

08001c98 <__libc_init_array>:
 8001c98:	b570      	push	{r4, r5, r6, lr}
 8001c9a:	4e0d      	ldr	r6, [pc, #52]	; (8001cd0 <__libc_init_array+0x38>)
 8001c9c:	4c0d      	ldr	r4, [pc, #52]	; (8001cd4 <__libc_init_array+0x3c>)
 8001c9e:	1ba4      	subs	r4, r4, r6
 8001ca0:	10a4      	asrs	r4, r4, #2
 8001ca2:	2500      	movs	r5, #0
 8001ca4:	42a5      	cmp	r5, r4
 8001ca6:	d109      	bne.n	8001cbc <__libc_init_array+0x24>
 8001ca8:	4e0b      	ldr	r6, [pc, #44]	; (8001cd8 <__libc_init_array+0x40>)
 8001caa:	4c0c      	ldr	r4, [pc, #48]	; (8001cdc <__libc_init_array+0x44>)
 8001cac:	f000 fc4a 	bl	8002544 <_init>
 8001cb0:	1ba4      	subs	r4, r4, r6
 8001cb2:	10a4      	asrs	r4, r4, #2
 8001cb4:	2500      	movs	r5, #0
 8001cb6:	42a5      	cmp	r5, r4
 8001cb8:	d105      	bne.n	8001cc6 <__libc_init_array+0x2e>
 8001cba:	bd70      	pop	{r4, r5, r6, pc}
 8001cbc:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8001cc0:	4798      	blx	r3
 8001cc2:	3501      	adds	r5, #1
 8001cc4:	e7ee      	b.n	8001ca4 <__libc_init_array+0xc>
 8001cc6:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8001cca:	4798      	blx	r3
 8001ccc:	3501      	adds	r5, #1
 8001cce:	e7f2      	b.n	8001cb6 <__libc_init_array+0x1e>
 8001cd0:	08002634 	.word	0x08002634
 8001cd4:	08002634 	.word	0x08002634
 8001cd8:	08002634 	.word	0x08002634
 8001cdc:	08002638 	.word	0x08002638

08001ce0 <malloc>:
 8001ce0:	4b02      	ldr	r3, [pc, #8]	; (8001cec <malloc+0xc>)
 8001ce2:	4601      	mov	r1, r0
 8001ce4:	6818      	ldr	r0, [r3, #0]
 8001ce6:	f000 b861 	b.w	8001dac <_malloc_r>
 8001cea:	bf00      	nop
 8001cec:	20000004 	.word	0x20000004

08001cf0 <free>:
 8001cf0:	4b02      	ldr	r3, [pc, #8]	; (8001cfc <free+0xc>)
 8001cf2:	4601      	mov	r1, r0
 8001cf4:	6818      	ldr	r0, [r3, #0]
 8001cf6:	f000 b80b 	b.w	8001d10 <_free_r>
 8001cfa:	bf00      	nop
 8001cfc:	20000004 	.word	0x20000004

08001d00 <memset>:
 8001d00:	4402      	add	r2, r0
 8001d02:	4603      	mov	r3, r0
 8001d04:	4293      	cmp	r3, r2
 8001d06:	d100      	bne.n	8001d0a <memset+0xa>
 8001d08:	4770      	bx	lr
 8001d0a:	f803 1b01 	strb.w	r1, [r3], #1
 8001d0e:	e7f9      	b.n	8001d04 <memset+0x4>

08001d10 <_free_r>:
 8001d10:	b538      	push	{r3, r4, r5, lr}
 8001d12:	4605      	mov	r5, r0
 8001d14:	2900      	cmp	r1, #0
 8001d16:	d045      	beq.n	8001da4 <_free_r+0x94>
 8001d18:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8001d1c:	1f0c      	subs	r4, r1, #4
 8001d1e:	2b00      	cmp	r3, #0
 8001d20:	bfb8      	it	lt
 8001d22:	18e4      	addlt	r4, r4, r3
 8001d24:	f000 f8e0 	bl	8001ee8 <__malloc_lock>
 8001d28:	4a1f      	ldr	r2, [pc, #124]	; (8001da8 <_free_r+0x98>)
 8001d2a:	6813      	ldr	r3, [r2, #0]
 8001d2c:	4610      	mov	r0, r2
 8001d2e:	b933      	cbnz	r3, 8001d3e <_free_r+0x2e>
 8001d30:	6063      	str	r3, [r4, #4]
 8001d32:	6014      	str	r4, [r2, #0]
 8001d34:	4628      	mov	r0, r5
 8001d36:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8001d3a:	f000 b8d6 	b.w	8001eea <__malloc_unlock>
 8001d3e:	42a3      	cmp	r3, r4
 8001d40:	d90c      	bls.n	8001d5c <_free_r+0x4c>
 8001d42:	6821      	ldr	r1, [r4, #0]
 8001d44:	1862      	adds	r2, r4, r1
 8001d46:	4293      	cmp	r3, r2
 8001d48:	bf04      	itt	eq
 8001d4a:	681a      	ldreq	r2, [r3, #0]
 8001d4c:	685b      	ldreq	r3, [r3, #4]
 8001d4e:	6063      	str	r3, [r4, #4]
 8001d50:	bf04      	itt	eq
 8001d52:	1852      	addeq	r2, r2, r1
 8001d54:	6022      	streq	r2, [r4, #0]
 8001d56:	6004      	str	r4, [r0, #0]
 8001d58:	e7ec      	b.n	8001d34 <_free_r+0x24>
 8001d5a:	4613      	mov	r3, r2
 8001d5c:	685a      	ldr	r2, [r3, #4]
 8001d5e:	b10a      	cbz	r2, 8001d64 <_free_r+0x54>
 8001d60:	42a2      	cmp	r2, r4
 8001d62:	d9fa      	bls.n	8001d5a <_free_r+0x4a>
 8001d64:	6819      	ldr	r1, [r3, #0]
 8001d66:	1858      	adds	r0, r3, r1
 8001d68:	42a0      	cmp	r0, r4
 8001d6a:	d10b      	bne.n	8001d84 <_free_r+0x74>
 8001d6c:	6820      	ldr	r0, [r4, #0]
 8001d6e:	4401      	add	r1, r0
 8001d70:	1858      	adds	r0, r3, r1
 8001d72:	4282      	cmp	r2, r0
 8001d74:	6019      	str	r1, [r3, #0]
 8001d76:	d1dd      	bne.n	8001d34 <_free_r+0x24>
 8001d78:	6810      	ldr	r0, [r2, #0]
 8001d7a:	6852      	ldr	r2, [r2, #4]
 8001d7c:	605a      	str	r2, [r3, #4]
 8001d7e:	4401      	add	r1, r0
 8001d80:	6019      	str	r1, [r3, #0]
 8001d82:	e7d7      	b.n	8001d34 <_free_r+0x24>
 8001d84:	d902      	bls.n	8001d8c <_free_r+0x7c>
 8001d86:	230c      	movs	r3, #12
 8001d88:	602b      	str	r3, [r5, #0]
 8001d8a:	e7d3      	b.n	8001d34 <_free_r+0x24>
 8001d8c:	6820      	ldr	r0, [r4, #0]
 8001d8e:	1821      	adds	r1, r4, r0
 8001d90:	428a      	cmp	r2, r1
 8001d92:	bf04      	itt	eq
 8001d94:	6811      	ldreq	r1, [r2, #0]
 8001d96:	6852      	ldreq	r2, [r2, #4]
 8001d98:	6062      	str	r2, [r4, #4]
 8001d9a:	bf04      	itt	eq
 8001d9c:	1809      	addeq	r1, r1, r0
 8001d9e:	6021      	streq	r1, [r4, #0]
 8001da0:	605c      	str	r4, [r3, #4]
 8001da2:	e7c7      	b.n	8001d34 <_free_r+0x24>
 8001da4:	bd38      	pop	{r3, r4, r5, pc}
 8001da6:	bf00      	nop
 8001da8:	2000019c 	.word	0x2000019c

08001dac <_malloc_r>:
 8001dac:	b570      	push	{r4, r5, r6, lr}
 8001dae:	1ccd      	adds	r5, r1, #3
 8001db0:	f025 0503 	bic.w	r5, r5, #3
 8001db4:	3508      	adds	r5, #8
 8001db6:	2d0c      	cmp	r5, #12
 8001db8:	bf38      	it	cc
 8001dba:	250c      	movcc	r5, #12
 8001dbc:	2d00      	cmp	r5, #0
 8001dbe:	4606      	mov	r6, r0
 8001dc0:	db01      	blt.n	8001dc6 <_malloc_r+0x1a>
 8001dc2:	42a9      	cmp	r1, r5
 8001dc4:	d903      	bls.n	8001dce <_malloc_r+0x22>
 8001dc6:	230c      	movs	r3, #12
 8001dc8:	6033      	str	r3, [r6, #0]
 8001dca:	2000      	movs	r0, #0
 8001dcc:	bd70      	pop	{r4, r5, r6, pc}
 8001dce:	f000 f88b 	bl	8001ee8 <__malloc_lock>
 8001dd2:	4a21      	ldr	r2, [pc, #132]	; (8001e58 <_malloc_r+0xac>)
 8001dd4:	6814      	ldr	r4, [r2, #0]
 8001dd6:	4621      	mov	r1, r4
 8001dd8:	b991      	cbnz	r1, 8001e00 <_malloc_r+0x54>
 8001dda:	4c20      	ldr	r4, [pc, #128]	; (8001e5c <_malloc_r+0xb0>)
 8001ddc:	6823      	ldr	r3, [r4, #0]
 8001dde:	b91b      	cbnz	r3, 8001de8 <_malloc_r+0x3c>
 8001de0:	4630      	mov	r0, r6
 8001de2:	f000 f83d 	bl	8001e60 <_sbrk_r>
 8001de6:	6020      	str	r0, [r4, #0]
 8001de8:	4629      	mov	r1, r5
 8001dea:	4630      	mov	r0, r6
 8001dec:	f000 f838 	bl	8001e60 <_sbrk_r>
 8001df0:	1c43      	adds	r3, r0, #1
 8001df2:	d124      	bne.n	8001e3e <_malloc_r+0x92>
 8001df4:	230c      	movs	r3, #12
 8001df6:	6033      	str	r3, [r6, #0]
 8001df8:	4630      	mov	r0, r6
 8001dfa:	f000 f876 	bl	8001eea <__malloc_unlock>
 8001dfe:	e7e4      	b.n	8001dca <_malloc_r+0x1e>
 8001e00:	680b      	ldr	r3, [r1, #0]
 8001e02:	1b5b      	subs	r3, r3, r5
 8001e04:	d418      	bmi.n	8001e38 <_malloc_r+0x8c>
 8001e06:	2b0b      	cmp	r3, #11
 8001e08:	d90f      	bls.n	8001e2a <_malloc_r+0x7e>
 8001e0a:	600b      	str	r3, [r1, #0]
 8001e0c:	50cd      	str	r5, [r1, r3]
 8001e0e:	18cc      	adds	r4, r1, r3
 8001e10:	4630      	mov	r0, r6
 8001e12:	f000 f86a 	bl	8001eea <__malloc_unlock>
 8001e16:	f104 000b 	add.w	r0, r4, #11
 8001e1a:	1d23      	adds	r3, r4, #4
 8001e1c:	f020 0007 	bic.w	r0, r0, #7
 8001e20:	1ac3      	subs	r3, r0, r3
 8001e22:	d0d3      	beq.n	8001dcc <_malloc_r+0x20>
 8001e24:	425a      	negs	r2, r3
 8001e26:	50e2      	str	r2, [r4, r3]
 8001e28:	e7d0      	b.n	8001dcc <_malloc_r+0x20>
 8001e2a:	428c      	cmp	r4, r1
 8001e2c:	684b      	ldr	r3, [r1, #4]
 8001e2e:	bf16      	itet	ne
 8001e30:	6063      	strne	r3, [r4, #4]
 8001e32:	6013      	streq	r3, [r2, #0]
 8001e34:	460c      	movne	r4, r1
 8001e36:	e7eb      	b.n	8001e10 <_malloc_r+0x64>
 8001e38:	460c      	mov	r4, r1
 8001e3a:	6849      	ldr	r1, [r1, #4]
 8001e3c:	e7cc      	b.n	8001dd8 <_malloc_r+0x2c>
 8001e3e:	1cc4      	adds	r4, r0, #3
 8001e40:	f024 0403 	bic.w	r4, r4, #3
 8001e44:	42a0      	cmp	r0, r4
 8001e46:	d005      	beq.n	8001e54 <_malloc_r+0xa8>
 8001e48:	1a21      	subs	r1, r4, r0
 8001e4a:	4630      	mov	r0, r6
 8001e4c:	f000 f808 	bl	8001e60 <_sbrk_r>
 8001e50:	3001      	adds	r0, #1
 8001e52:	d0cf      	beq.n	8001df4 <_malloc_r+0x48>
 8001e54:	6025      	str	r5, [r4, #0]
 8001e56:	e7db      	b.n	8001e10 <_malloc_r+0x64>
 8001e58:	2000019c 	.word	0x2000019c
 8001e5c:	200001a0 	.word	0x200001a0

08001e60 <_sbrk_r>:
 8001e60:	b538      	push	{r3, r4, r5, lr}
 8001e62:	4c06      	ldr	r4, [pc, #24]	; (8001e7c <_sbrk_r+0x1c>)
 8001e64:	2300      	movs	r3, #0
 8001e66:	4605      	mov	r5, r0
 8001e68:	4608      	mov	r0, r1
 8001e6a:	6023      	str	r3, [r4, #0]
 8001e6c:	f7ff fa9c 	bl	80013a8 <_sbrk>
 8001e70:	1c43      	adds	r3, r0, #1
 8001e72:	d102      	bne.n	8001e7a <_sbrk_r+0x1a>
 8001e74:	6823      	ldr	r3, [r4, #0]
 8001e76:	b103      	cbz	r3, 8001e7a <_sbrk_r+0x1a>
 8001e78:	602b      	str	r3, [r5, #0]
 8001e7a:	bd38      	pop	{r3, r4, r5, pc}
 8001e7c:	200002a4 	.word	0x200002a4

08001e80 <sniprintf>:
 8001e80:	b40c      	push	{r2, r3}
 8001e82:	b530      	push	{r4, r5, lr}
 8001e84:	4b17      	ldr	r3, [pc, #92]	; (8001ee4 <sniprintf+0x64>)
 8001e86:	1e0c      	subs	r4, r1, #0
 8001e88:	b09d      	sub	sp, #116	; 0x74
 8001e8a:	681d      	ldr	r5, [r3, #0]
 8001e8c:	da08      	bge.n	8001ea0 <sniprintf+0x20>
 8001e8e:	238b      	movs	r3, #139	; 0x8b
 8001e90:	602b      	str	r3, [r5, #0]
 8001e92:	f04f 30ff 	mov.w	r0, #4294967295
 8001e96:	b01d      	add	sp, #116	; 0x74
 8001e98:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8001e9c:	b002      	add	sp, #8
 8001e9e:	4770      	bx	lr
 8001ea0:	f44f 7302 	mov.w	r3, #520	; 0x208
 8001ea4:	f8ad 3014 	strh.w	r3, [sp, #20]
 8001ea8:	bf14      	ite	ne
 8001eaa:	f104 33ff 	addne.w	r3, r4, #4294967295
 8001eae:	4623      	moveq	r3, r4
 8001eb0:	9304      	str	r3, [sp, #16]
 8001eb2:	9307      	str	r3, [sp, #28]
 8001eb4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001eb8:	9002      	str	r0, [sp, #8]
 8001eba:	9006      	str	r0, [sp, #24]
 8001ebc:	f8ad 3016 	strh.w	r3, [sp, #22]
 8001ec0:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8001ec2:	ab21      	add	r3, sp, #132	; 0x84
 8001ec4:	a902      	add	r1, sp, #8
 8001ec6:	4628      	mov	r0, r5
 8001ec8:	9301      	str	r3, [sp, #4]
 8001eca:	f000 f869 	bl	8001fa0 <_svfiprintf_r>
 8001ece:	1c43      	adds	r3, r0, #1
 8001ed0:	bfbc      	itt	lt
 8001ed2:	238b      	movlt	r3, #139	; 0x8b
 8001ed4:	602b      	strlt	r3, [r5, #0]
 8001ed6:	2c00      	cmp	r4, #0
 8001ed8:	d0dd      	beq.n	8001e96 <sniprintf+0x16>
 8001eda:	9b02      	ldr	r3, [sp, #8]
 8001edc:	2200      	movs	r2, #0
 8001ede:	701a      	strb	r2, [r3, #0]
 8001ee0:	e7d9      	b.n	8001e96 <sniprintf+0x16>
 8001ee2:	bf00      	nop
 8001ee4:	20000004 	.word	0x20000004

08001ee8 <__malloc_lock>:
 8001ee8:	4770      	bx	lr

08001eea <__malloc_unlock>:
 8001eea:	4770      	bx	lr

08001eec <__ssputs_r>:
 8001eec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001ef0:	688e      	ldr	r6, [r1, #8]
 8001ef2:	429e      	cmp	r6, r3
 8001ef4:	4682      	mov	sl, r0
 8001ef6:	460c      	mov	r4, r1
 8001ef8:	4690      	mov	r8, r2
 8001efa:	4699      	mov	r9, r3
 8001efc:	d837      	bhi.n	8001f6e <__ssputs_r+0x82>
 8001efe:	898a      	ldrh	r2, [r1, #12]
 8001f00:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8001f04:	d031      	beq.n	8001f6a <__ssputs_r+0x7e>
 8001f06:	6825      	ldr	r5, [r4, #0]
 8001f08:	6909      	ldr	r1, [r1, #16]
 8001f0a:	1a6f      	subs	r7, r5, r1
 8001f0c:	6965      	ldr	r5, [r4, #20]
 8001f0e:	2302      	movs	r3, #2
 8001f10:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8001f14:	fb95 f5f3 	sdiv	r5, r5, r3
 8001f18:	f109 0301 	add.w	r3, r9, #1
 8001f1c:	443b      	add	r3, r7
 8001f1e:	429d      	cmp	r5, r3
 8001f20:	bf38      	it	cc
 8001f22:	461d      	movcc	r5, r3
 8001f24:	0553      	lsls	r3, r2, #21
 8001f26:	d530      	bpl.n	8001f8a <__ssputs_r+0x9e>
 8001f28:	4629      	mov	r1, r5
 8001f2a:	f7ff ff3f 	bl	8001dac <_malloc_r>
 8001f2e:	4606      	mov	r6, r0
 8001f30:	b950      	cbnz	r0, 8001f48 <__ssputs_r+0x5c>
 8001f32:	230c      	movs	r3, #12
 8001f34:	f8ca 3000 	str.w	r3, [sl]
 8001f38:	89a3      	ldrh	r3, [r4, #12]
 8001f3a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001f3e:	81a3      	strh	r3, [r4, #12]
 8001f40:	f04f 30ff 	mov.w	r0, #4294967295
 8001f44:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001f48:	463a      	mov	r2, r7
 8001f4a:	6921      	ldr	r1, [r4, #16]
 8001f4c:	f000 faa8 	bl	80024a0 <memcpy>
 8001f50:	89a3      	ldrh	r3, [r4, #12]
 8001f52:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8001f56:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001f5a:	81a3      	strh	r3, [r4, #12]
 8001f5c:	6126      	str	r6, [r4, #16]
 8001f5e:	6165      	str	r5, [r4, #20]
 8001f60:	443e      	add	r6, r7
 8001f62:	1bed      	subs	r5, r5, r7
 8001f64:	6026      	str	r6, [r4, #0]
 8001f66:	60a5      	str	r5, [r4, #8]
 8001f68:	464e      	mov	r6, r9
 8001f6a:	454e      	cmp	r6, r9
 8001f6c:	d900      	bls.n	8001f70 <__ssputs_r+0x84>
 8001f6e:	464e      	mov	r6, r9
 8001f70:	4632      	mov	r2, r6
 8001f72:	4641      	mov	r1, r8
 8001f74:	6820      	ldr	r0, [r4, #0]
 8001f76:	f000 fa9e 	bl	80024b6 <memmove>
 8001f7a:	68a3      	ldr	r3, [r4, #8]
 8001f7c:	1b9b      	subs	r3, r3, r6
 8001f7e:	60a3      	str	r3, [r4, #8]
 8001f80:	6823      	ldr	r3, [r4, #0]
 8001f82:	441e      	add	r6, r3
 8001f84:	6026      	str	r6, [r4, #0]
 8001f86:	2000      	movs	r0, #0
 8001f88:	e7dc      	b.n	8001f44 <__ssputs_r+0x58>
 8001f8a:	462a      	mov	r2, r5
 8001f8c:	f000 faac 	bl	80024e8 <_realloc_r>
 8001f90:	4606      	mov	r6, r0
 8001f92:	2800      	cmp	r0, #0
 8001f94:	d1e2      	bne.n	8001f5c <__ssputs_r+0x70>
 8001f96:	6921      	ldr	r1, [r4, #16]
 8001f98:	4650      	mov	r0, sl
 8001f9a:	f7ff feb9 	bl	8001d10 <_free_r>
 8001f9e:	e7c8      	b.n	8001f32 <__ssputs_r+0x46>

08001fa0 <_svfiprintf_r>:
 8001fa0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001fa4:	461d      	mov	r5, r3
 8001fa6:	898b      	ldrh	r3, [r1, #12]
 8001fa8:	061f      	lsls	r7, r3, #24
 8001faa:	b09d      	sub	sp, #116	; 0x74
 8001fac:	4680      	mov	r8, r0
 8001fae:	460c      	mov	r4, r1
 8001fb0:	4616      	mov	r6, r2
 8001fb2:	d50f      	bpl.n	8001fd4 <_svfiprintf_r+0x34>
 8001fb4:	690b      	ldr	r3, [r1, #16]
 8001fb6:	b96b      	cbnz	r3, 8001fd4 <_svfiprintf_r+0x34>
 8001fb8:	2140      	movs	r1, #64	; 0x40
 8001fba:	f7ff fef7 	bl	8001dac <_malloc_r>
 8001fbe:	6020      	str	r0, [r4, #0]
 8001fc0:	6120      	str	r0, [r4, #16]
 8001fc2:	b928      	cbnz	r0, 8001fd0 <_svfiprintf_r+0x30>
 8001fc4:	230c      	movs	r3, #12
 8001fc6:	f8c8 3000 	str.w	r3, [r8]
 8001fca:	f04f 30ff 	mov.w	r0, #4294967295
 8001fce:	e0c8      	b.n	8002162 <_svfiprintf_r+0x1c2>
 8001fd0:	2340      	movs	r3, #64	; 0x40
 8001fd2:	6163      	str	r3, [r4, #20]
 8001fd4:	2300      	movs	r3, #0
 8001fd6:	9309      	str	r3, [sp, #36]	; 0x24
 8001fd8:	2320      	movs	r3, #32
 8001fda:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8001fde:	2330      	movs	r3, #48	; 0x30
 8001fe0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8001fe4:	9503      	str	r5, [sp, #12]
 8001fe6:	f04f 0b01 	mov.w	fp, #1
 8001fea:	4637      	mov	r7, r6
 8001fec:	463d      	mov	r5, r7
 8001fee:	f815 3b01 	ldrb.w	r3, [r5], #1
 8001ff2:	b10b      	cbz	r3, 8001ff8 <_svfiprintf_r+0x58>
 8001ff4:	2b25      	cmp	r3, #37	; 0x25
 8001ff6:	d13e      	bne.n	8002076 <_svfiprintf_r+0xd6>
 8001ff8:	ebb7 0a06 	subs.w	sl, r7, r6
 8001ffc:	d00b      	beq.n	8002016 <_svfiprintf_r+0x76>
 8001ffe:	4653      	mov	r3, sl
 8002000:	4632      	mov	r2, r6
 8002002:	4621      	mov	r1, r4
 8002004:	4640      	mov	r0, r8
 8002006:	f7ff ff71 	bl	8001eec <__ssputs_r>
 800200a:	3001      	adds	r0, #1
 800200c:	f000 80a4 	beq.w	8002158 <_svfiprintf_r+0x1b8>
 8002010:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002012:	4453      	add	r3, sl
 8002014:	9309      	str	r3, [sp, #36]	; 0x24
 8002016:	783b      	ldrb	r3, [r7, #0]
 8002018:	2b00      	cmp	r3, #0
 800201a:	f000 809d 	beq.w	8002158 <_svfiprintf_r+0x1b8>
 800201e:	2300      	movs	r3, #0
 8002020:	f04f 32ff 	mov.w	r2, #4294967295
 8002024:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8002028:	9304      	str	r3, [sp, #16]
 800202a:	9307      	str	r3, [sp, #28]
 800202c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8002030:	931a      	str	r3, [sp, #104]	; 0x68
 8002032:	462f      	mov	r7, r5
 8002034:	2205      	movs	r2, #5
 8002036:	f817 1b01 	ldrb.w	r1, [r7], #1
 800203a:	4850      	ldr	r0, [pc, #320]	; (800217c <_svfiprintf_r+0x1dc>)
 800203c:	f7fe f8c8 	bl	80001d0 <memchr>
 8002040:	9b04      	ldr	r3, [sp, #16]
 8002042:	b9d0      	cbnz	r0, 800207a <_svfiprintf_r+0xda>
 8002044:	06d9      	lsls	r1, r3, #27
 8002046:	bf44      	itt	mi
 8002048:	2220      	movmi	r2, #32
 800204a:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800204e:	071a      	lsls	r2, r3, #28
 8002050:	bf44      	itt	mi
 8002052:	222b      	movmi	r2, #43	; 0x2b
 8002054:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8002058:	782a      	ldrb	r2, [r5, #0]
 800205a:	2a2a      	cmp	r2, #42	; 0x2a
 800205c:	d015      	beq.n	800208a <_svfiprintf_r+0xea>
 800205e:	9a07      	ldr	r2, [sp, #28]
 8002060:	462f      	mov	r7, r5
 8002062:	2000      	movs	r0, #0
 8002064:	250a      	movs	r5, #10
 8002066:	4639      	mov	r1, r7
 8002068:	f811 3b01 	ldrb.w	r3, [r1], #1
 800206c:	3b30      	subs	r3, #48	; 0x30
 800206e:	2b09      	cmp	r3, #9
 8002070:	d94d      	bls.n	800210e <_svfiprintf_r+0x16e>
 8002072:	b1b8      	cbz	r0, 80020a4 <_svfiprintf_r+0x104>
 8002074:	e00f      	b.n	8002096 <_svfiprintf_r+0xf6>
 8002076:	462f      	mov	r7, r5
 8002078:	e7b8      	b.n	8001fec <_svfiprintf_r+0x4c>
 800207a:	4a40      	ldr	r2, [pc, #256]	; (800217c <_svfiprintf_r+0x1dc>)
 800207c:	1a80      	subs	r0, r0, r2
 800207e:	fa0b f000 	lsl.w	r0, fp, r0
 8002082:	4318      	orrs	r0, r3
 8002084:	9004      	str	r0, [sp, #16]
 8002086:	463d      	mov	r5, r7
 8002088:	e7d3      	b.n	8002032 <_svfiprintf_r+0x92>
 800208a:	9a03      	ldr	r2, [sp, #12]
 800208c:	1d11      	adds	r1, r2, #4
 800208e:	6812      	ldr	r2, [r2, #0]
 8002090:	9103      	str	r1, [sp, #12]
 8002092:	2a00      	cmp	r2, #0
 8002094:	db01      	blt.n	800209a <_svfiprintf_r+0xfa>
 8002096:	9207      	str	r2, [sp, #28]
 8002098:	e004      	b.n	80020a4 <_svfiprintf_r+0x104>
 800209a:	4252      	negs	r2, r2
 800209c:	f043 0302 	orr.w	r3, r3, #2
 80020a0:	9207      	str	r2, [sp, #28]
 80020a2:	9304      	str	r3, [sp, #16]
 80020a4:	783b      	ldrb	r3, [r7, #0]
 80020a6:	2b2e      	cmp	r3, #46	; 0x2e
 80020a8:	d10c      	bne.n	80020c4 <_svfiprintf_r+0x124>
 80020aa:	787b      	ldrb	r3, [r7, #1]
 80020ac:	2b2a      	cmp	r3, #42	; 0x2a
 80020ae:	d133      	bne.n	8002118 <_svfiprintf_r+0x178>
 80020b0:	9b03      	ldr	r3, [sp, #12]
 80020b2:	1d1a      	adds	r2, r3, #4
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	9203      	str	r2, [sp, #12]
 80020b8:	2b00      	cmp	r3, #0
 80020ba:	bfb8      	it	lt
 80020bc:	f04f 33ff 	movlt.w	r3, #4294967295
 80020c0:	3702      	adds	r7, #2
 80020c2:	9305      	str	r3, [sp, #20]
 80020c4:	4d2e      	ldr	r5, [pc, #184]	; (8002180 <_svfiprintf_r+0x1e0>)
 80020c6:	7839      	ldrb	r1, [r7, #0]
 80020c8:	2203      	movs	r2, #3
 80020ca:	4628      	mov	r0, r5
 80020cc:	f7fe f880 	bl	80001d0 <memchr>
 80020d0:	b138      	cbz	r0, 80020e2 <_svfiprintf_r+0x142>
 80020d2:	2340      	movs	r3, #64	; 0x40
 80020d4:	1b40      	subs	r0, r0, r5
 80020d6:	fa03 f000 	lsl.w	r0, r3, r0
 80020da:	9b04      	ldr	r3, [sp, #16]
 80020dc:	4303      	orrs	r3, r0
 80020de:	3701      	adds	r7, #1
 80020e0:	9304      	str	r3, [sp, #16]
 80020e2:	7839      	ldrb	r1, [r7, #0]
 80020e4:	4827      	ldr	r0, [pc, #156]	; (8002184 <_svfiprintf_r+0x1e4>)
 80020e6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80020ea:	2206      	movs	r2, #6
 80020ec:	1c7e      	adds	r6, r7, #1
 80020ee:	f7fe f86f 	bl	80001d0 <memchr>
 80020f2:	2800      	cmp	r0, #0
 80020f4:	d038      	beq.n	8002168 <_svfiprintf_r+0x1c8>
 80020f6:	4b24      	ldr	r3, [pc, #144]	; (8002188 <_svfiprintf_r+0x1e8>)
 80020f8:	bb13      	cbnz	r3, 8002140 <_svfiprintf_r+0x1a0>
 80020fa:	9b03      	ldr	r3, [sp, #12]
 80020fc:	3307      	adds	r3, #7
 80020fe:	f023 0307 	bic.w	r3, r3, #7
 8002102:	3308      	adds	r3, #8
 8002104:	9303      	str	r3, [sp, #12]
 8002106:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002108:	444b      	add	r3, r9
 800210a:	9309      	str	r3, [sp, #36]	; 0x24
 800210c:	e76d      	b.n	8001fea <_svfiprintf_r+0x4a>
 800210e:	fb05 3202 	mla	r2, r5, r2, r3
 8002112:	2001      	movs	r0, #1
 8002114:	460f      	mov	r7, r1
 8002116:	e7a6      	b.n	8002066 <_svfiprintf_r+0xc6>
 8002118:	2300      	movs	r3, #0
 800211a:	3701      	adds	r7, #1
 800211c:	9305      	str	r3, [sp, #20]
 800211e:	4619      	mov	r1, r3
 8002120:	250a      	movs	r5, #10
 8002122:	4638      	mov	r0, r7
 8002124:	f810 2b01 	ldrb.w	r2, [r0], #1
 8002128:	3a30      	subs	r2, #48	; 0x30
 800212a:	2a09      	cmp	r2, #9
 800212c:	d903      	bls.n	8002136 <_svfiprintf_r+0x196>
 800212e:	2b00      	cmp	r3, #0
 8002130:	d0c8      	beq.n	80020c4 <_svfiprintf_r+0x124>
 8002132:	9105      	str	r1, [sp, #20]
 8002134:	e7c6      	b.n	80020c4 <_svfiprintf_r+0x124>
 8002136:	fb05 2101 	mla	r1, r5, r1, r2
 800213a:	2301      	movs	r3, #1
 800213c:	4607      	mov	r7, r0
 800213e:	e7f0      	b.n	8002122 <_svfiprintf_r+0x182>
 8002140:	ab03      	add	r3, sp, #12
 8002142:	9300      	str	r3, [sp, #0]
 8002144:	4622      	mov	r2, r4
 8002146:	4b11      	ldr	r3, [pc, #68]	; (800218c <_svfiprintf_r+0x1ec>)
 8002148:	a904      	add	r1, sp, #16
 800214a:	4640      	mov	r0, r8
 800214c:	f3af 8000 	nop.w
 8002150:	f1b0 3fff 	cmp.w	r0, #4294967295
 8002154:	4681      	mov	r9, r0
 8002156:	d1d6      	bne.n	8002106 <_svfiprintf_r+0x166>
 8002158:	89a3      	ldrh	r3, [r4, #12]
 800215a:	065b      	lsls	r3, r3, #25
 800215c:	f53f af35 	bmi.w	8001fca <_svfiprintf_r+0x2a>
 8002160:	9809      	ldr	r0, [sp, #36]	; 0x24
 8002162:	b01d      	add	sp, #116	; 0x74
 8002164:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002168:	ab03      	add	r3, sp, #12
 800216a:	9300      	str	r3, [sp, #0]
 800216c:	4622      	mov	r2, r4
 800216e:	4b07      	ldr	r3, [pc, #28]	; (800218c <_svfiprintf_r+0x1ec>)
 8002170:	a904      	add	r1, sp, #16
 8002172:	4640      	mov	r0, r8
 8002174:	f000 f882 	bl	800227c <_printf_i>
 8002178:	e7ea      	b.n	8002150 <_svfiprintf_r+0x1b0>
 800217a:	bf00      	nop
 800217c:	080025ff 	.word	0x080025ff
 8002180:	08002605 	.word	0x08002605
 8002184:	08002609 	.word	0x08002609
 8002188:	00000000 	.word	0x00000000
 800218c:	08001eed 	.word	0x08001eed

08002190 <_printf_common>:
 8002190:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002194:	4691      	mov	r9, r2
 8002196:	461f      	mov	r7, r3
 8002198:	688a      	ldr	r2, [r1, #8]
 800219a:	690b      	ldr	r3, [r1, #16]
 800219c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80021a0:	4293      	cmp	r3, r2
 80021a2:	bfb8      	it	lt
 80021a4:	4613      	movlt	r3, r2
 80021a6:	f8c9 3000 	str.w	r3, [r9]
 80021aa:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80021ae:	4606      	mov	r6, r0
 80021b0:	460c      	mov	r4, r1
 80021b2:	b112      	cbz	r2, 80021ba <_printf_common+0x2a>
 80021b4:	3301      	adds	r3, #1
 80021b6:	f8c9 3000 	str.w	r3, [r9]
 80021ba:	6823      	ldr	r3, [r4, #0]
 80021bc:	0699      	lsls	r1, r3, #26
 80021be:	bf42      	ittt	mi
 80021c0:	f8d9 3000 	ldrmi.w	r3, [r9]
 80021c4:	3302      	addmi	r3, #2
 80021c6:	f8c9 3000 	strmi.w	r3, [r9]
 80021ca:	6825      	ldr	r5, [r4, #0]
 80021cc:	f015 0506 	ands.w	r5, r5, #6
 80021d0:	d107      	bne.n	80021e2 <_printf_common+0x52>
 80021d2:	f104 0a19 	add.w	sl, r4, #25
 80021d6:	68e3      	ldr	r3, [r4, #12]
 80021d8:	f8d9 2000 	ldr.w	r2, [r9]
 80021dc:	1a9b      	subs	r3, r3, r2
 80021de:	42ab      	cmp	r3, r5
 80021e0:	dc28      	bgt.n	8002234 <_printf_common+0xa4>
 80021e2:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 80021e6:	6822      	ldr	r2, [r4, #0]
 80021e8:	3300      	adds	r3, #0
 80021ea:	bf18      	it	ne
 80021ec:	2301      	movne	r3, #1
 80021ee:	0692      	lsls	r2, r2, #26
 80021f0:	d42d      	bmi.n	800224e <_printf_common+0xbe>
 80021f2:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80021f6:	4639      	mov	r1, r7
 80021f8:	4630      	mov	r0, r6
 80021fa:	47c0      	blx	r8
 80021fc:	3001      	adds	r0, #1
 80021fe:	d020      	beq.n	8002242 <_printf_common+0xb2>
 8002200:	6823      	ldr	r3, [r4, #0]
 8002202:	68e5      	ldr	r5, [r4, #12]
 8002204:	f8d9 2000 	ldr.w	r2, [r9]
 8002208:	f003 0306 	and.w	r3, r3, #6
 800220c:	2b04      	cmp	r3, #4
 800220e:	bf08      	it	eq
 8002210:	1aad      	subeq	r5, r5, r2
 8002212:	68a3      	ldr	r3, [r4, #8]
 8002214:	6922      	ldr	r2, [r4, #16]
 8002216:	bf0c      	ite	eq
 8002218:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800221c:	2500      	movne	r5, #0
 800221e:	4293      	cmp	r3, r2
 8002220:	bfc4      	itt	gt
 8002222:	1a9b      	subgt	r3, r3, r2
 8002224:	18ed      	addgt	r5, r5, r3
 8002226:	f04f 0900 	mov.w	r9, #0
 800222a:	341a      	adds	r4, #26
 800222c:	454d      	cmp	r5, r9
 800222e:	d11a      	bne.n	8002266 <_printf_common+0xd6>
 8002230:	2000      	movs	r0, #0
 8002232:	e008      	b.n	8002246 <_printf_common+0xb6>
 8002234:	2301      	movs	r3, #1
 8002236:	4652      	mov	r2, sl
 8002238:	4639      	mov	r1, r7
 800223a:	4630      	mov	r0, r6
 800223c:	47c0      	blx	r8
 800223e:	3001      	adds	r0, #1
 8002240:	d103      	bne.n	800224a <_printf_common+0xba>
 8002242:	f04f 30ff 	mov.w	r0, #4294967295
 8002246:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800224a:	3501      	adds	r5, #1
 800224c:	e7c3      	b.n	80021d6 <_printf_common+0x46>
 800224e:	18e1      	adds	r1, r4, r3
 8002250:	1c5a      	adds	r2, r3, #1
 8002252:	2030      	movs	r0, #48	; 0x30
 8002254:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8002258:	4422      	add	r2, r4
 800225a:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800225e:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8002262:	3302      	adds	r3, #2
 8002264:	e7c5      	b.n	80021f2 <_printf_common+0x62>
 8002266:	2301      	movs	r3, #1
 8002268:	4622      	mov	r2, r4
 800226a:	4639      	mov	r1, r7
 800226c:	4630      	mov	r0, r6
 800226e:	47c0      	blx	r8
 8002270:	3001      	adds	r0, #1
 8002272:	d0e6      	beq.n	8002242 <_printf_common+0xb2>
 8002274:	f109 0901 	add.w	r9, r9, #1
 8002278:	e7d8      	b.n	800222c <_printf_common+0x9c>
	...

0800227c <_printf_i>:
 800227c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8002280:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8002284:	460c      	mov	r4, r1
 8002286:	7e09      	ldrb	r1, [r1, #24]
 8002288:	b085      	sub	sp, #20
 800228a:	296e      	cmp	r1, #110	; 0x6e
 800228c:	4617      	mov	r7, r2
 800228e:	4606      	mov	r6, r0
 8002290:	4698      	mov	r8, r3
 8002292:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8002294:	f000 80b3 	beq.w	80023fe <_printf_i+0x182>
 8002298:	d822      	bhi.n	80022e0 <_printf_i+0x64>
 800229a:	2963      	cmp	r1, #99	; 0x63
 800229c:	d036      	beq.n	800230c <_printf_i+0x90>
 800229e:	d80a      	bhi.n	80022b6 <_printf_i+0x3a>
 80022a0:	2900      	cmp	r1, #0
 80022a2:	f000 80b9 	beq.w	8002418 <_printf_i+0x19c>
 80022a6:	2958      	cmp	r1, #88	; 0x58
 80022a8:	f000 8083 	beq.w	80023b2 <_printf_i+0x136>
 80022ac:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80022b0:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 80022b4:	e032      	b.n	800231c <_printf_i+0xa0>
 80022b6:	2964      	cmp	r1, #100	; 0x64
 80022b8:	d001      	beq.n	80022be <_printf_i+0x42>
 80022ba:	2969      	cmp	r1, #105	; 0x69
 80022bc:	d1f6      	bne.n	80022ac <_printf_i+0x30>
 80022be:	6820      	ldr	r0, [r4, #0]
 80022c0:	6813      	ldr	r3, [r2, #0]
 80022c2:	0605      	lsls	r5, r0, #24
 80022c4:	f103 0104 	add.w	r1, r3, #4
 80022c8:	d52a      	bpl.n	8002320 <_printf_i+0xa4>
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	6011      	str	r1, [r2, #0]
 80022ce:	2b00      	cmp	r3, #0
 80022d0:	da03      	bge.n	80022da <_printf_i+0x5e>
 80022d2:	222d      	movs	r2, #45	; 0x2d
 80022d4:	425b      	negs	r3, r3
 80022d6:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 80022da:	486f      	ldr	r0, [pc, #444]	; (8002498 <_printf_i+0x21c>)
 80022dc:	220a      	movs	r2, #10
 80022de:	e039      	b.n	8002354 <_printf_i+0xd8>
 80022e0:	2973      	cmp	r1, #115	; 0x73
 80022e2:	f000 809d 	beq.w	8002420 <_printf_i+0x1a4>
 80022e6:	d808      	bhi.n	80022fa <_printf_i+0x7e>
 80022e8:	296f      	cmp	r1, #111	; 0x6f
 80022ea:	d020      	beq.n	800232e <_printf_i+0xb2>
 80022ec:	2970      	cmp	r1, #112	; 0x70
 80022ee:	d1dd      	bne.n	80022ac <_printf_i+0x30>
 80022f0:	6823      	ldr	r3, [r4, #0]
 80022f2:	f043 0320 	orr.w	r3, r3, #32
 80022f6:	6023      	str	r3, [r4, #0]
 80022f8:	e003      	b.n	8002302 <_printf_i+0x86>
 80022fa:	2975      	cmp	r1, #117	; 0x75
 80022fc:	d017      	beq.n	800232e <_printf_i+0xb2>
 80022fe:	2978      	cmp	r1, #120	; 0x78
 8002300:	d1d4      	bne.n	80022ac <_printf_i+0x30>
 8002302:	2378      	movs	r3, #120	; 0x78
 8002304:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8002308:	4864      	ldr	r0, [pc, #400]	; (800249c <_printf_i+0x220>)
 800230a:	e055      	b.n	80023b8 <_printf_i+0x13c>
 800230c:	6813      	ldr	r3, [r2, #0]
 800230e:	1d19      	adds	r1, r3, #4
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	6011      	str	r1, [r2, #0]
 8002314:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8002318:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800231c:	2301      	movs	r3, #1
 800231e:	e08c      	b.n	800243a <_printf_i+0x1be>
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	6011      	str	r1, [r2, #0]
 8002324:	f010 0f40 	tst.w	r0, #64	; 0x40
 8002328:	bf18      	it	ne
 800232a:	b21b      	sxthne	r3, r3
 800232c:	e7cf      	b.n	80022ce <_printf_i+0x52>
 800232e:	6813      	ldr	r3, [r2, #0]
 8002330:	6825      	ldr	r5, [r4, #0]
 8002332:	1d18      	adds	r0, r3, #4
 8002334:	6010      	str	r0, [r2, #0]
 8002336:	0628      	lsls	r0, r5, #24
 8002338:	d501      	bpl.n	800233e <_printf_i+0xc2>
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	e002      	b.n	8002344 <_printf_i+0xc8>
 800233e:	0668      	lsls	r0, r5, #25
 8002340:	d5fb      	bpl.n	800233a <_printf_i+0xbe>
 8002342:	881b      	ldrh	r3, [r3, #0]
 8002344:	4854      	ldr	r0, [pc, #336]	; (8002498 <_printf_i+0x21c>)
 8002346:	296f      	cmp	r1, #111	; 0x6f
 8002348:	bf14      	ite	ne
 800234a:	220a      	movne	r2, #10
 800234c:	2208      	moveq	r2, #8
 800234e:	2100      	movs	r1, #0
 8002350:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8002354:	6865      	ldr	r5, [r4, #4]
 8002356:	60a5      	str	r5, [r4, #8]
 8002358:	2d00      	cmp	r5, #0
 800235a:	f2c0 8095 	blt.w	8002488 <_printf_i+0x20c>
 800235e:	6821      	ldr	r1, [r4, #0]
 8002360:	f021 0104 	bic.w	r1, r1, #4
 8002364:	6021      	str	r1, [r4, #0]
 8002366:	2b00      	cmp	r3, #0
 8002368:	d13d      	bne.n	80023e6 <_printf_i+0x16a>
 800236a:	2d00      	cmp	r5, #0
 800236c:	f040 808e 	bne.w	800248c <_printf_i+0x210>
 8002370:	4665      	mov	r5, ip
 8002372:	2a08      	cmp	r2, #8
 8002374:	d10b      	bne.n	800238e <_printf_i+0x112>
 8002376:	6823      	ldr	r3, [r4, #0]
 8002378:	07db      	lsls	r3, r3, #31
 800237a:	d508      	bpl.n	800238e <_printf_i+0x112>
 800237c:	6923      	ldr	r3, [r4, #16]
 800237e:	6862      	ldr	r2, [r4, #4]
 8002380:	429a      	cmp	r2, r3
 8002382:	bfde      	ittt	le
 8002384:	2330      	movle	r3, #48	; 0x30
 8002386:	f805 3c01 	strble.w	r3, [r5, #-1]
 800238a:	f105 35ff 	addle.w	r5, r5, #4294967295
 800238e:	ebac 0305 	sub.w	r3, ip, r5
 8002392:	6123      	str	r3, [r4, #16]
 8002394:	f8cd 8000 	str.w	r8, [sp]
 8002398:	463b      	mov	r3, r7
 800239a:	aa03      	add	r2, sp, #12
 800239c:	4621      	mov	r1, r4
 800239e:	4630      	mov	r0, r6
 80023a0:	f7ff fef6 	bl	8002190 <_printf_common>
 80023a4:	3001      	adds	r0, #1
 80023a6:	d14d      	bne.n	8002444 <_printf_i+0x1c8>
 80023a8:	f04f 30ff 	mov.w	r0, #4294967295
 80023ac:	b005      	add	sp, #20
 80023ae:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80023b2:	4839      	ldr	r0, [pc, #228]	; (8002498 <_printf_i+0x21c>)
 80023b4:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 80023b8:	6813      	ldr	r3, [r2, #0]
 80023ba:	6821      	ldr	r1, [r4, #0]
 80023bc:	1d1d      	adds	r5, r3, #4
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	6015      	str	r5, [r2, #0]
 80023c2:	060a      	lsls	r2, r1, #24
 80023c4:	d50b      	bpl.n	80023de <_printf_i+0x162>
 80023c6:	07ca      	lsls	r2, r1, #31
 80023c8:	bf44      	itt	mi
 80023ca:	f041 0120 	orrmi.w	r1, r1, #32
 80023ce:	6021      	strmi	r1, [r4, #0]
 80023d0:	b91b      	cbnz	r3, 80023da <_printf_i+0x15e>
 80023d2:	6822      	ldr	r2, [r4, #0]
 80023d4:	f022 0220 	bic.w	r2, r2, #32
 80023d8:	6022      	str	r2, [r4, #0]
 80023da:	2210      	movs	r2, #16
 80023dc:	e7b7      	b.n	800234e <_printf_i+0xd2>
 80023de:	064d      	lsls	r5, r1, #25
 80023e0:	bf48      	it	mi
 80023e2:	b29b      	uxthmi	r3, r3
 80023e4:	e7ef      	b.n	80023c6 <_printf_i+0x14a>
 80023e6:	4665      	mov	r5, ip
 80023e8:	fbb3 f1f2 	udiv	r1, r3, r2
 80023ec:	fb02 3311 	mls	r3, r2, r1, r3
 80023f0:	5cc3      	ldrb	r3, [r0, r3]
 80023f2:	f805 3d01 	strb.w	r3, [r5, #-1]!
 80023f6:	460b      	mov	r3, r1
 80023f8:	2900      	cmp	r1, #0
 80023fa:	d1f5      	bne.n	80023e8 <_printf_i+0x16c>
 80023fc:	e7b9      	b.n	8002372 <_printf_i+0xf6>
 80023fe:	6813      	ldr	r3, [r2, #0]
 8002400:	6825      	ldr	r5, [r4, #0]
 8002402:	6961      	ldr	r1, [r4, #20]
 8002404:	1d18      	adds	r0, r3, #4
 8002406:	6010      	str	r0, [r2, #0]
 8002408:	0628      	lsls	r0, r5, #24
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	d501      	bpl.n	8002412 <_printf_i+0x196>
 800240e:	6019      	str	r1, [r3, #0]
 8002410:	e002      	b.n	8002418 <_printf_i+0x19c>
 8002412:	066a      	lsls	r2, r5, #25
 8002414:	d5fb      	bpl.n	800240e <_printf_i+0x192>
 8002416:	8019      	strh	r1, [r3, #0]
 8002418:	2300      	movs	r3, #0
 800241a:	6123      	str	r3, [r4, #16]
 800241c:	4665      	mov	r5, ip
 800241e:	e7b9      	b.n	8002394 <_printf_i+0x118>
 8002420:	6813      	ldr	r3, [r2, #0]
 8002422:	1d19      	adds	r1, r3, #4
 8002424:	6011      	str	r1, [r2, #0]
 8002426:	681d      	ldr	r5, [r3, #0]
 8002428:	6862      	ldr	r2, [r4, #4]
 800242a:	2100      	movs	r1, #0
 800242c:	4628      	mov	r0, r5
 800242e:	f7fd fecf 	bl	80001d0 <memchr>
 8002432:	b108      	cbz	r0, 8002438 <_printf_i+0x1bc>
 8002434:	1b40      	subs	r0, r0, r5
 8002436:	6060      	str	r0, [r4, #4]
 8002438:	6863      	ldr	r3, [r4, #4]
 800243a:	6123      	str	r3, [r4, #16]
 800243c:	2300      	movs	r3, #0
 800243e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8002442:	e7a7      	b.n	8002394 <_printf_i+0x118>
 8002444:	6923      	ldr	r3, [r4, #16]
 8002446:	462a      	mov	r2, r5
 8002448:	4639      	mov	r1, r7
 800244a:	4630      	mov	r0, r6
 800244c:	47c0      	blx	r8
 800244e:	3001      	adds	r0, #1
 8002450:	d0aa      	beq.n	80023a8 <_printf_i+0x12c>
 8002452:	6823      	ldr	r3, [r4, #0]
 8002454:	079b      	lsls	r3, r3, #30
 8002456:	d413      	bmi.n	8002480 <_printf_i+0x204>
 8002458:	68e0      	ldr	r0, [r4, #12]
 800245a:	9b03      	ldr	r3, [sp, #12]
 800245c:	4298      	cmp	r0, r3
 800245e:	bfb8      	it	lt
 8002460:	4618      	movlt	r0, r3
 8002462:	e7a3      	b.n	80023ac <_printf_i+0x130>
 8002464:	2301      	movs	r3, #1
 8002466:	464a      	mov	r2, r9
 8002468:	4639      	mov	r1, r7
 800246a:	4630      	mov	r0, r6
 800246c:	47c0      	blx	r8
 800246e:	3001      	adds	r0, #1
 8002470:	d09a      	beq.n	80023a8 <_printf_i+0x12c>
 8002472:	3501      	adds	r5, #1
 8002474:	68e3      	ldr	r3, [r4, #12]
 8002476:	9a03      	ldr	r2, [sp, #12]
 8002478:	1a9b      	subs	r3, r3, r2
 800247a:	42ab      	cmp	r3, r5
 800247c:	dcf2      	bgt.n	8002464 <_printf_i+0x1e8>
 800247e:	e7eb      	b.n	8002458 <_printf_i+0x1dc>
 8002480:	2500      	movs	r5, #0
 8002482:	f104 0919 	add.w	r9, r4, #25
 8002486:	e7f5      	b.n	8002474 <_printf_i+0x1f8>
 8002488:	2b00      	cmp	r3, #0
 800248a:	d1ac      	bne.n	80023e6 <_printf_i+0x16a>
 800248c:	7803      	ldrb	r3, [r0, #0]
 800248e:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8002492:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8002496:	e76c      	b.n	8002372 <_printf_i+0xf6>
 8002498:	08002610 	.word	0x08002610
 800249c:	08002621 	.word	0x08002621

080024a0 <memcpy>:
 80024a0:	b510      	push	{r4, lr}
 80024a2:	1e43      	subs	r3, r0, #1
 80024a4:	440a      	add	r2, r1
 80024a6:	4291      	cmp	r1, r2
 80024a8:	d100      	bne.n	80024ac <memcpy+0xc>
 80024aa:	bd10      	pop	{r4, pc}
 80024ac:	f811 4b01 	ldrb.w	r4, [r1], #1
 80024b0:	f803 4f01 	strb.w	r4, [r3, #1]!
 80024b4:	e7f7      	b.n	80024a6 <memcpy+0x6>

080024b6 <memmove>:
 80024b6:	4288      	cmp	r0, r1
 80024b8:	b510      	push	{r4, lr}
 80024ba:	eb01 0302 	add.w	r3, r1, r2
 80024be:	d807      	bhi.n	80024d0 <memmove+0x1a>
 80024c0:	1e42      	subs	r2, r0, #1
 80024c2:	4299      	cmp	r1, r3
 80024c4:	d00a      	beq.n	80024dc <memmove+0x26>
 80024c6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80024ca:	f802 4f01 	strb.w	r4, [r2, #1]!
 80024ce:	e7f8      	b.n	80024c2 <memmove+0xc>
 80024d0:	4283      	cmp	r3, r0
 80024d2:	d9f5      	bls.n	80024c0 <memmove+0xa>
 80024d4:	1881      	adds	r1, r0, r2
 80024d6:	1ad2      	subs	r2, r2, r3
 80024d8:	42d3      	cmn	r3, r2
 80024da:	d100      	bne.n	80024de <memmove+0x28>
 80024dc:	bd10      	pop	{r4, pc}
 80024de:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80024e2:	f801 4d01 	strb.w	r4, [r1, #-1]!
 80024e6:	e7f7      	b.n	80024d8 <memmove+0x22>

080024e8 <_realloc_r>:
 80024e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80024ea:	4607      	mov	r7, r0
 80024ec:	4614      	mov	r4, r2
 80024ee:	460e      	mov	r6, r1
 80024f0:	b921      	cbnz	r1, 80024fc <_realloc_r+0x14>
 80024f2:	4611      	mov	r1, r2
 80024f4:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80024f8:	f7ff bc58 	b.w	8001dac <_malloc_r>
 80024fc:	b922      	cbnz	r2, 8002508 <_realloc_r+0x20>
 80024fe:	f7ff fc07 	bl	8001d10 <_free_r>
 8002502:	4625      	mov	r5, r4
 8002504:	4628      	mov	r0, r5
 8002506:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002508:	f000 f814 	bl	8002534 <_malloc_usable_size_r>
 800250c:	42a0      	cmp	r0, r4
 800250e:	d20f      	bcs.n	8002530 <_realloc_r+0x48>
 8002510:	4621      	mov	r1, r4
 8002512:	4638      	mov	r0, r7
 8002514:	f7ff fc4a 	bl	8001dac <_malloc_r>
 8002518:	4605      	mov	r5, r0
 800251a:	2800      	cmp	r0, #0
 800251c:	d0f2      	beq.n	8002504 <_realloc_r+0x1c>
 800251e:	4631      	mov	r1, r6
 8002520:	4622      	mov	r2, r4
 8002522:	f7ff ffbd 	bl	80024a0 <memcpy>
 8002526:	4631      	mov	r1, r6
 8002528:	4638      	mov	r0, r7
 800252a:	f7ff fbf1 	bl	8001d10 <_free_r>
 800252e:	e7e9      	b.n	8002504 <_realloc_r+0x1c>
 8002530:	4635      	mov	r5, r6
 8002532:	e7e7      	b.n	8002504 <_realloc_r+0x1c>

08002534 <_malloc_usable_size_r>:
 8002534:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8002538:	1f18      	subs	r0, r3, #4
 800253a:	2b00      	cmp	r3, #0
 800253c:	bfbc      	itt	lt
 800253e:	580b      	ldrlt	r3, [r1, r0]
 8002540:	18c0      	addlt	r0, r0, r3
 8002542:	4770      	bx	lr

08002544 <_init>:
 8002544:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002546:	bf00      	nop
 8002548:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800254a:	bc08      	pop	{r3}
 800254c:	469e      	mov	lr, r3
 800254e:	4770      	bx	lr

08002550 <_fini>:
 8002550:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002552:	bf00      	nop
 8002554:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002556:	bc08      	pop	{r3}
 8002558:	469e      	mov	lr, r3
 800255a:	4770      	bx	lr
